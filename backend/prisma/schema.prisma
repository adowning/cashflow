datasource db {
  provider = "postgresql"
  url      = "postgresql://user:asdfasdf@localhost:5439/newdb" //env("DATABASE_URL")
}

generator drizzle {
  provider        = "prisma-generator-drizzle"
  output          = "../src/database/_schema.ts"
  relationalQuery = true
}
generator drizzle2 {
  provider        = "drizzle-prisma-generator"
  output          = "./_schema.ts"
}

generator typescriptInterfaces {
  provider    = "prisma-generator-typescript-interfaces"
  output      = "../src/database/interfaces.ts"
  jsonType    = "Record<string, unknown>"
  decimalType = "number"
  modelType	 = "type"
}

enum Role {
  USER
  PLAYER
  ADMIN
  VIP
  MODERATOR
  SYSTEM
  OWNER
  MEMBER
  OPERATOR
  SUPPORT_AGENT
}
model User {
  id            String    @id @default(cuid())
  name          String
  username  String?
  role    String @default("USER")
  banned Boolean @default(false)
  displayUsername String?
  two_factor_enabled Boolean @default(false)
  playerId  String? @map("player_id")
  email         String    @unique
  emailVerified Boolean
  passwordHash  String     @map("password_hash")
  image         String?
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @default(now()) @map("updated_at")
  sessions      Session[]
  accounts      Account[]
  wallets  Wallet[] @relation("UserWallets")

  @@map("user")
}

model Session {
  id        String    @id @default(cuid())
  expiresAt DateTime
  token     String    @unique
  ipAddress String?
  userAgent String?
  userId    String
  playerId  String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  @@map("session")
}

model Account {
  id                    String    @id @default(cuid())
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime @default(now()) @map("created_at")
  updatedAt             DateTime @default(now()) @map("updated_at")

  @@map("account")
}

model Verification {
  id         String    @id @default(cuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @default(now()) @map("updated_at")

  @@map("verification")
}
model jwks {
  id         String    @id @default(cuid())
  privateKey       String
  passpublicKey       String
  createdAt  DateTime @default(now()) @map("created_at")
}
model Player {
  id                       String                  @id @default(cuid())
  playername               String                  @unique(map: "players_playername_unique")
  email                    String?                 @unique(map: "players_email_unique")
  passwordHash             String?                 @map("password_hash")
  accessToken              String?                 @map("access_token")
  refreshToken             String?                 @map("refresh_token")
  accessTokenExpiresAt     DateTime?               @map("access_token_expires_at")
  refreshTokenExpiresAt    DateTime?               @map("refresh_token_expires_at")
  currentGameSessionDataId String?                 @unique(map: "players_current_game_session_data_id_unique") @map("current_game_session_data_id")
  currentAuthSessionDataId String?                 @unique(map: "players_current_auth_session_data_id_unique") @map("current_auth_session_data_id")
  avatarUrl                String?                 @default("avatar-01") @map("avatar_url")
  role                     String                  @default("PLAYER")
  phpId                    Int                     @default(0)
  isActive                 Boolean                 @default(true) @map("is_active")
  lastLoginAt              DateTime?               @map("last_login_at")
  totalXpGained            Int                     @map("total_xp_gained")
  vipInfoId                String?                 @unique(map: "players_VipInfo_id_unique") @map("vip_info_id")
  deletedAt                DateTime?               @map("deleted_at")
  lastSeen                 DateTime?               @map("last_seen")
  rtgBlockTime             Int                     @default(0) @map("rtg_block_time")
  phone                    String?                 @unique(map: "players_phone_unique")
  path                     String[]                @default([])
  invitorId                String?                 @map("invitor_id")
  avatar                   String                  @default("avatar-01.webp")
  status                   Status                  @default(ACTIVE)
  count_balance            Int                     @default(0) @map("count_balance")
  count_tournaments        Int                     @default(0) @map("count_tournaments")
  count_happyhours         Int                     @default(0) @map("count_happyhours")
  count_refunds            Int                     @default(0) @map("count_refunds")
  count_progress           Int                     @default(0) @map("count_progress")
  count_daily_entries      Int                     @default(0) @map("count_daily_entries")
  count_invite             Int                     @default(0) @map("count_invite")
  count_welcomebonus       Int                     @default(0) @map("count_welcomebonus")
  count_smsbonus           Int                     @default(0) @map("count_smsbonus")
  count_wheelfortune       Int                     @default(0) @map("count_wheelfortune")
  address                  Int                     @default(0)
  deposits                 Deposit[]
  gameSessions             GameSessions[]
  jackpotWins              JackpotWins[]
  Jackpots                 Jackpots[]
  activeWalletId           String?                 @unique @map("active_wallet_id")
  loyaltyFundTransactions  LoyaltyFundTransaction[]
  // activeWallet             Wallet?                 @relation("ActiveWalletForPlayer", fields: [activeWalletId], references: [id], onDelete: SetNull)
  // wallets                  Wallet[]
  vipInfo                  VipInfo?
  withdrawals              Withdrawal[]
  activeOperatorId         String?                 @map("active_operator_id")
  ops                      Operators?              @relation(fields: [activeOperatorId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "favorite_player_operators_id_active_operator_id_fk")
  inviteCode               String?
  operatorSwitchHistory    OperatorSwitchHistory[]
  vipCashbacks             VipCashback[]
  vipLevelUpBonuses        VipLevelUpBonus[]
  vipSpinRewards           VipSpinReward[]
  affiliateLogsInvited     AffiliateLog[]          @relation("Invitor")
  affiliateLogsReferred    AffiliateLog[]          @relation("Child")
  referralCodes            ReferralCode[]
  PlayerBonus              PlayerBonus[]           @relation(map: "player_bonuses_player_id_players_id_fk")
  createdAt                DateTime               @default(now()) @map("created_at")
  updatedAt                DateTime               @default(now()) @map("updated_at")

  @@map("players")
}

model Deposit {
  id        String    @id @default(cuid()) @db.VarChar
  playerId  String?   @map("player_id") @db.VarChar
  amount    Int?
  status    String?
  idNumber  String?   @map("id_number")
  firstName String?   @map("first_name")
  lastName  String?   @map("last_name")
  channelsId String?   @map("channels_id")
  note      String?
  currency  String?
  players   Player?   @relation(fields: [playerId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "deposit_player_id_players_id_fk")
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt DateTime @default(now()) @map("updated_at") @db.Timestamp(6)

  @@map("deposit")
}

model GameSessions {
  id              String        @id @default(cuid()) @db.VarChar
  authSessionId   String        @map("auth_session_id")
  playerId        String        @map("player_id")
  gameId          String?       @map("game_id")
  gameName        String?       @map("game_name")
  status          SessionStatus @default(ACTIVE)
  totalWagered    Int           @default(0) @map("total_wagered")
  totalWon        Int           @default(0) @map("total_won")
  totalXpGained   Int           @default(0) @map("total_xp_gained")
  rtp             Int?          @default(0)
  duration        Int           @default(0)
  endAt           DateTime?     @map("end_at") @db.Timestamptz(6)
  startingBalance Int           @default(0) @map("starting_balance")
  players         Player        @relation(fields: [playerId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "game_sessions_player_id_players_id_fk")
  game            Games?        @relation(fields: [gameId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "game_sessions_game_id_games_id_fk")
  expiredTime     DateTime?     @map("expired_time") @db.Timestamptz(6)
  createdAt       DateTime     @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt       DateTime     @default(now()) @map("updated_at")

  @@index([authSessionId], map: "game_session_auth_session_idx")
  @@index([playerId], map: "game_session_player_idx")
  @@map("game_sessions")
}



model JackpotContributions {
  id                      String   @id @default(cuid()) @db.VarChar
  jackpotId               String   @map("jackpot_id")
  playerId                String?  @map("player_id")
  gameSpinId              String   @map("game_spin_id")
  contributionAmountCoins Int      @map("contribution_amount_coins")
  jackpots                Jackpots @relation(fields: [jackpotId], references: [id], onDelete: Cascade, map: "jackpot_contributions_jackpot_fkey")
  createdAt               DateTime @default(now()) @map("created_at")
  updatedAt               DateTime @default(now()) @map("updated_at")

  @@unique([jackpotId, gameSpinId], map: "JackpotContribution_jackpotId_gameSpinId_key")
  @@map("jackpot_contributions")
}

model JackpotWins {
  id             String    @id @default(cuid()) @db.VarChar
  jackpotId      String    @map("jackpot_id")
  winnerId       String    @map("winner_id")
  winAmountCoins Int       @map("win_amount_coins")
  gameSpinId     String    @unique(map: "jackpot_wins_game_spin_id_unique") @map("game_spin_id")
  transactionId  String?   @map("transaction_id")
  sessionDataId  String?   @map("session_data_id")
  jackpots       Jackpots  @relation(fields: [jackpotId], references: [id], onDelete: Cascade, map: "jackpot_wins_jackpot_fkey")
  player         Player    @relation(fields: [winnerId], references: [id], onDelete: Cascade, map: "jackpot_wins_winner_fkey")
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @default(now()) @map("updated_at")

  @@map("jackpot_wins")
}

model Jackpots {
  id                            String                 @id @default(cuid()) @db.VarChar
  type                          String
  currentAmountCoins            Int                    @map("current_amount_coins")
  percent                       Int                    @default(1)
  paySum                        Int                    @default(5)
  startBalance                  Int                    @default(0)
  playerId                      String?
  seedAmountCoins               Int                    @map("seed_amount_coins")
  minimumBetCoins               Int                    @default(1) @map("minimum_bet_coins")
  contributionRateBasisPoints   Int                    @map("contribution_rate_basis_points")
  probabilityPerMillion         Int                    @map("probability_per_million")
  minimumTimeBetweenWinsMinutes Int                    @map("minimum_time_between_wins_minutes")
  lastWonAt                     DateTime?              @map("last_won_at")
  lastWonBy                     String?                @map("last_won_by")
  isActive                      Boolean                @default(true) @map("is_active")
  jackpotContributions          JackpotContributions[]
  jackpotWins                   JackpotWins[]
  lastContribution              Int?
  players                       Player?                @relation(fields: [lastWonBy], references: [id], map: "jackpots_lastWinner_fkey")
  createdAt                     DateTime              @default(now()) @map("created_at")
  updatedAt                     DateTime              @default(now()) @map("updated_at")

  @@map("jackpots")
}

model Operators {
  id                       String                  @id @default(cuid()) @db.VarChar
  name                     String                  @unique(map: "operators_name_unique")
  operatorSecret           String                  @map("operator_secret")
  operatorAccess           String                  @map("operator_access")
  callbackUrl              String                  @map("callback_url")
  isActive                 Boolean                 @default(true) @map("is_active")
  allowedIps               String                  @map("allowed_ips")
  description              String?
  productIds               String?                 @map("product_ids")
  balance                  Int
  netRevenue               Int                     @default(0) @map("net_revenue")
  acceptedPayments         String[]                @map("accepted_payments")
  ownerId                  String?                 @map("owner_id")
  lastUsedAt               DateTime?               @map("last_used_at")
  games                    Games[]
  products                 Products[]
  players                  Player[]
  upfrontBankCredits       Int                     @default(10000) @map("upfront_bank_credits")
  platformFeeRate          String                  @default("0.1500") @map("platform_fee_rate")
  loyaltyContributionRate  String                  @default("0.0500") @map("loyalty_contribution_rate")
  settlements              OperatorSettlement[]
  loyaltyFundContributions LoyaltyFundTransaction[]
  switchedFromHistory      OperatorSwitchHistory[] @relation("SwitchedFrom")
  switchedToHistory        OperatorSwitchHistory[] @relation("SwitchedTo")
  wallets                  Wallet[]
  createdAt                DateTime               @default(now()) @map("created_at")
  updatedAt                DateTime               @default(now()) @map("updated_at")

  @@map("operators")
}

model OperatorSwitchHistory {
  id             String     @id @default(cuid()) @db.VarChar
  playerId       String     @map("player_id")
  fromOperatorId String?    @map("from_operator_id")
  toOperatorId   String     @map("to_operator_id")
  switchedAt     DateTime   @default(now()) @map("switched_at")
  player         Player     @relation(fields: [playerId], references: [id], onDelete: Cascade)
  fromOperator   Operators? @relation("SwitchedFrom", fields: [fromOperatorId], references: [id], onDelete: SetNull)
  toOperator     Operators  @relation("SwitchedTo", fields: [toOperatorId], references: [id], onDelete: Cascade)
  createdAt      DateTime?  @default(now()) @map("created_at")
  updatedAt      DateTime?  @default(now()) @map("updated_at")

  @@map("operator_switch_history")
}

model Products {
  id                       String         @id @default(cuid()) @db.VarChar
  title                    String         @default("default")
  productType              String         @default("bundle") @map("product_type")
  bonusTotalInCredits      Int            @map("bonus_total_in_credits")
  isActive                 Boolean?       @map("is_active")
  priceInCents             Int            @map("price_in_cents")
  amountToReceiveInCredits Int            @map("amount_to_receive_in_credits")
  bestValue                Int            @map("best_value")
  discountInCents          Int            @map("discount_in_cents")
  bonusSpins               Int            @map("bonus_spins")
  isPromo                  Boolean?       @map("is_promo")
  totalDiscountInCents     Int            @map("total_discount_in_cents")
  operatorId               String?        @map("operator_id")
  operators                Operators?     @relation(fields: [operatorId], references: [id], onDelete: Cascade, map: "products_operator_fkey")
  transactions             Transaction[]
  createdAt                DateTime     @default(now()) @map("created_at")
  updatedAt                DateTime      @default(now()) @map("updated_at")

  @@map("products")
}

model Transaction {
  id                  String    @id @default(cuid()) @db.VarChar
  processedAt         DateTime? @map("processed_at")
  walletId            String?   @map("wallet_id")
  type                String
  status              String    @default("PENDING")
  amount              Int
  netAmount           Int?      @map("net_amount")
  currencyName        String?   @map("currency_name")
  feeAmount           Int?      @map("fee_amount")
  productId           String?   @map("product_id")
  paymentMethod       String?   @map("payment_method")
  balanceBefore       Int?      @map("balance_before")
  balanceAfter        Int?      @map("balance_after")
  bonusBalanceBefore  Int?      @map("bonus_balance_before")
  bonusBalanceAfter   Int?      @map("bonus_balance_after")
  bonusAmount         Int?      @map("bonus_amount")
  wageringRequirement Int?      @map("wagering_requirement")
  wageringProgress    Int?      @map("wagering_progress")
  description         String?
  provider            String?
  providerTxId        String?   @map("provider_tx_id")
  relatedGameId       String?   @map("related_game_id")
  gameName       String?   @map("game_name")
  relatedRoundId      String?   @map("related_round_id")
  operatorId          String?   @map("operator_id")
  playerId            String    @map("player_id")
  products            Products? @relation(fields: [productId], references: [id], map: "transactions_product_fkey")
  wallets             Wallet?   @relation(fields: [walletId], references: [id], onDelete: Cascade, map: "transactions_wallet_fkey")
  createdAt           DateTime @default(now()) @map("created_at")
  updatedAt           DateTime @default(now()) @map("updated_at")

  @@map("transactions")
}

model ReferralCode {
  id             String    @id @default(cuid())
  code           String    @unique
  name           String?   @default("")
  commissionRate Float     @map("commission_rate")
  playerId       String    @map("player_id")
  player         Player    @relation(fields: [playerId], references: [id])
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @default(now()) @map("updated_at")

  @@map("referral_codes")
}

model Wallet {
  id            String         @id @default(cuid()) @db.VarChar
  balance       Int            @default(0)
  paymentMethod String         @default("INSTORE_CASH") @map("payment_method")
  currency      String         @default("USD")
  address       String?        @unique(map: "wallets_address_unique")
  cashtag       String?        @unique(map: "wallets_cashtag_unique")
  operatorId    String         @map("operator_id")
  operator      Operators      @relation(fields: [operatorId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "wallets_operator_fkey")
  lastUsedAt    DateTime?      @map("last_used_at")
  transactions  Transaction[]
  balances      Balance[]      @relation("WalletBalances")
  userId      String         @map("user_id")
  isActive      Boolean        @default(false)
  activeForUser User         @relation(name: "UserWallets", fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "wallets_user_fkey")
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @default(now()) @map("updated_at")

  // @@unique([userId, isActive])
  // @@unique([userId, operatorId], map: "wallets_user_operator_unique")
  @@map("wallets")
}

model Withdrawal {
  id           String    @id @default(cuid()) @db.VarChar
  playerId     String?   @map("player_id") @db.VarChar
  amount       Int?
  status       String?
  // metadata   Bytes?    // <-- Add this line
  idNumber     String?   @map("id_number")
  firstName    String?   @map("first_name")
  lastName     String?   @map("last_name")
  channelsId   String?   @map("channels_id")
  note         String?
  currencyType String?   @map("currency_type")
  currency     String?
  players      Player?   @relation(fields: [playerId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "withdrawals_player_id_players_id_fk")
  createdAt    DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt    DateTime @default(now()) @map("updated_at") @db.Timestamp(6)

  @@map("withdrawals")
}

model VipRank {
  id                   String     @id @default(cuid())
  name                 String     @unique(map: "VipRank_name_unique")
  minXp                Int        @unique(map: "VipRank_minXp_unique") @map("min_xp")
  icon                 String     @unique(map: "icon") @default("/images/vip/rank1.avif")
  dailyCashbackMax     Int        @map("daily_cashback_max")
  monthlyCashbackMax   Int        @map("monthly_cashback_max")
  wagerBonusCoinPct    Int        @map("wager_bonus_coin_pct")
  purchaseBonusCoinPct Int        @map("purchase_bonus_coin_pct")
  levelUpBonusCoinPct  Int        @map("level_up_bonus_coin_pct")
  vipSpinMaxAmount     Int        @default(5) @map("vip_spin_max_amount")
  hasConcierge         Boolean    @map("has_concierge")
  hasVipLoungeAccess   Boolean    @map("has_vip_lounge_access")
  isInvitationOnly     Boolean    @map("is_invitation_only")
  vipInfo              VipInfo[]
  levels               VipLevel[]
  createdAt            DateTime  @default(now()) @map("created_at")
  updatedAt            DateTime  @default(now()) @map("updated_at")

  @@map("vip_ranks")
}

model VipInfo {
  id            String    @id @default(cuid()) @db.VarChar
  level         Int       @default(1)
  xp            Int
  totalXp       Int       @map("total_xp")
  playerId      String    @unique(map: "VipInfo_playerId_unique") @map("player_id")
  currentRankid String?   @map("current_rankid")
  vipRank       VipRank?  @relation(fields: [currentRankid], references: [id], onDelete: Cascade, map: "VipInfo_currentRank_fkey")
  players       Player    @relation(fields: [playerId], references: [id], onDelete: Cascade, map: "VipInfo_player_fkey")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @default(now()) @map("updated_at")

  @@map("vip_info")
}

model VipLevel {
  id                  String    @id @default(cuid())
  parentId            String    @map("parent_id")
  minXpNeeded         Int?      @default(0) @map("min_xp_needed")
  levelNumber         Int?      @default(0) @map("level_number")
  levelName           String    @map("level_name")
  parent              VipRank   @relation(fields: [parentId], references: [id])
  spinBonusMultiplier Float?    @default(0.1) @map("spin_bonus_multiplier_id")
  setting             Setting?  @relation(fields: [settingId], references: [id])
  settingId           String?   @map("setting_id")
  levelUpBonusAmount  Int?      @map("level_up_bonus_amount")
  createdAt           DateTime @default(now()) @map("created_at")
  updatedAt           DateTime @default(now()) @map("updated_at")

  @@map("vip_levels")
}

model VipCashback {
  id        String    @id @default(cuid())
  playerId  String?   @map("player_id")
  amount    Int
  currency  String
  tiersName String    @map("tiers_name")
  type      String
  player    Player?   @relation(fields: [playerId], references: [id])
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  @@map("vip_cashback")
}

model VipLevelUpBonus {
  id        String    @id @default(cuid())
  playerId  String    @map("player_id")
  amount    Int
  levelName String    @map("level_name")
  levelXp   Int       @map("level_xp")
  player    Player    @relation(fields: [playerId], references: [id])
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  @@map("vip_level_up_bonus")
}

model VipSpinReward {
  id        String    @id @default(cuid())
  playerId  String    @map("player_id")
  amount    Int
  currency  String
  player    Player    @relation(fields: [playerId], references: [id])
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  @@map("vip_spin_rewards")
}

model Affiliate {
  id           String      @id @default(cuid())
  playername   String      @unique
  firstName    String      @map("first_name")
  lastName     String      @map("last_name")
  status       String
  email        String      @unique
  role         String
  referralCode String      @unique @map("referral_code")
  parentId     String?     @map("parent_id")
  path         String[]    @default([])
  password     String
  parent       Affiliate?  @relation("AffiliateTree", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children     Affiliate[] @relation("AffiliateTree")
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime   @default(now()) @map("updated_at")

  @@map("affiliates")
}

model AffiliateLog {
  id                  String   @id @default(cuid())
  invitorId           String   @map("invitor_id")
  childId             String   @map("child_id")
  currency            String
  referralCode        String   @map("referral_code")
  betAmount           Float    @default(0) @map("bet_amount")
  commissionAmount    Float    @default(0) @map("commission_amount")
  commissionWager     Float    @default(0) @map("commission_wager")
  totalReferralAmount Float    @default(0) @map("total_referral_amount")
  referralAmount      Float    @default(0) @map("referral_amount")
  referralWager       Float    @default(0) @map("referral_wager")
  lastVipLevelAmount  Float    @default(0) @map("last_vip_level_amount")
  invitor             Player   @relation("Invitor", fields: [invitorId], references: [id])
  child               Player   @relation("Child", fields: [childId], references: [id])
  createdAt           DateTime @default(now()) @map("created_at")
  updatedAt           DateTime @default(now()) @map("updated_at")

  @@map("affiliate_logs")
}
model Setting {
  id                     String      @id @default(cuid())
  name                   String      @default("setting")
  referralCodeCount      Int         @default(20) @map("referral_code_count")
  referralCommissionRate Float       @default(0.25) @map("referral_commission_rate")
  rates                  String      @default("[{\"USD\": 1}]")
  commission             Commission?
  
  // Configuration service JSON fields
  jackpotConfig          Json?       @map("jackpot_config")
  gameGroups             Json?       @map("game_groups") 
  vipConfig              Json?       @map("vip_config")
  wageringConfig         Json?       @map("wagering_config")
  systemLimits           Json?       @map("system_limits")
  
  vipLevels              VipLevel[]
  createdAt              DateTime   @default(now()) @map("created_at")
  updatedAt              DateTime   @default(now()) @map("updated_at")

  @@map("settings")
}


model Games {
  id                           String         @id @default(cuid()) @db.VarChar
  name                         String         @unique
  title                        String?
  description                  String?
  category                     String?        @default("slots")
  tags                         String?
  thumbnailUrl                 String?        @map("thumbnail_url")
  bannerUrl                    String?        @map("banner_url")
  developer                    String
  providerId                   String?        @map("provider_id")
  totalWagered                 Int?           @map("total_wagered")
  totalWon                     Int?           @map("total_won")
  targetRtp                    Int            @default(90) @map("target_rtp")
  isFeatured                   Boolean?       @map("is_featured")
  statIn                       Int?           @default(0) @map("stat_in")
  statOut                      Int?           @default(0) @map("stat_out")
  isActive                     Boolean?       @default(true) @map("is_active")
  operatorId                   String?        @map("operator_id")
  version                      String?
  jpgIds                       String[]       @map("jpg_ids")
  isHorizontal                 Boolean?       @default(false)
  jpgId                        String?        @map("jpg_id")
  label                        String?        @map("label")
  device                       Int?           @map("device")
  gamebank                     String?        @map("gamebank")
  linesPercentConfigSpin       String?        @map("lines_percent_config_spin")
  linesPercentConfigSpinBonus  String?        @map("lines_percent_config_spin_bonus")
  linesPercentConfigBonus      String?        @map("lines_percent_config_bonus")
  linesPercentConfigBonusBonus String?        @map("lines_percent_config_bonus_bonus")
  rezerv                       String?        @map("rezerv")
  cask                         String?        @map("cask")
  advanced                     String?        @map("advanced")
  bet                          String?        @map("bet")
  scaleMode                    String?        @map("scale_mode")
  slotViewState                String?        @map("slot_view_state")
  view                         String?        @map("view")
  denomination                 String?        @map("denomination")
  categoryTemp                 String?        @map("category_temp")
  originalId                   String?        @map("original_id")
  bids                         String[]       @map("bids")
  rtpStatIn                    Int?           @map("rtp_stat_in")
  rtpStatOut                   Int?           @map("rtp_stat_out")
  currentRtp                   String?        @map("current_rtp")
  status                       Int?           @default(0)
  state                        Boolean?       @default(true)
  operators                    Operators?     @relation(fields: [operatorId], references: [id], map: "games_operator_fkey")
  gameSessions                 GameSessions[] @relation(map: "game_sessions_game_id_games_id_fk")
  createdAt                    DateTime      @default(now()) @map("created_at")
  updatedAt                    DateTime      @default(now()) @map("updated_at")

  @@map("games")
}


model Commission {
  id           String    @id @default(cuid())
  master       Float     @default(30)
  affiliate    Float     @default(20)
  subAffiliate Float     @default(10) @map("sub_affiliate")
  settingId    String    @unique @map("setting_id")
  setting      Setting   @relation(fields: [settingId], references: [id])
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @default(now()) @map("updated_at")

  @@map("commissions")
}

model OperatorSettlement {
  id                      String    @id @default(cuid())
  operatorId              String    @map("operator_id")
  weekStartDate           DateTime  @map("week_start_date")
  weekEndDate             DateTime  @map("week_end_date")
  totalTurnover           Float     @default(0.00) @map("total_turnover") @db.DoublePrecision
  totalPayouts            Float     @default(0.00) @map("total_payouts") @db.DoublePrecision
  grossGamingRevenue      Float     @map("gross_gaming_revenue") @db.DoublePrecision
  platformFee             Float     @map("platform_fee") @db.DoublePrecision
  loyaltyFundContribution Float     @map("loyalty_fund_contribution") @db.DoublePrecision
  netToOperator           Float     @map("net_to_operator") @db.DoublePrecision
  operator                Operators @relation(fields: [operatorId], references: [id])
  createdAt               DateTime @default(now()) @map("created_at")
  updatedAt               DateTime @default(now()) @map("updated_at")

  @@map("operator_settlements")
}

model LoyaltyFundTransaction {
  id                   String                     @id @default(cuid())
  type                 LoyaltyFundTransactionType
  amount               Float                      @db.DoublePrecision
  description          String?
  operatorId           String?                    @map("operator_id")
  playerId             String?                    @map("player_id")
  relatedTransactionId String?                    @map("related_transaction_id")
  operator             Operators?                 @relation(fields: [operatorId], references: [id])
  player               Player?                    @relation(fields: [playerId], references: [id])
  createdAt            DateTime                  @default(now()) @map("created_at")
  updatedAt            DateTime                 @default(now()) @map("updated_at")

  @@map("loyalty_fund_transactions")
}

model Balance {
  id           String    @id @default(cuid())
  playerId     String    @map("player_id")
  currencyId   String    @map("currency_id")
  walletId     String?   @map("wallet_id")
  amount       Int       @default(0)
  bonus        Int       @default(0)
  turnover     Int       @default(0)
  withdrawable Int       @default(0)
  pending      Int       @default(0)
  wallet       Wallet?   @relation("WalletBalances", fields: [walletId], references: [id])
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @default(now()) @map("updated_at")

  @@map("balances")
}

enum BonusStatus {
  pending
  active
  completed
  expired
  cancelled
}

model PlayerBonus {
  id            String      @id @default(cuid())
  playerId      String      @map("player_id")
  bonusId       String      @map("bonus_id")
  amount        Int         @default(0)
  processAmount Int         @default(0) @map("process_amount")
  goalAmount    Int         @map("goal_amount")
  betsIds       String[]    @map("bets_ids")
  status        BonusStatus @default(pending)
  player        Player      @relation(fields: [playerId], references: [id], map: "player_bonuses_player_id_players_id_fk")
  bonus         Bonus       @relation(fields: [bonusId], references: [id], map: "player_bonuses_bonus_id_bonuses_id_fk")
  createdAt     DateTime   @default(now()) @map("created_at")
  updatedAt     DateTime   @default(now()) @map("updated_at")

  @@index([playerId, bonusId, status], name: "player_bonuses_search_idx")
  @@map("player_bonuses")
}

model Bonus {
  id             String        @id @default(cuid())
  name           String        @db.VarChar(255)
  description    String
  option         String        @db.VarChar(100)
  percent        Int
  multiply       Int
  bonusCap       Int           @map("bonus_cap")
  minBet         Int           @map("min_bet")
  maxBet         Int           @map("max_bet")
  slot           Boolean
  casino         Boolean
  status         Boolean
  autoCalc       Boolean       @map("auto_calc")
  expireDate     DateTime      @map("expire_date")
  isExpired      Boolean       @default(false) @map("is_expired")
  banner         String        @db.VarChar(500)
  particularData String?       @map("particular_data")
  playerBonuses  PlayerBonus[]
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @default(now()) @map("updated_at")

  @@index([name], name: "bonuses_name_idx")
  @@index([status], name: "bonuses_status_idx")
  @@index([status, expireDate, isExpired], name: "bonuses_search_idx")
  @@map("bonuses")
}

enum SystemEnum {
  player
  shop
  bank
  jpg
  refund
  happyhour
  pincode
  handpay
  interkassa
  coinbase
  btcpayserver
  invite
  progress
  tournament
  daily_entry
  welcome_bonus
  sms_bonus
  wheelfortune
}

enum TypeEnum {
  add
  out
}

enum ProgressTypeEnum {
  one_pay
  sum_pay
}

model Progress {
  id          String           @id @default(cuid())
  sum         Float            @default(0) @db.DoublePrecision
  type        ProgressTypeEnum
  spins       Int              @default(0)
  bet         Float            @db.DoublePrecision
  rating      Int
  bonus       Float            @default(0) @db.DoublePrecision
  day         String           @db.VarChar(55)
  min         Int
  max         Int
  percent     Float            @db.DoublePrecision
  minBalance  Float            @map("min_balance") @db.DoublePrecision
  wager       Int
  daysActive  Int              @default(5) @map("days_active")
  status      Int              @default(1)
  operatorId  String           @map("operator_id")
  createdAt   DateTime?        @default(now()) @map("created_at")
  updatedAt   DateTime?        @default(now()) @map("updated_at")

  @@map("progres")
}

enum LoyaltyFundTransactionType {
  CONTRIBUTION
  PAYOUT
}

enum GameProviderName {
  pragmaticplay
  evoplay
  netent
  playngo
  relaxgaming
  hacksaw
  bgaming
  spribe
  internal
  redtiger
  netgame
  bigfishgames
  cqnine
  nolimit
  kickass
}

enum PaymentMethod {
  INSTORE_CASH
  INSTORE_CARD
  CASH_APP
}

enum Permission {
  read
  write
  upload
  manage_players
  manage_settings
  launch_game
}

enum Status {
  ACTIVE
  INACTIVE
  BANNED
}


enum TournamentStatus {
  PENDING
  ACTIVE
  COMPLETED
  CANCELLED
}

enum TransactionStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
  REFUNDED
  EXPIRED
  REJECTED
  REQUIRES_ACTION
  ON_HOLD
}

enum TypeOfJackpot {
  MINOR
  MAJOR
  GRAND
}

enum TypeOfTransaction {
  DEPOSIT
  WITHDRAWAL
  BET
  WIN
  TRANSFER_SENT
  TRANSFER_RECEIVED
  SYSTEM_ADJUSTMENT_CREDIT
  SYSTEM_ADJUSTMENT_DEBIT
  TOURNAMENT_BUYIN
  TOURNAMENT_PRIZE
  AFFILIATE_COMMISSION
  REFUND
  FEE
  BONUS_AWARD
  BET_PLACE
  BET_WIN
  BET_LOSE
  BET_REFUND
  BONUS_WAGER
  BONUS_CONVERT
  BONUS_EXPIRED
  XP_AWARD
  ADJUSTMENT_ADD
  ADJUSTMENT_SUB
  INTERNAL_TRANSFER
  PRODUCT_PURCHASE
  REBATE_PAYOUT
  JACKPOT_WIN
  JACKPOT_CONTRIBUTION
  LOYALTY_CASHBACK
  LEVEL_UP_BONUS
}

enum PlayerRole {
  PLAYER
  ADMIN
  MODERATOR
  SUPPORT
  BOT
  SYSTEM
}

enum GameCategories {
  slots
  fish
  table
  live
  poker
  lottery
  virtual
  other

  @@map("game_categories")
}

enum MessageType {
  update_wallet      @map("update:wallet")
  update_vip         @map("update:vip")
  update_balance     @map("update:balance")
  update_gameSession @map("update:gameSession")

  @@map("message_type")
}

enum SessionStatus {
  ACTIVE
  COMPLETED
  EXPIRED
  ABANDONED
  TIMEOUT
  OTP_PENDING

  @@map("session_status")
}

enum UpdateType {
  BINARY
  OTA

  @@map("update_type")
}