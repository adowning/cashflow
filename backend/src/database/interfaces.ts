// This file was auto-generated by prisma-generator-typescript-interfaces

export type Role = "USER" | "PLAYER" | "ADMIN" | "VIP" | "MODERATOR" | "SYSTEM" | "OWNER" | "MEMBER" | "OPERATOR" | "SUPPORT_AGENT";

export type BonusStatus = "pending" | "active" | "completed" | "expired" | "cancelled";

export type SystemEnum = "player" | "shop" | "bank" | "jpg" | "refund" | "happyhour" | "pincode" | "handpay" | "interkassa" | "coinbase" | "btcpayserver" | "invite" | "progress" | "tournament" | "daily_entry" | "welcome_bonus" | "sms_bonus" | "wheelfortune";

export type TypeEnum = "add" | "out";

export type ProgressTypeEnum = "one_pay" | "sum_pay";

export type LoyaltyFundTransactionType = "CONTRIBUTION" | "PAYOUT";

export type GameProviderName = "pragmaticplay" | "evoplay" | "netent" | "playngo" | "relaxgaming" | "hacksaw" | "bgaming" | "spribe" | "internal" | "redtiger" | "netgame" | "bigfishgames" | "cqnine" | "nolimit" | "kickass";

export type PaymentMethod = "INSTORE_CASH" | "INSTORE_CARD" | "CASH_APP";

export type Permission = "read" | "write" | "upload" | "manage_players" | "manage_settings" | "launch_game";

export type Status = "ACTIVE" | "INACTIVE" | "BANNED";

export type TournamentStatus = "PENDING" | "ACTIVE" | "COMPLETED" | "CANCELLED";

export type TransactionStatus = "PENDING" | "PROCESSING" | "COMPLETED" | "FAILED" | "CANCELLED" | "REFUNDED" | "EXPIRED" | "REJECTED" | "REQUIRES_ACTION" | "ON_HOLD";

export type TypeOfJackpot = "MINOR" | "MAJOR" | "GRAND";

export type TypeOfTransaction = "DEPOSIT" | "WITHDRAWAL" | "BET" | "WIN" | "TRANSFER_SENT" | "TRANSFER_RECEIVED" | "SYSTEM_ADJUSTMENT_CREDIT" | "SYSTEM_ADJUSTMENT_DEBIT" | "TOURNAMENT_BUYIN" | "TOURNAMENT_PRIZE" | "AFFILIATE_COMMISSION" | "REFUND" | "FEE" | "BONUS_AWARD" | "BET_PLACE" | "BET_WIN" | "BET_LOSE" | "BET_REFUND" | "BONUS_WAGER" | "BONUS_CONVERT" | "BONUS_EXPIRED" | "XP_AWARD" | "ADJUSTMENT_ADD" | "ADJUSTMENT_SUB" | "INTERNAL_TRANSFER" | "PRODUCT_PURCHASE" | "REBATE_PAYOUT" | "JACKPOT_WIN" | "JACKPOT_CONTRIBUTION" | "LOYALTY_CASHBACK" | "LEVEL_UP_BONUS";

export type PlayerRole = "PLAYER" | "ADMIN" | "MODERATOR" | "SUPPORT" | "BOT" | "SYSTEM";

export type GameCategories = "slots" | "fish" | "table" | "live" | "poker" | "lottery" | "virtual" | "other";

export type MessageType = "update_wallet" | "update_vip" | "update_balance" | "update_gameSession";

export type SessionStatus = "ACTIVE" | "COMPLETED" | "EXPIRED" | "ABANDONED" | "TIMEOUT" | "OTP_PENDING";

export type UpdateType = "BINARY" | "OTA";

export type User = {
  id: string;
  name: string;
  username: string | null;
  role: string;
  banned: boolean;
  displayUsername: string | null;
  two_factor_enabled: boolean;
  playerId: string | null;
  email: string;
  emailVerified: boolean;
  passwordHash: string;
  image: string | null;
  createdAt: Date;
  updatedAt: Date;
  sessions?: Session[];
  accounts?: Account[];
  wallets?: Wallet[];
};

export type Session = {
  id: string;
  expiresAt: Date;
  token: string;
  ipAddress: string | null;
  userAgent: string | null;
  userId: string;
  playerId: string;
  user?: User;
  createdAt: Date;
  updatedAt: Date;
};

export type Account = {
  id: string;
  accountId: string;
  providerId: string;
  userId: string;
  user?: User;
  accessToken: string | null;
  refreshToken: string | null;
  idToken: string | null;
  accessTokenExpiresAt: Date | null;
  refreshTokenExpiresAt: Date | null;
  scope: string | null;
  password: string | null;
  createdAt: Date;
  updatedAt: Date;
};

export type Verification = {
  id: string;
  identifier: string;
  value: string;
  expiresAt: Date;
  createdAt: Date;
  updatedAt: Date;
};

export type jwks = {
  id: string;
  privateKey: string;
  passpublicKey: string;
  createdAt: Date;
};

export type Player = {
  id: string;
  playername: string;
  email: string | null;
  passwordHash: string | null;
  accessToken: string | null;
  refreshToken: string | null;
  accessTokenExpiresAt: Date | null;
  refreshTokenExpiresAt: Date | null;
  currentGameSessionDataId: string | null;
  currentAuthSessionDataId: string | null;
  avatarUrl: string | null;
  role: string;
  phpId: number;
  isActive: boolean;
  lastLoginAt: Date | null;
  totalXpGained: number;
  vipInfoId: string | null;
  deletedAt: Date | null;
  lastSeen: Date | null;
  rtgBlockTime: number;
  phone: string | null;
  path: string[];
  invitorId: string | null;
  avatar: string;
  status: Status;
  count_balance: number;
  count_tournaments: number;
  count_happyhours: number;
  count_refunds: number;
  count_progress: number;
  count_daily_entries: number;
  count_invite: number;
  count_welcomebonus: number;
  count_smsbonus: number;
  count_wheelfortune: number;
  address: number;
  deposits?: Deposit[];
  gameSessions?: GameSessions[];
  jackpotWins?: JackpotWins[];
  Jackpots?: Jackpots[];
  activeWalletId: string | null;
  loyaltyFundTransactions?: LoyaltyFundTransaction[];
  vipInfo?: VipInfo | null;
  withdrawals?: Withdrawal[];
  activeOperatorId: string | null;
  ops?: Operators | null;
  inviteCode: string | null;
  operatorSwitchHistory?: OperatorSwitchHistory[];
  vipCashbacks?: VipCashback[];
  vipLevelUpBonuses?: VipLevelUpBonus[];
  vipSpinRewards?: VipSpinReward[];
  affiliateLogsInvited?: AffiliateLog[];
  affiliateLogsReferred?: AffiliateLog[];
  referralCodes?: ReferralCode[];
  PlayerBonus?: PlayerBonus[];
  createdAt: Date;
  updatedAt: Date;
};

export type Deposit = {
  id: string;
  playerId: string | null;
  amount: number | null;
  status: string | null;
  idNumber: string | null;
  firstName: string | null;
  lastName: string | null;
  channelsId: string | null;
  note: string | null;
  currency: string | null;
  players?: Player | null;
  createdAt: Date;
  updatedAt: Date;
};

export type GameSessions = {
  id: string;
  authSessionId: string;
  playerId: string;
  gameId: string | null;
  gameName: string | null;
  status: SessionStatus;
  totalWagered: number;
  totalWon: number;
  totalXpGained: number;
  rtp: number | null;
  duration: number;
  endAt: Date | null;
  startingBalance: number;
  players?: Player;
  game?: Games | null;
  expiredTime: Date | null;
  createdAt: Date;
  updatedAt: Date;
};

export type JackpotContributions = {
  id: string;
  jackpotId: string;
  playerId: string | null;
  gameSpinId: string;
  contributionAmountCoins: number;
  jackpots?: Jackpots;
  createdAt: Date;
  updatedAt: Date;
};

export type JackpotWins = {
  id: string;
  jackpotId: string;
  winnerId: string;
  winAmountCoins: number;
  gameSpinId: string;
  transactionId: string | null;
  sessionDataId: string | null;
  jackpots?: Jackpots;
  player?: Player;
  createdAt: Date;
  updatedAt: Date;
};

export type Jackpots = {
  id: string;
  type: string;
  currentAmountCoins: number;
  percent: number;
  paySum: number;
  startBalance: number;
  playerId: string | null;
  seedAmountCoins: number;
  minimumBetCoins: number;
  contributionRateBasisPoints: number;
  probabilityPerMillion: number;
  minimumTimeBetweenWinsMinutes: number;
  lastWonAt: Date | null;
  lastWonBy: string | null;
  isActive: boolean;
  jackpotContributions?: JackpotContributions[];
  jackpotWins?: JackpotWins[];
  lastContribution: number | null;
  players?: Player | null;
  createdAt: Date;
  updatedAt: Date;
};

export type Operators = {
  id: string;
  name: string;
  operatorSecret: string;
  operatorAccess: string;
  callbackUrl: string;
  isActive: boolean;
  allowedIps: string;
  description: string | null;
  productIds: string | null;
  balance: number;
  netRevenue: number;
  acceptedPayments: string[];
  ownerId: string | null;
  lastUsedAt: Date | null;
  games?: Games[];
  products?: Products[];
  players?: Player[];
  upfrontBankCredits: number;
  platformFeeRate: string;
  loyaltyContributionRate: string;
  settlements?: OperatorSettlement[];
  loyaltyFundContributions?: LoyaltyFundTransaction[];
  switchedFromHistory?: OperatorSwitchHistory[];
  switchedToHistory?: OperatorSwitchHistory[];
  wallets?: Wallet[];
  createdAt: Date;
  updatedAt: Date;
};

export type OperatorSwitchHistory = {
  id: string;
  playerId: string;
  fromOperatorId: string | null;
  toOperatorId: string;
  switchedAt: Date;
  player?: Player;
  fromOperator?: Operators | null;
  toOperator?: Operators;
  createdAt: Date | null;
  updatedAt: Date | null;
};

export type Products = {
  id: string;
  title: string;
  productType: string;
  bonusTotalInCredits: number;
  isActive: boolean | null;
  priceInCents: number;
  amountToReceiveInCredits: number;
  bestValue: number;
  discountInCents: number;
  bonusSpins: number;
  isPromo: boolean | null;
  totalDiscountInCents: number;
  operatorId: string | null;
  operators?: Operators | null;
  transactions?: Transaction[];
  createdAt: Date;
  updatedAt: Date;
};

export type Transaction = {
  id: string;
  processedAt: Date | null;
  walletId: string | null;
  type: string;
  status: string;
  amount: number;
  netAmount: number | null;
  currencyName: string | null;
  feeAmount: number | null;
  productId: string | null;
  paymentMethod: string | null;
  balanceBefore: number | null;
  balanceAfter: number | null;
  bonusBalanceBefore: number | null;
  bonusBalanceAfter: number | null;
  bonusAmount: number | null;
  wageringRequirement: number | null;
  wageringProgress: number | null;
  description: string | null;
  provider: string | null;
  providerTxId: string | null;
  relatedGameId: string | null;
  gameName: string | null;
  relatedRoundId: string | null;
  operatorId: string | null;
  playerId: string;
  products?: Products | null;
  wallets?: Wallet | null;
  createdAt: Date;
  updatedAt: Date;
};

export type ReferralCode = {
  id: string;
  code: string;
  name: string | null;
  commissionRate: number;
  playerId: string;
  player?: Player;
  createdAt: Date;
  updatedAt: Date;
};

export type Wallet = {
  id: string;
  balance: number;
  paymentMethod: string;
  currency: string;
  address: string | null;
  cashtag: string | null;
  operatorId: string;
  operator?: Operators;
  lastUsedAt: Date | null;
  transactions?: Transaction[];
  balances?: Balance[];
  userId: string;
  isActive: boolean;
  activeForUser?: User;
  createdAt: Date;
  updatedAt: Date;
};

export type Withdrawal = {
  id: string;
  playerId: string | null;
  amount: number | null;
  status: string | null;
  idNumber: string | null;
  firstName: string | null;
  lastName: string | null;
  channelsId: string | null;
  note: string | null;
  currencyType: string | null;
  currency: string | null;
  players?: Player | null;
  createdAt: Date;
  updatedAt: Date;
};

export type VipRank = {
  id: string;
  name: string;
  minXp: number;
  icon: string;
  dailyCashbackMax: number;
  monthlyCashbackMax: number;
  wagerBonusCoinPct: number;
  purchaseBonusCoinPct: number;
  levelUpBonusCoinPct: number;
  vipSpinMaxAmount: number;
  hasConcierge: boolean;
  hasVipLoungeAccess: boolean;
  isInvitationOnly: boolean;
  vipInfo?: VipInfo[];
  levels?: VipLevel[];
  createdAt: Date;
  updatedAt: Date;
};

export type VipInfo = {
  id: string;
  level: number;
  xp: number;
  totalXp: number;
  playerId: string;
  currentRankid: string | null;
  vipRank?: VipRank | null;
  players?: Player;
  createdAt: Date;
  updatedAt: Date;
};

export type VipLevel = {
  id: string;
  parentId: string;
  minXpNeeded: number | null;
  levelNumber: number | null;
  levelName: string;
  parent?: VipRank;
  spinBonusMultiplier: number | null;
  setting?: Setting | null;
  settingId: string | null;
  levelUpBonusAmount: number | null;
  createdAt: Date;
  updatedAt: Date;
};

export type VipCashback = {
  id: string;
  playerId: string | null;
  amount: number;
  currency: string;
  tiersName: string;
  type: string;
  player?: Player | null;
  createdAt: Date;
  updatedAt: Date;
};

export type VipLevelUpBonus = {
  id: string;
  playerId: string;
  amount: number;
  levelName: string;
  levelXp: number;
  player?: Player;
  createdAt: Date;
  updatedAt: Date;
};

export type VipSpinReward = {
  id: string;
  playerId: string;
  amount: number;
  currency: string;
  player?: Player;
  createdAt: Date;
  updatedAt: Date;
};

export type Affiliate = {
  id: string;
  playername: string;
  firstName: string;
  lastName: string;
  status: string;
  email: string;
  role: string;
  referralCode: string;
  parentId: string | null;
  path: string[];
  password: string;
  parent?: Affiliate | null;
  children?: Affiliate[];
  createdAt: Date;
  updatedAt: Date;
};

export type AffiliateLog = {
  id: string;
  invitorId: string;
  childId: string;
  currency: string;
  referralCode: string;
  betAmount: number;
  commissionAmount: number;
  commissionWager: number;
  totalReferralAmount: number;
  referralAmount: number;
  referralWager: number;
  lastVipLevelAmount: number;
  invitor?: Player;
  child?: Player;
  createdAt: Date;
  updatedAt: Date;
};

export type Setting = {
  id: string;
  name: string;
  referralCodeCount: number;
  referralCommissionRate: number;
  rates: string;
  commission?: Commission | null;
  jackpotConfig: Record<string, unknown> | null;
  gameGroups: Record<string, unknown> | null;
  vipConfig: Record<string, unknown> | null;
  wageringConfig: Record<string, unknown> | null;
  systemLimits: Record<string, unknown> | null;
  vipLevels?: VipLevel[];
  createdAt: Date;
  updatedAt: Date;
};

export type Games = {
  id: string;
  name: string;
  title: string | null;
  description: string | null;
  category: string | null;
  tags: string | null;
  thumbnailUrl: string | null;
  bannerUrl: string | null;
  developer: string;
  providerId: string | null;
  totalWagered: number | null;
  totalWon: number | null;
  targetRtp: number;
  isFeatured: boolean | null;
  statIn: number | null;
  statOut: number | null;
  isActive: boolean | null;
  operatorId: string | null;
  version: string | null;
  jpgIds: string[];
  isHorizontal: boolean | null;
  jpgId: string | null;
  label: string | null;
  device: number | null;
  gamebank: string | null;
  linesPercentConfigSpin: string | null;
  linesPercentConfigSpinBonus: string | null;
  linesPercentConfigBonus: string | null;
  linesPercentConfigBonusBonus: string | null;
  rezerv: string | null;
  cask: string | null;
  advanced: string | null;
  bet: string | null;
  scaleMode: string | null;
  slotViewState: string | null;
  view: string | null;
  denomination: string | null;
  categoryTemp: string | null;
  originalId: string | null;
  bids: string[];
  rtpStatIn: number | null;
  rtpStatOut: number | null;
  currentRtp: string | null;
  status: number | null;
  state: boolean | null;
  operators?: Operators | null;
  gameSessions?: GameSessions[];
  createdAt: Date;
  updatedAt: Date;
};

export type Commission = {
  id: string;
  master: number;
  affiliate: number;
  subAffiliate: number;
  settingId: string;
  setting?: Setting;
  createdAt: Date;
  updatedAt: Date;
};

export type OperatorSettlement = {
  id: string;
  operatorId: string;
  weekStartDate: Date;
  weekEndDate: Date;
  totalTurnover: number;
  totalPayouts: number;
  grossGamingRevenue: number;
  platformFee: number;
  loyaltyFundContribution: number;
  netToOperator: number;
  operator?: Operators;
  createdAt: Date;
  updatedAt: Date;
};

export type LoyaltyFundTransaction = {
  id: string;
  type: LoyaltyFundTransactionType;
  amount: number;
  description: string | null;
  operatorId: string | null;
  playerId: string | null;
  relatedTransactionId: string | null;
  operator?: Operators | null;
  player?: Player | null;
  createdAt: Date;
  updatedAt: Date;
};

export type Balance = {
  id: string;
  playerId: string;
  currencyId: string;
  walletId: string | null;
  amount: number;
  bonus: number;
  turnover: number;
  withdrawable: number;
  pending: number;
  wallet?: Wallet | null;
  createdAt: Date;
  updatedAt: Date;
};

export type PlayerBonus = {
  id: string;
  playerId: string;
  bonusId: string;
  amount: number;
  processAmount: number;
  goalAmount: number;
  betsIds: string[];
  status: BonusStatus;
  player?: Player;
  bonus?: Bonus;
  createdAt: Date;
  updatedAt: Date;
};

export type Bonus = {
  id: string;
  name: string;
  description: string;
  option: string;
  percent: number;
  multiply: number;
  bonusCap: number;
  minBet: number;
  maxBet: number;
  slot: boolean;
  casino: boolean;
  status: boolean;
  autoCalc: boolean;
  expireDate: Date;
  isExpired: boolean;
  banner: string;
  particularData: string | null;
  playerBonuses?: PlayerBonus[];
  createdAt: Date;
  updatedAt: Date;
};

export type Progress = {
  id: string;
  sum: number;
  type: ProgressTypeEnum;
  spins: number;
  bet: number;
  rating: number;
  bonus: number;
  day: string;
  min: number;
  max: number;
  percent: number;
  minBalance: number;
  wager: number;
  daysActive: number;
  status: number;
  operatorId: string;
  createdAt: Date | null;
  updatedAt: Date | null;
};
