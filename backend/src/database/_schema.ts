import { customType, pgEnum, pgTable, text, boolean, timestamp, integer, doublePrecision, jsonb } from 'drizzle-orm/pg-core';
import { relations } from 'drizzle-orm';

export const customBytes = customType<{ data: Buffer }>({
	dataType() {
		return 'bytea';
	},
	fromDriver(value: unknown) {
		if (Buffer.isBuffer(value)) return value
		throw new Error('Expected Buffer')
	},
	toDriver(value: Buffer) {
		return value
	}
});

export const roleEnum = pgEnum('Role', ['USER', 'PLAYER', 'ADMIN', 'VIP', 'MODERATOR', 'SYSTEM', 'OWNER', 'MEMBER', 'OPERATOR', 'SUPPORT_AGENT']);

export const bonusStatusEnum = pgEnum('BonusStatus', ['pending', 'active', 'completed', 'expired', 'cancelled']);

export const systemEnumEnum = pgEnum('SystemEnum', ['player', 'shop', 'bank', 'jpg', 'refund', 'happyhour', 'pincode', 'handpay', 'interkassa', 'coinbase', 'btcpayserver', 'invite', 'progress', 'tournament', 'daily_entry', 'welcome_bonus', 'sms_bonus', 'wheelfortune']);

export const typeEnumEnum = pgEnum('TypeEnum', ['add', 'out']);

export const progressTypeEnumEnum = pgEnum('ProgressTypeEnum', ['one_pay', 'sum_pay']);

export const loyaltyFundTransactionTypeEnum = pgEnum('LoyaltyFundTransactionType', ['CONTRIBUTION', 'PAYOUT']);

export const gameProviderNameEnum = pgEnum('GameProviderName', ['pragmaticplay', 'evoplay', 'netent', 'playngo', 'relaxgaming', 'hacksaw', 'bgaming', 'spribe', 'internal', 'redtiger', 'netgame', 'bigfishgames', 'cqnine', 'nolimit', 'kickass']);

export const paymentMethodEnum = pgEnum('PaymentMethod', ['INSTORE_CASH', 'INSTORE_CARD', 'CASH_APP']);

export const permissionEnum = pgEnum('Permission', ['read', 'write', 'upload', 'manage_players', 'manage_settings', 'launch_game']);

export const statusEnum = pgEnum('Status', ['ACTIVE', 'INACTIVE', 'BANNED']);

export const tournamentStatusEnum = pgEnum('TournamentStatus', ['PENDING', 'ACTIVE', 'COMPLETED', 'CANCELLED']);

export const transactionStatusEnum = pgEnum('TransactionStatus', ['PENDING', 'PROCESSING', 'COMPLETED', 'FAILED', 'CANCELLED', 'REFUNDED', 'EXPIRED', 'REJECTED', 'REQUIRES_ACTION', 'ON_HOLD']);

export const typeOfJackpotEnum = pgEnum('TypeOfJackpot', ['MINOR', 'MAJOR', 'GRAND']);

export const typeOfTransactionEnum = pgEnum('TypeOfTransaction', ['DEPOSIT', 'WITHDRAWAL', 'BET', 'WIN', 'TRANSFER_SENT', 'TRANSFER_RECEIVED', 'SYSTEM_ADJUSTMENT_CREDIT', 'SYSTEM_ADJUSTMENT_DEBIT', 'TOURNAMENT_BUYIN', 'TOURNAMENT_PRIZE', 'AFFILIATE_COMMISSION', 'REFUND', 'FEE', 'BONUS_AWARD', 'BET_PLACE', 'BET_WIN', 'BET_LOSE', 'BET_REFUND', 'BONUS_WAGER', 'BONUS_CONVERT', 'BONUS_EXPIRED', 'XP_AWARD', 'ADJUSTMENT_ADD', 'ADJUSTMENT_SUB', 'INTERNAL_TRANSFER', 'PRODUCT_PURCHASE', 'REBATE_PAYOUT', 'JACKPOT_WIN', 'JACKPOT_CONTRIBUTION', 'LOYALTY_CASHBACK', 'LEVEL_UP_BONUS']);

export const playerRoleEnum = pgEnum('PlayerRole', ['PLAYER', 'ADMIN', 'MODERATOR', 'SUPPORT', 'BOT', 'SYSTEM']);

export const gameCategoriesEnum = pgEnum('game_categories', ['slots', 'fish', 'table', 'live', 'poker', 'lottery', 'virtual', 'other']);

export const messageTypeEnum = pgEnum('message_type', ['update:wallet', 'update:vip', 'update:balance', 'update:gameSession']);

export const sessionStatusEnum = pgEnum('session_status', ['ACTIVE', 'COMPLETED', 'EXPIRED', 'ABANDONED', 'TIMEOUT', 'OTP_PENDING']);

export const updateTypeEnum = pgEnum('update_type', ['BINARY', 'OTA']);

export const users = pgTable('user', { id: text('id').primaryKey(), name: text('name').notNull(), username: text('username'), role: text('role').default('USER').notNull(), banned: boolean('banned').default(false).notNull(), displayUsername: text('displayUsername'), two_factor_enabled: boolean('two_factor_enabled').default(false).notNull(), playerId: text('player_id'), email: text('email').notNull(), emailVerified: boolean('emailVerified').notNull(), passwordHash: text('password_hash').notNull(), image: text('image'), createdAt: timestamp('created_at', { mode: 'date', precision: 3 }).defaultNow().notNull(), updatedAt: timestamp('updated_at', { mode: 'date', precision: 3 }).defaultNow().notNull() });

export const sessions = pgTable('session', { id: text('id').primaryKey(), expiresAt: timestamp('expiresAt', { mode: 'date', precision: 3 }).notNull(), token: text('token').notNull(), ipAddress: text('ipAddress'), userAgent: text('userAgent'), userId: text('userId').notNull(), playerId: text('playerId').notNull(), createdAt: timestamp('created_at', { mode: 'date', precision: 3 }).defaultNow().notNull(), updatedAt: timestamp('updated_at', { mode: 'date', precision: 3 }).defaultNow().notNull() });

export const accounts = pgTable('account', { id: text('id').primaryKey(), accountId: text('accountId').notNull(), providerId: text('providerId').notNull(), userId: text('userId').notNull(), accessToken: text('accessToken'), refreshToken: text('refreshToken'), idToken: text('idToken'), accessTokenExpiresAt: timestamp('accessTokenExpiresAt', { mode: 'date', precision: 3 }), refreshTokenExpiresAt: timestamp('refreshTokenExpiresAt', { mode: 'date', precision: 3 }), scope: text('scope'), password: text('password'), createdAt: timestamp('created_at', { mode: 'date', precision: 3 }).defaultNow().notNull(), updatedAt: timestamp('updated_at', { mode: 'date', precision: 3 }).defaultNow().notNull() });

export const verifications = pgTable('verification', { id: text('id').primaryKey(), identifier: text('identifier').notNull(), value: text('value').notNull(), expiresAt: timestamp('expiresAt', { mode: 'date', precision: 3 }).notNull(), createdAt: timestamp('created_at', { mode: 'date', precision: 3 }).defaultNow().notNull(), updatedAt: timestamp('updated_at', { mode: 'date', precision: 3 }).defaultNow().notNull() });

export const jwks = pgTable('jwks', { id: text('id').primaryKey(), privateKey: text('privateKey').notNull(), passpublicKey: text('passpublicKey').notNull(), createdAt: timestamp('created_at', { mode: 'date', precision: 3 }).defaultNow().notNull() });

export const players = pgTable('players', { id: text('id').primaryKey(), playername: text('playername').notNull(), email: text('email'), passwordHash: text('password_hash'), accessToken: text('access_token'), refreshToken: text('refresh_token'), accessTokenExpiresAt: timestamp('access_token_expires_at', { mode: 'date', precision: 3 }), refreshTokenExpiresAt: timestamp('refresh_token_expires_at', { mode: 'date', precision: 3 }), currentGameSessionDataId: text('current_game_session_data_id'), currentAuthSessionDataId: text('current_auth_session_data_id'), avatarUrl: text('avatar_url').default('avatar-01').notNull(), role: text('role').default('PLAYER').notNull(), phpId: integer('phpId').default(0).notNull(), isActive: boolean('is_active').default(true).notNull(), lastLoginAt: timestamp('last_login_at', { mode: 'date', precision: 3 }), totalXpGained: integer('total_xp_gained').notNull(), vipInfoId: text('vip_info_id'), deletedAt: timestamp('deleted_at', { mode: 'date', precision: 3 }), lastSeen: timestamp('last_seen', { mode: 'date', precision: 3 }), rtgBlockTime: integer('rtg_block_time').default(0).notNull(), phone: text('phone'), path: text('path').array().default([]).notNull(), invitorId: text('invitor_id'), avatar: text('avatar').default('avatar-01.webp').notNull(), status: statusEnum('status').default('ACTIVE').notNull(), count_balance: integer('count_balance').default(0).notNull(), count_tournaments: integer('count_tournaments').default(0).notNull(), count_happyhours: integer('count_happyhours').default(0).notNull(), count_refunds: integer('count_refunds').default(0).notNull(), count_progress: integer('count_progress').default(0).notNull(), count_daily_entries: integer('count_daily_entries').default(0).notNull(), count_invite: integer('count_invite').default(0).notNull(), count_welcomebonus: integer('count_welcomebonus').default(0).notNull(), count_smsbonus: integer('count_smsbonus').default(0).notNull(), count_wheelfortune: integer('count_wheelfortune').default(0).notNull(), address: integer('address').default(0).notNull(), activeWalletId: text('active_wallet_id'), activeOperatorId: text('active_operator_id'), inviteCode: text('inviteCode'), createdAt: timestamp('created_at', { mode: 'date', precision: 3 }).defaultNow().notNull(), updatedAt: timestamp('updated_at', { mode: 'date', precision: 3 }).defaultNow().notNull() });

export const deposits = pgTable('deposit', { id: text('id').primaryKey(), playerId: text('player_id'), amount: integer('amount'), status: text('status'), idNumber: text('id_number'), firstName: text('first_name'), lastName: text('last_name'), channelsId: text('channels_id'), note: text('note'), currency: text('currency'), createdAt: timestamp('created_at', { mode: 'date', precision: 3 }).defaultNow().notNull(), updatedAt: timestamp('updated_at', { mode: 'date', precision: 3 }).defaultNow().notNull() });

export const gameSessions = pgTable('game_sessions', { id: text('id').primaryKey(), authSessionId: text('auth_session_id').notNull(), playerId: text('player_id').notNull(), gameId: text('game_id'), gameName: text('game_name'), status: sessionStatusEnum('status').default('ACTIVE').notNull(), totalWagered: integer('total_wagered').default(0).notNull(), totalWon: integer('total_won').default(0).notNull(), totalXpGained: integer('total_xp_gained').default(0).notNull(), rtp: integer('rtp').default(0).notNull(), duration: integer('duration').default(0).notNull(), endAt: timestamp('end_at', { mode: 'date', precision: 3 }), startingBalance: integer('starting_balance').default(0).notNull(), expiredTime: timestamp('expired_time', { mode: 'date', precision: 3 }), createdAt: timestamp('created_at', { mode: 'date', precision: 3 }).defaultNow().notNull(), updatedAt: timestamp('updated_at', { mode: 'date', precision: 3 }).defaultNow().notNull() });

export const jackpotContributions = pgTable('jackpot_contributions', { id: text('id').primaryKey(), jackpotId: text('jackpot_id').notNull(), playerId: text('player_id'), gameSpinId: text('game_spin_id').notNull(), contributionAmountCoins: integer('contribution_amount_coins').notNull(), createdAt: timestamp('created_at', { mode: 'date', precision: 3 }).defaultNow().notNull(), updatedAt: timestamp('updated_at', { mode: 'date', precision: 3 }).defaultNow().notNull() });

export const jackpotWins = pgTable('jackpot_wins', { id: text('id').primaryKey(), jackpotId: text('jackpot_id').notNull(), winnerId: text('winner_id').notNull(), winAmountCoins: integer('win_amount_coins').notNull(), gameSpinId: text('game_spin_id').notNull(), transactionId: text('transaction_id'), sessionDataId: text('session_data_id'), createdAt: timestamp('created_at', { mode: 'date', precision: 3 }).defaultNow().notNull(), updatedAt: timestamp('updated_at', { mode: 'date', precision: 3 }).defaultNow().notNull() });

export const jackpots = pgTable('jackpots', { id: text('id').primaryKey(), type: text('type').notNull(), currentAmountCoins: integer('current_amount_coins').notNull(), percent: integer('percent').default(1).notNull(), paySum: integer('paySum').default(5).notNull(), startBalance: integer('startBalance').default(0).notNull(), playerId: text('playerId'), seedAmountCoins: integer('seed_amount_coins').notNull(), minimumBetCoins: integer('minimum_bet_coins').default(1).notNull(), contributionRateBasisPoints: integer('contribution_rate_basis_points').notNull(), probabilityPerMillion: integer('probability_per_million').notNull(), minimumTimeBetweenWinsMinutes: integer('minimum_time_between_wins_minutes').notNull(), lastWonAt: timestamp('last_won_at', { mode: 'date', precision: 3 }), lastWonBy: text('last_won_by'), isActive: boolean('is_active').default(true).notNull(), lastContribution: integer('lastContribution'), createdAt: timestamp('created_at', { mode: 'date', precision: 3 }).defaultNow().notNull(), updatedAt: timestamp('updated_at', { mode: 'date', precision: 3 }).defaultNow().notNull() });

export const operators = pgTable('operators', { id: text('id').primaryKey(), name: text('name').notNull(), operatorSecret: text('operator_secret').notNull(), operatorAccess: text('operator_access').notNull(), callbackUrl: text('callback_url').notNull(), isActive: boolean('is_active').default(true).notNull(), allowedIps: text('allowed_ips').notNull(), description: text('description'), productIds: text('product_ids'), balance: integer('balance').notNull(), netRevenue: integer('net_revenue').default(0).notNull(), acceptedPayments: text('accepted_payments').array().notNull(), ownerId: text('owner_id'), lastUsedAt: timestamp('last_used_at', { mode: 'date', precision: 3 }), upfrontBankCredits: integer('upfront_bank_credits').default(10000).notNull(), platformFeeRate: text('platform_fee_rate').default('0.1500').notNull(), loyaltyContributionRate: text('loyalty_contribution_rate').default('0.0500').notNull(), createdAt: timestamp('created_at', { mode: 'date', precision: 3 }).defaultNow().notNull(), updatedAt: timestamp('updated_at', { mode: 'date', precision: 3 }).defaultNow().notNull() });

export const operatorSwitchHistories = pgTable('operator_switch_history', { id: text('id').primaryKey(), playerId: text('player_id').notNull(), fromOperatorId: text('from_operator_id'), toOperatorId: text('to_operator_id').notNull(), switchedAt: timestamp('switched_at', { mode: 'date', precision: 3 }).defaultNow().notNull(), createdAt: timestamp('created_at', { mode: 'date', precision: 3 }).defaultNow().notNull(), updatedAt: timestamp('updated_at', { mode: 'date', precision: 3 }).defaultNow().notNull() });

export const products = pgTable('products', { id: text('id').primaryKey(), title: text('title').default('default').notNull(), productType: text('product_type').default('bundle').notNull(), bonusTotalInCredits: integer('bonus_total_in_credits').notNull(), isActive: boolean('is_active'), priceInCents: integer('price_in_cents').notNull(), amountToReceiveInCredits: integer('amount_to_receive_in_credits').notNull(), bestValue: integer('best_value').notNull(), discountInCents: integer('discount_in_cents').notNull(), bonusSpins: integer('bonus_spins').notNull(), isPromo: boolean('is_promo'), totalDiscountInCents: integer('total_discount_in_cents').notNull(), operatorId: text('operator_id'), createdAt: timestamp('created_at', { mode: 'date', precision: 3 }).defaultNow().notNull(), updatedAt: timestamp('updated_at', { mode: 'date', precision: 3 }).defaultNow().notNull() });

export const transactions = pgTable('transactions', { id: text('id').primaryKey(), processedAt: timestamp('processed_at', { mode: 'date', precision: 3 }), walletId: text('wallet_id'), type: text('type').notNull(), status: text('status').default('PENDING').notNull(), amount: integer('amount').notNull(), netAmount: integer('net_amount'), currencyName: text('currency_name'), feeAmount: integer('fee_amount'), productId: text('product_id'), paymentMethod: text('payment_method'), balanceBefore: integer('balance_before'), balanceAfter: integer('balance_after'), bonusBalanceBefore: integer('bonus_balance_before'), bonusBalanceAfter: integer('bonus_balance_after'), bonusAmount: integer('bonus_amount'), wageringRequirement: integer('wagering_requirement'), wageringProgress: integer('wagering_progress'), description: text('description'), provider: text('provider'), providerTxId: text('provider_tx_id'), relatedGameId: text('related_game_id'), gameName: text('game_name'), relatedRoundId: text('related_round_id'), operatorId: text('operator_id'), playerId: text('player_id').notNull(), createdAt: timestamp('created_at', { mode: 'date', precision: 3 }).defaultNow().notNull(), updatedAt: timestamp('updated_at', { mode: 'date', precision: 3 }).defaultNow().notNull() });

export const referralCodes = pgTable('referral_codes', { id: text('id').primaryKey(), code: text('code').notNull(), name: text('name').default('').notNull(), commissionRate: doublePrecision('commission_rate').notNull(), playerId: text('player_id').notNull(), createdAt: timestamp('created_at', { mode: 'date', precision: 3 }).defaultNow().notNull(), updatedAt: timestamp('updated_at', { mode: 'date', precision: 3 }).defaultNow().notNull() });

export const wallets = pgTable('wallets', { id: text('id').primaryKey(), balance: integer('balance').default(0).notNull(), paymentMethod: text('payment_method').default('INSTORE_CASH').notNull(), currency: text('currency').default('USD').notNull(), address: text('address'), cashtag: text('cashtag'), operatorId: text('operator_id').notNull(), lastUsedAt: timestamp('last_used_at', { mode: 'date', precision: 3 }), userId: text('user_id').notNull(), isActive: boolean('isActive').default(false).notNull(), createdAt: timestamp('created_at', { mode: 'date', precision: 3 }).defaultNow().notNull(), updatedAt: timestamp('updated_at', { mode: 'date', precision: 3 }).defaultNow().notNull() });

export const withdrawals = pgTable('withdrawals', { id: text('id').primaryKey(), playerId: text('player_id'), amount: integer('amount'), status: text('status'), idNumber: text('id_number'), firstName: text('first_name'), lastName: text('last_name'), channelsId: text('channels_id'), note: text('note'), currencyType: text('currency_type'), currency: text('currency'), createdAt: timestamp('created_at', { mode: 'date', precision: 3 }).defaultNow().notNull(), updatedAt: timestamp('updated_at', { mode: 'date', precision: 3 }).defaultNow().notNull() });

export const vipRanks = pgTable('vip_ranks', { id: text('id').primaryKey(), name: text('name').notNull(), minXp: integer('min_xp').notNull(), icon: text('icon').default('/images/vip/rank1.avif').notNull(), dailyCashbackMax: integer('daily_cashback_max').notNull(), monthlyCashbackMax: integer('monthly_cashback_max').notNull(), wagerBonusCoinPct: integer('wager_bonus_coin_pct').notNull(), purchaseBonusCoinPct: integer('purchase_bonus_coin_pct').notNull(), levelUpBonusCoinPct: integer('level_up_bonus_coin_pct').notNull(), vipSpinMaxAmount: integer('vip_spin_max_amount').default(5).notNull(), hasConcierge: boolean('has_concierge').notNull(), hasVipLoungeAccess: boolean('has_vip_lounge_access').notNull(), isInvitationOnly: boolean('is_invitation_only').notNull(), createdAt: timestamp('created_at', { mode: 'date', precision: 3 }).defaultNow().notNull(), updatedAt: timestamp('updated_at', { mode: 'date', precision: 3 }).defaultNow().notNull() });

export const vipInfos = pgTable('vip_info', { id: text('id').primaryKey(), level: integer('level').default(1).notNull(), xp: integer('xp').notNull(), totalXp: integer('total_xp').notNull(), playerId: text('player_id').notNull(), currentRankid: text('current_rankid'), createdAt: timestamp('created_at', { mode: 'date', precision: 3 }).defaultNow().notNull(), updatedAt: timestamp('updated_at', { mode: 'date', precision: 3 }).defaultNow().notNull() });

export const vipLevels = pgTable('vip_levels', { id: text('id').primaryKey(), parentId: text('parent_id').notNull(), minXpNeeded: integer('min_xp_needed').default(0).notNull(), levelNumber: integer('level_number').default(0).notNull(), levelName: text('level_name').notNull(), spinBonusMultiplier: doublePrecision('spin_bonus_multiplier_id').default(0.1).notNull(), settingId: text('setting_id'), levelUpBonusAmount: integer('level_up_bonus_amount'), createdAt: timestamp('created_at', { mode: 'date', precision: 3 }).defaultNow().notNull(), updatedAt: timestamp('updated_at', { mode: 'date', precision: 3 }).defaultNow().notNull() });

export const vipCashbacks = pgTable('vip_cashback', { id: text('id').primaryKey(), playerId: text('player_id'), amount: integer('amount').notNull(), currency: text('currency').notNull(), tiersName: text('tiers_name').notNull(), type: text('type').notNull(), createdAt: timestamp('created_at', { mode: 'date', precision: 3 }).defaultNow().notNull(), updatedAt: timestamp('updated_at', { mode: 'date', precision: 3 }).defaultNow().notNull() });

export const vipLevelUpBonuses = pgTable('vip_level_up_bonus', { id: text('id').primaryKey(), playerId: text('player_id').notNull(), amount: integer('amount').notNull(), levelName: text('level_name').notNull(), levelXp: integer('level_xp').notNull(), createdAt: timestamp('created_at', { mode: 'date', precision: 3 }).defaultNow().notNull(), updatedAt: timestamp('updated_at', { mode: 'date', precision: 3 }).defaultNow().notNull() });

export const vipSpinRewards = pgTable('vip_spin_rewards', { id: text('id').primaryKey(), playerId: text('player_id').notNull(), amount: integer('amount').notNull(), currency: text('currency').notNull(), createdAt: timestamp('created_at', { mode: 'date', precision: 3 }).defaultNow().notNull(), updatedAt: timestamp('updated_at', { mode: 'date', precision: 3 }).defaultNow().notNull() });

export const affiliates = pgTable('affiliates', { id: text('id').primaryKey(), playername: text('playername').notNull(), firstName: text('first_name').notNull(), lastName: text('last_name').notNull(), status: text('status').notNull(), email: text('email').notNull(), role: text('role').notNull(), referralCode: text('referral_code').notNull(), parentId: text('parent_id'), path: text('path').array().default([]).notNull(), password: text('password').notNull(), createdAt: timestamp('created_at', { mode: 'date', precision: 3 }).defaultNow().notNull(), updatedAt: timestamp('updated_at', { mode: 'date', precision: 3 }).defaultNow().notNull() });

export const affiliateLogs = pgTable('affiliate_logs', { id: text('id').primaryKey(), invitorId: text('invitor_id').notNull(), childId: text('child_id').notNull(), currency: text('currency').notNull(), referralCode: text('referral_code').notNull(), betAmount: doublePrecision('bet_amount').default(0).notNull(), commissionAmount: doublePrecision('commission_amount').default(0).notNull(), commissionWager: doublePrecision('commission_wager').default(0).notNull(), totalReferralAmount: doublePrecision('total_referral_amount').default(0).notNull(), referralAmount: doublePrecision('referral_amount').default(0).notNull(), referralWager: doublePrecision('referral_wager').default(0).notNull(), lastVipLevelAmount: doublePrecision('last_vip_level_amount').default(0).notNull(), createdAt: timestamp('created_at', { mode: 'date', precision: 3 }).defaultNow().notNull(), updatedAt: timestamp('updated_at', { mode: 'date', precision: 3 }).defaultNow().notNull() });

export const settings = pgTable('settings', { id: text('id').primaryKey(), name: text('name').default('setting').notNull(), referralCodeCount: integer('referral_code_count').default(20).notNull(), referralCommissionRate: doublePrecision('referral_commission_rate').default(0.25).notNull(), rates: text('rates').default('[{"USD": 1}]').notNull(), jackpotConfig: jsonb('jackpot_config'), gameGroups: jsonb('game_groups'), vipConfig: jsonb('vip_config'), wageringConfig: jsonb('wagering_config'), systemLimits: jsonb('system_limits'), createdAt: timestamp('created_at', { mode: 'date', precision: 3 }).defaultNow().notNull(), updatedAt: timestamp('updated_at', { mode: 'date', precision: 3 }).defaultNow().notNull() });

export const games = pgTable('games', { id: text('id').primaryKey(), name: text('name').notNull(), title: text('title'), description: text('description'), category: text('category').default('slots').notNull(), tags: text('tags'), thumbnailUrl: text('thumbnail_url'), bannerUrl: text('banner_url'), developer: text('developer').notNull(), providerId: text('provider_id'), totalWagered: integer('total_wagered'), totalWon: integer('total_won'), targetRtp: integer('target_rtp').default(90).notNull(), isFeatured: boolean('is_featured'), statIn: integer('stat_in').default(0).notNull(), statOut: integer('stat_out').default(0).notNull(), isActive: boolean('is_active').default(true).notNull(), operatorId: text('operator_id'), version: text('version'), jpgIds: text('jpg_ids').array().notNull(), isHorizontal: boolean('isHorizontal').default(false).notNull(), jpgId: text('jpg_id'), label: text('label'), device: integer('device'), gamebank: text('gamebank'), linesPercentConfigSpin: text('lines_percent_config_spin'), linesPercentConfigSpinBonus: text('lines_percent_config_spin_bonus'), linesPercentConfigBonus: text('lines_percent_config_bonus'), linesPercentConfigBonusBonus: text('lines_percent_config_bonus_bonus'), rezerv: text('rezerv'), cask: text('cask'), advanced: text('advanced'), bet: text('bet'), scaleMode: text('scale_mode'), slotViewState: text('slot_view_state'), view: text('view'), denomination: text('denomination'), categoryTemp: text('category_temp'), originalId: text('original_id'), bids: text('bids').array().notNull(), rtpStatIn: integer('rtp_stat_in'), rtpStatOut: integer('rtp_stat_out'), currentRtp: text('current_rtp'), status: integer('status').default(0).notNull(), state: boolean('state').default(true).notNull(), createdAt: timestamp('created_at', { mode: 'date', precision: 3 }).defaultNow().notNull(), updatedAt: timestamp('updated_at', { mode: 'date', precision: 3 }).defaultNow().notNull() });

export const commissions = pgTable('commissions', { id: text('id').primaryKey(), master: doublePrecision('master').default(30).notNull(), affiliate: doublePrecision('affiliate').default(20).notNull(), subAffiliate: doublePrecision('sub_affiliate').default(10).notNull(), settingId: text('setting_id').notNull(), createdAt: timestamp('created_at', { mode: 'date', precision: 3 }).defaultNow().notNull(), updatedAt: timestamp('updated_at', { mode: 'date', precision: 3 }).defaultNow().notNull() });

export const operatorSettlements = pgTable('operator_settlements', { id: text('id').primaryKey(), operatorId: text('operator_id').notNull(), weekStartDate: timestamp('week_start_date', { mode: 'date', precision: 3 }).notNull(), weekEndDate: timestamp('week_end_date', { mode: 'date', precision: 3 }).notNull(), totalTurnover: doublePrecision('total_turnover').default(0).notNull(), totalPayouts: doublePrecision('total_payouts').default(0).notNull(), grossGamingRevenue: doublePrecision('gross_gaming_revenue').notNull(), platformFee: doublePrecision('platform_fee').notNull(), loyaltyFundContribution: doublePrecision('loyalty_fund_contribution').notNull(), netToOperator: doublePrecision('net_to_operator').notNull(), createdAt: timestamp('created_at', { mode: 'date', precision: 3 }).defaultNow().notNull(), updatedAt: timestamp('updated_at', { mode: 'date', precision: 3 }).defaultNow().notNull() });

export const loyaltyFundTransactions = pgTable('loyalty_fund_transactions', { id: text('id').primaryKey(), type: loyaltyFundTransactionTypeEnum('type').notNull(), amount: doublePrecision('amount').notNull(), description: text('description'), operatorId: text('operator_id'), playerId: text('player_id'), relatedTransactionId: text('related_transaction_id'), createdAt: timestamp('created_at', { mode: 'date', precision: 3 }).defaultNow().notNull(), updatedAt: timestamp('updated_at', { mode: 'date', precision: 3 }).defaultNow().notNull() });

export const balances = pgTable('balances', { id: text('id').primaryKey(), playerId: text('player_id').notNull(), currencyId: text('currency_id').notNull(), walletId: text('wallet_id'), amount: integer('amount').default(0).notNull(), bonus: integer('bonus').default(0).notNull(), turnover: integer('turnover').default(0).notNull(), withdrawable: integer('withdrawable').default(0).notNull(), pending: integer('pending').default(0).notNull(), createdAt: timestamp('created_at', { mode: 'date', precision: 3 }).defaultNow().notNull(), updatedAt: timestamp('updated_at', { mode: 'date', precision: 3 }).defaultNow().notNull() });

export const playerBonuses = pgTable('player_bonuses', { id: text('id').primaryKey(), playerId: text('player_id').notNull(), bonusId: text('bonus_id').notNull(), amount: integer('amount').default(0).notNull(), processAmount: integer('process_amount').default(0).notNull(), goalAmount: integer('goal_amount').notNull(), betsIds: text('bets_ids').array().notNull(), status: bonusStatusEnum('status').default('pending').notNull(), createdAt: timestamp('created_at', { mode: 'date', precision: 3 }).defaultNow().notNull(), updatedAt: timestamp('updated_at', { mode: 'date', precision: 3 }).defaultNow().notNull() });

export const bonuses = pgTable('bonuses', { id: text('id').primaryKey(), name: text('name').notNull(), description: text('description').notNull(), option: text('option').notNull(), percent: integer('percent').notNull(), multiply: integer('multiply').notNull(), bonusCap: integer('bonus_cap').notNull(), minBet: integer('min_bet').notNull(), maxBet: integer('max_bet').notNull(), slot: boolean('slot').notNull(), casino: boolean('casino').notNull(), status: boolean('status').notNull(), autoCalc: boolean('auto_calc').notNull(), expireDate: timestamp('expire_date', { mode: 'date', precision: 3 }).notNull(), isExpired: boolean('is_expired').default(false).notNull(), banner: text('banner').notNull(), particularData: text('particular_data'), createdAt: timestamp('created_at', { mode: 'date', precision: 3 }).defaultNow().notNull(), updatedAt: timestamp('updated_at', { mode: 'date', precision: 3 }).defaultNow().notNull() });

export const progresses = pgTable('progres', { id: text('id').primaryKey(), sum: doublePrecision('sum').default(0).notNull(), type: progressTypeEnumEnum('type').notNull(), spins: integer('spins').default(0).notNull(), bet: doublePrecision('bet').notNull(), rating: integer('rating').notNull(), bonus: doublePrecision('bonus').default(0).notNull(), day: text('day').notNull(), min: integer('min').notNull(), max: integer('max').notNull(), percent: doublePrecision('percent').notNull(), minBalance: doublePrecision('min_balance').notNull(), wager: integer('wager').notNull(), daysActive: integer('days_active').default(5).notNull(), status: integer('status').default(1).notNull(), operatorId: text('operator_id').notNull(), createdAt: timestamp('created_at', { mode: 'date', precision: 3 }).defaultNow().notNull(), updatedAt: timestamp('updated_at', { mode: 'date', precision: 3 }).defaultNow().notNull() });

export const usersRelations = relations(users, (helpers) => ({ sessions: helpers.many(sessions, { relationName: 'SessionToUser' }), accounts: helpers.many(accounts, { relationName: 'AccountToUser' }), wallets: helpers.many(wallets, { relationName: 'UserWallets' }) }));

export const sessionsRelations = relations(sessions, (helpers) => ({ user: helpers.one(users, { relationName: 'SessionToUser', fields: [ sessions.userId ], references: [ users.id ] }) }));

export const accountsRelations = relations(accounts, (helpers) => ({ user: helpers.one(users, { relationName: 'AccountToUser', fields: [ accounts.userId ], references: [ users.id ] }) }));

export const playersRelations = relations(players, (helpers) => ({ deposits: helpers.many(deposits, { relationName: 'DepositToPlayer' }), gameSessions: helpers.many(gameSessions, { relationName: 'GameSessionsToPlayer' }), jackpotWins: helpers.many(jackpotWins, { relationName: 'JackpotWinsToPlayer' }), Jackpots: helpers.many(jackpots, { relationName: 'JackpotsToPlayer' }), loyaltyFundTransactions: helpers.many(loyaltyFundTransactions, { relationName: 'LoyaltyFundTransactionToPlayer' }), vipInfo: helpers.one(vipInfos), withdrawals: helpers.many(withdrawals, { relationName: 'PlayerToWithdrawal' }), ops: helpers.one(operators, { relationName: 'OperatorsToPlayer', fields: [ players.activeOperatorId ], references: [ operators.id ] }), operatorSwitchHistory: helpers.many(operatorSwitchHistories, { relationName: 'OperatorSwitchHistoryToPlayer' }), vipCashbacks: helpers.many(vipCashbacks, { relationName: 'PlayerToVipCashback' }), vipLevelUpBonuses: helpers.many(vipLevelUpBonuses, { relationName: 'PlayerToVipLevelUpBonus' }), vipSpinRewards: helpers.many(vipSpinRewards, { relationName: 'PlayerToVipSpinReward' }), affiliateLogsInvited: helpers.many(affiliateLogs, { relationName: 'Invitor' }), affiliateLogsReferred: helpers.many(affiliateLogs, { relationName: 'Child' }), referralCodes: helpers.many(referralCodes, { relationName: 'PlayerToReferralCode' }), PlayerBonus: helpers.many(playerBonuses, { relationName: 'PlayerToPlayerBonus' }) }));

export const depositsRelations = relations(deposits, (helpers) => ({ players: helpers.one(players, { relationName: 'DepositToPlayer', fields: [ deposits.playerId ], references: [ players.id ] }) }));

export const gameSessionsRelations = relations(gameSessions, (helpers) => ({ players: helpers.one(players, { relationName: 'GameSessionsToPlayer', fields: [ gameSessions.playerId ], references: [ players.id ] }), game: helpers.one(games, { relationName: 'GameSessionsToGames', fields: [ gameSessions.gameId ], references: [ games.id ] }) }));

export const jackpotContributionsRelations = relations(jackpotContributions, (helpers) => ({ jackpots: helpers.one(jackpots, { relationName: 'JackpotContributionsToJackpots', fields: [ jackpotContributions.jackpotId ], references: [ jackpots.id ] }) }));

export const jackpotWinsRelations = relations(jackpotWins, (helpers) => ({ jackpots: helpers.one(jackpots, { relationName: 'JackpotWinsToJackpots', fields: [ jackpotWins.jackpotId ], references: [ jackpots.id ] }), player: helpers.one(players, { relationName: 'JackpotWinsToPlayer', fields: [ jackpotWins.winnerId ], references: [ players.id ] }) }));

export const jackpotsRelations = relations(jackpots, (helpers) => ({ jackpotContributions: helpers.many(jackpotContributions, { relationName: 'JackpotContributionsToJackpots' }), jackpotWins: helpers.many(jackpotWins, { relationName: 'JackpotWinsToJackpots' }), players: helpers.one(players, { relationName: 'JackpotsToPlayer', fields: [ jackpots.lastWonBy ], references: [ players.id ] }) }));

export const operatorsRelations = relations(operators, (helpers) => ({ games: helpers.many(games, { relationName: 'GamesToOperators' }), products: helpers.many(products, { relationName: 'OperatorsToProducts' }), players: helpers.many(players, { relationName: 'OperatorsToPlayer' }), settlements: helpers.many(operatorSettlements, { relationName: 'OperatorSettlementToOperators' }), loyaltyFundContributions: helpers.many(loyaltyFundTransactions, { relationName: 'LoyaltyFundTransactionToOperators' }), switchedFromHistory: helpers.many(operatorSwitchHistories, { relationName: 'SwitchedFrom' }), switchedToHistory: helpers.many(operatorSwitchHistories, { relationName: 'SwitchedTo' }), wallets: helpers.many(wallets, { relationName: 'OperatorsToWallet' }) }));

export const operatorSwitchHistoriesRelations = relations(operatorSwitchHistories, (helpers) => ({ player: helpers.one(players, { relationName: 'OperatorSwitchHistoryToPlayer', fields: [ operatorSwitchHistories.playerId ], references: [ players.id ] }), fromOperator: helpers.one(operators, { relationName: 'SwitchedFrom', fields: [ operatorSwitchHistories.fromOperatorId ], references: [ operators.id ] }), toOperator: helpers.one(operators, { relationName: 'SwitchedTo', fields: [ operatorSwitchHistories.toOperatorId ], references: [ operators.id ] }) }));

export const productsRelations = relations(products, (helpers) => ({ operators: helpers.one(operators, { relationName: 'OperatorsToProducts', fields: [ products.operatorId ], references: [ operators.id ] }), transactions: helpers.many(transactions, { relationName: 'ProductsToTransaction' }) }));

export const transactionsRelations = relations(transactions, (helpers) => ({ products: helpers.one(products, { relationName: 'ProductsToTransaction', fields: [ transactions.productId ], references: [ products.id ] }), wallets: helpers.one(wallets, { relationName: 'TransactionToWallet', fields: [ transactions.walletId ], references: [ wallets.id ] }) }));

export const referralCodesRelations = relations(referralCodes, (helpers) => ({ player: helpers.one(players, { relationName: 'PlayerToReferralCode', fields: [ referralCodes.playerId ], references: [ players.id ] }) }));

export const walletsRelations = relations(wallets, (helpers) => ({ operator: helpers.one(operators, { relationName: 'OperatorsToWallet', fields: [ wallets.operatorId ], references: [ operators.id ] }), transactions: helpers.many(transactions, { relationName: 'TransactionToWallet' }), balances: helpers.many(balances, { relationName: 'WalletBalances' }), activeForUser: helpers.one(users, { relationName: 'UserWallets', fields: [ wallets.userId ], references: [ users.id ] }) }));

export const withdrawalsRelations = relations(withdrawals, (helpers) => ({ players: helpers.one(players, { relationName: 'PlayerToWithdrawal', fields: [ withdrawals.playerId ], references: [ players.id ] }) }));

export const vipRanksRelations = relations(vipRanks, (helpers) => ({ vipInfo: helpers.many(vipInfos, { relationName: 'VipInfoToVipRank' }), levels: helpers.many(vipLevels, { relationName: 'VipLevelToVipRank' }) }));

export const vipInfosRelations = relations(vipInfos, (helpers) => ({ vipRank: helpers.one(vipRanks, { relationName: 'VipInfoToVipRank', fields: [ vipInfos.currentRankid ], references: [ vipRanks.id ] }), players: helpers.one(players, { relationName: 'PlayerToVipInfo', fields: [ vipInfos.playerId ], references: [ players.id ] }) }));

export const vipLevelsRelations = relations(vipLevels, (helpers) => ({ parent: helpers.one(vipRanks, { relationName: 'VipLevelToVipRank', fields: [ vipLevels.parentId ], references: [ vipRanks.id ] }), setting: helpers.one(settings, { relationName: 'SettingToVipLevel', fields: [ vipLevels.settingId ], references: [ settings.id ] }) }));

export const vipCashbacksRelations = relations(vipCashbacks, (helpers) => ({ player: helpers.one(players, { relationName: 'PlayerToVipCashback', fields: [ vipCashbacks.playerId ], references: [ players.id ] }) }));

export const vipLevelUpBonusesRelations = relations(vipLevelUpBonuses, (helpers) => ({ player: helpers.one(players, { relationName: 'PlayerToVipLevelUpBonus', fields: [ vipLevelUpBonuses.playerId ], references: [ players.id ] }) }));

export const vipSpinRewardsRelations = relations(vipSpinRewards, (helpers) => ({ player: helpers.one(players, { relationName: 'PlayerToVipSpinReward', fields: [ vipSpinRewards.playerId ], references: [ players.id ] }) }));

export const affiliatesRelations = relations(affiliates, (helpers) => ({ parent: helpers.one(affiliates, { relationName: 'AffiliateTree', fields: [ affiliates.parentId ], references: [ affiliates.id ] }), children: helpers.many(affiliates, { relationName: 'AffiliateTree' }) }));

export const affiliateLogsRelations = relations(affiliateLogs, (helpers) => ({ invitor: helpers.one(players, { relationName: 'Invitor', fields: [ affiliateLogs.invitorId ], references: [ players.id ] }), child: helpers.one(players, { relationName: 'Child', fields: [ affiliateLogs.childId ], references: [ players.id ] }) }));

export const settingsRelations = relations(settings, (helpers) => ({ commission: helpers.one(commissions), vipLevels: helpers.many(vipLevels, { relationName: 'SettingToVipLevel' }) }));

export const gamesRelations = relations(games, (helpers) => ({ operators: helpers.one(operators, { relationName: 'GamesToOperators', fields: [ games.operatorId ], references: [ operators.id ] }), gameSessions: helpers.many(gameSessions, { relationName: 'GameSessionsToGames' }) }));

export const commissionsRelations = relations(commissions, (helpers) => ({ setting: helpers.one(settings, { relationName: 'CommissionToSetting', fields: [ commissions.settingId ], references: [ settings.id ] }) }));

export const operatorSettlementsRelations = relations(operatorSettlements, (helpers) => ({ operator: helpers.one(operators, { relationName: 'OperatorSettlementToOperators', fields: [ operatorSettlements.operatorId ], references: [ operators.id ] }) }));

export const loyaltyFundTransactionsRelations = relations(loyaltyFundTransactions, (helpers) => ({ operator: helpers.one(operators, { relationName: 'LoyaltyFundTransactionToOperators', fields: [ loyaltyFundTransactions.operatorId ], references: [ operators.id ] }), player: helpers.one(players, { relationName: 'LoyaltyFundTransactionToPlayer', fields: [ loyaltyFundTransactions.playerId ], references: [ players.id ] }) }));

export const balancesRelations = relations(balances, (helpers) => ({ wallet: helpers.one(wallets, { relationName: 'WalletBalances', fields: [ balances.walletId ], references: [ wallets.id ] }) }));

export const playerBonusesRelations = relations(playerBonuses, (helpers) => ({ player: helpers.one(players, { relationName: 'PlayerToPlayerBonus', fields: [ playerBonuses.playerId ], references: [ players.id ] }), bonus: helpers.one(bonuses, { relationName: 'BonusToPlayerBonus', fields: [ playerBonuses.bonusId ], references: [ bonuses.id ] }) }));

export const bonusesRelations = relations(bonuses, (helpers) => ({ playerBonuses: helpers.many(playerBonuses, { relationName: 'BonusToPlayerBonus' }) }));