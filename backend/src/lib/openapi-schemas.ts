import { z } from 'zod';
// import type { id } from 'zod/v4/locales'
// import { StatusSchema } from '@/types/zod/inputTypeSchemas/StatusSchema';

// Simplified OpenAPI schemas without relations to avoid circular dependencies

export const OpenAPIUserSchema = z.object({
  // status: StatusSchema,
  id: z.string(),
  username: z.string(),
  email: z.string().nullable(),
  passwordHash: z.string().nullable(),
  accessToken: z.string().nullable(),
  refreshToken: z.string().nullable(),
  accessTokenExpiresAt: z.string().nullable(),
  refreshTokenExpiresAt: z.string().nullable(),
  currentGameSessionDataId: z.string().nullable(),
  currentAuthSessionDataId: z.string().nullable(),
  avatarUrl: z.string(),
  role: z.string(),
  phpId: z.number().int(),
  isActive: z.boolean(),
  lastLoginAt: z.string().nullable(),
  totalXpGained: z.number().int(),
  vipInfoId: z.string().nullable(),
  createdAt: z.string(),
  updatedAt: z.string(),
  deletedAt: z.string().nullable(),
  lastSeen: z.string().nullable(),
  rtgBlockTime: z.number().int(),
  phone: z.string().nullable(),
  path: z.array(z.string()),
  invitorId: z.string().nullable(),
  avatar: z.string(),
  count_balance: z.number().int(),
  count_tournaments: z.number().int(),
  count_happyhours: z.number().int(),
  count_refunds: z.number().int(),
  count_progress: z.number().int(),
  count_daily_entries: z.number().int(),
  count_invite: z.number().int(),
  count_welcomebonus: z.number().int(),
  count_smsbonus: z.number().int(),
  count_wheelfortune: z.number().int(),
  address: z.number().int(),
  activeOperatorId: z.string().nullable(),
  activeWalletId: z.string().nullable(),
  inviteCode: z.string().nullable(),
});

export const OpenAPIVipInfoSchema = z.object({
  id: z.string(),
  level: z.number().int(),
  xp: z.number().int(),
  totalXp: z.number().int(),
  userId: z.string(),
  currentRankid: z.number().int().nullable(),
  createdAt: z.string(),
  updatedAt: z.string(),
});

export const OpenAPIVipRankSchema = z.object({
  id: z.number().int(),
  name: z.string(),
  minXp: z.number().int(),
  icon: z.string(),
  dailyCashbackMax: z.number().int(),
  monthlyCashbackMax: z.number().int(),
  wagerBonusCoinPct: z.number().int(),
  purchaseBonusCoinPct: z.number().int(),
  levelUpBonusCoinPct: z.number().int(),
  vipSpinMaxAmount: z.number().int(),
  hasConcierge: z.boolean(),
  hasVipLoungeAccess: z.boolean(),
  isInvitationOnly: z.boolean(),
});

export const OpenAPIWalletsSchema = z.object({
  id: z.string(),
  balance: z.number().int(),
  paymentMethod: z.string(),
  currency: z.string(),
  address: z.string().nullable(),
  cashtag: z.string().nullable(),
  operatorId: z.string(),
  lastUsedAt: z.string().nullable(),
  createdAt: z.string(),
  updatedAt: z.string(),
  userId: z.string(),
  isActive: z.boolean(),
});

export const OpenAPIGamesSchema = z.object({
  id: z.string(),
  name: z.string(),
  title: z.string().nullable(),
  description: z.string().nullable(),
  category: z.string(),
  tags: z.string().nullable(),
  thumbnailUrl: z.string().nullable(),
  bannerUrl: z.string().nullable(),
  developer: z.string(),
  providerId: z.string().nullable(),
  totalWagered: z.number().int().nullable(),
  totalWon: z.number().int().nullable(),
  targetRtp: z.number().int().nullable(),
  isFeatured: z.boolean().nullable(),
  statIn: z.number().int(),
  statOut: z.number().int(),
  isActive: z.boolean(),
  operatorId: z.string().nullable(),
  version: z.string().nullable(),
  jpgIds: z.array(z.string()),
  isHorizontal: z.boolean(),
  jpgId: z.string().nullable(),
  label: z.string().nullable(),
  device: z.number().int().nullable(),
  gamebank: z.string().nullable(),
  linesPercentConfigSpin: z.string().nullable(),
  linesPercentConfigSpinBonus: z.string().nullable(),
  linesPercentConfigBonus: z.string().nullable(),
  linesPercentConfigBonusBonus: z.string().nullable(),
  rezerv: z.string().nullable(),
  cask: z.string().nullable(),
  advanced: z.string().nullable(),
  bet: z.string().nullable(),
  scaleMode: z.string().nullable(),
  slotViewState: z.string().nullable(),
  view: z.string().nullable(),
  denomination: z.string().nullable(),
  categoryTemp: z.string().nullable(),
  originalId: z.string().nullable(),
  bids: z.array(z.string()),
  rtpStatIn: z.number().int().nullable(),
  rtpStatOut: z.number().int().nullable(),
  currentRtp: z.string().nullable(),
  createdAt: z.string(),
  updatedAt: z.string(),
  status: z.number().int(),
});

export const OpenAPIOperatorsSchema = z.object({
  id: z.string(),
  name: z.string(),
  operatorSecret: z.string(),
  operatorAccess: z.string(),
  callbackUrl: z.string(),
  isActive: z.boolean(),
  allowedIps: z.string(),
  description: z.string().nullable(),
  productIds: z.string().nullable(),
  balance: z.number().int(),
  netRevenue: z.number().int(),
  acceptedPayments: z.array(z.string()),
  ownerId: z.string().nullable(),
  lastUsedAt: z.string().nullable(),
  createdAt: z.string(),
  updatedAt: z.string(),
  upfrontBankCredits: z.number().int(),
  platformFeeRate: z.string(),
  loyaltyContributionRate: z.string(),
});

export const OpenAPIUserSchemaWithoutPassword = OpenAPIUserSchema.omit({
  passwordHash: true,
});