// This file is auto-generated by @hey-api/openapi-ts

import { z } from 'zod';

export const zPostApiUpdatesCheckData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

/**
 * The updated user
 */
export const zPostApiUpdatesCheckResponse = z.string();

export const zPostApiUpdatesUploadData = z.object({
    body: z.optional(z.record(z.string(), z.unknown())),
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

/**
 * Upload success response
 */
export const zPostApiUpdatesUploadResponse = z.boolean();

export const zGetApiUpdatesDownloadByFilenameData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        filename: z.string()
    }),
    query: z.optional(z.never())
});

export const zGetApiUpdatesVersionsByAppIdByPlatformData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        appId: z.string(),
        platform: z.string()
    }),
    query: z.optional(z.never())
});

/**
 * List of versions
 */
export const zGetApiUpdatesVersionsByAppIdByPlatformResponse = z.array(z.string());

export const zGetApiUsersData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

/**
 * The list of users
 */
export const zGetApiUsersResponse = z.array(z.object({
    status: z.enum([
        'ACTIVE',
        'INACTIVE',
        'BANNED'
    ]),
    id: z.string(),
    username: z.string(),
    email: z.union([
        z.string(),
        z.null()
    ]),
    passwordHash: z.union([
        z.string(),
        z.null()
    ]),
    accessToken: z.union([
        z.string(),
        z.null()
    ]),
    refreshToken: z.union([
        z.string(),
        z.null()
    ]),
    accessTokenExpiresAt: z.union([
        z.string(),
        z.null()
    ]),
    refreshTokenExpiresAt: z.union([
        z.string(),
        z.null()
    ]),
    currentGameSessionDataId: z.union([
        z.string(),
        z.null()
    ]),
    currentAuthSessionDataId: z.union([
        z.string(),
        z.null()
    ]),
    avatarUrl: z.string(),
    role: z.string(),
    phpId: z.int(),
    isActive: z.boolean(),
    lastLoginAt: z.union([
        z.string(),
        z.null()
    ]),
    totalXpGained: z.int(),
    vipInfoId: z.union([
        z.string(),
        z.null()
    ]),
    createdAt: z.union([
        z.string(),
        z.null()
    ]),
    updatedAt: z.union([
        z.string(),
        z.null()
    ]),
    deletedAt: z.union([
        z.string(),
        z.null()
    ]),
    lastSeen: z.union([
        z.string(),
        z.null()
    ]),
    rtgBlockTime: z.int(),
    phone: z.union([
        z.string(),
        z.null()
    ]),
    path: z.array(z.string()),
    invitorId: z.union([
        z.string(),
        z.null()
    ]),
    avatar: z.string(),
    count_balance: z.int(),
    count_tournaments: z.int(),
    count_happyhours: z.int(),
    count_refunds: z.int(),
    count_progress: z.int(),
    count_daily_entries: z.int(),
    count_invite: z.int(),
    count_welcomebonus: z.int(),
    count_smsbonus: z.int(),
    count_wheelfortune: z.int(),
    address: z.int(),
    activeOperatorId: z.union([
        z.string(),
        z.null()
    ]),
    activeWalletId: z.union([
        z.string(),
        z.null()
    ]),
    inviteCode: z.union([
        z.string(),
        z.null()
    ])
}));

export const zPostApiEnterGameData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

export const zPostApiGamesData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

export const zPostApiSetupGameData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

export const zGetApiSpinpageData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

export const zPostApiSpinData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

export const zGetApiFavoriteGameData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

export const zPostApiEndGameSessionData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

/**
 * Session ended response
 */
export const zPostApiEndGameSessionResponse = z.object({
    success: z.boolean(),
    message: z.string()
});

export const zDeleteApiUsersByIdData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.object({
        id: z.optional(z.union([
            z.number(),
            z.null()
        ]))
    })),
    query: z.optional(z.never())
});

/**
 * User deleted
 */
export const zDeleteApiUsersByIdResponse = z.void();

export const zGetApiUsersByIdData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.object({
        id: z.optional(z.union([
            z.number(),
            z.null()
        ]))
    })),
    query: z.optional(z.never())
});

/**
 * The requested user
 */
export const zGetApiUsersByIdResponse = z.object({
    status: z.enum([
        'ACTIVE',
        'INACTIVE',
        'BANNED'
    ]),
    id: z.string(),
    username: z.string(),
    email: z.union([
        z.string(),
        z.null()
    ]),
    passwordHash: z.union([
        z.string(),
        z.null()
    ]),
    accessToken: z.union([
        z.string(),
        z.null()
    ]),
    refreshToken: z.union([
        z.string(),
        z.null()
    ]),
    accessTokenExpiresAt: z.union([
        z.string(),
        z.null()
    ]),
    refreshTokenExpiresAt: z.union([
        z.string(),
        z.null()
    ]),
    currentGameSessionDataId: z.union([
        z.string(),
        z.null()
    ]),
    currentAuthSessionDataId: z.union([
        z.string(),
        z.null()
    ]),
    avatarUrl: z.string(),
    role: z.string(),
    phpId: z.int(),
    isActive: z.boolean(),
    lastLoginAt: z.union([
        z.string(),
        z.null()
    ]),
    totalXpGained: z.int(),
    vipInfoId: z.union([
        z.string(),
        z.null()
    ]),
    createdAt: z.union([
        z.string(),
        z.null()
    ]),
    updatedAt: z.union([
        z.string(),
        z.null()
    ]),
    deletedAt: z.union([
        z.string(),
        z.null()
    ]),
    lastSeen: z.union([
        z.string(),
        z.null()
    ]),
    rtgBlockTime: z.int(),
    phone: z.union([
        z.string(),
        z.null()
    ]),
    path: z.array(z.string()),
    invitorId: z.union([
        z.string(),
        z.null()
    ]),
    avatar: z.string(),
    count_balance: z.int(),
    count_tournaments: z.int(),
    count_happyhours: z.int(),
    count_refunds: z.int(),
    count_progress: z.int(),
    count_daily_entries: z.int(),
    count_invite: z.int(),
    count_welcomebonus: z.int(),
    count_smsbonus: z.int(),
    count_wheelfortune: z.int(),
    address: z.int(),
    activeOperatorId: z.union([
        z.string(),
        z.null()
    ]),
    activeWalletId: z.union([
        z.string(),
        z.null()
    ]),
    inviteCode: z.union([
        z.string(),
        z.null()
    ])
});

export const zPatchApiUsersByIdData = z.object({
    body: z.object({
        status: z.enum([
            'ACTIVE',
            'INACTIVE',
            'BANNED'
        ]),
        id: z.string(),
        username: z.string(),
        email: z.union([
            z.string(),
            z.null()
        ]),
        passwordHash: z.union([
            z.string(),
            z.null()
        ]),
        accessToken: z.union([
            z.string(),
            z.null()
        ]),
        refreshToken: z.union([
            z.string(),
            z.null()
        ]),
        accessTokenExpiresAt: z.union([
            z.string(),
            z.null()
        ]),
        refreshTokenExpiresAt: z.union([
            z.string(),
            z.null()
        ]),
        currentGameSessionDataId: z.union([
            z.string(),
            z.null()
        ]),
        currentAuthSessionDataId: z.union([
            z.string(),
            z.null()
        ]),
        avatarUrl: z.string(),
        role: z.string(),
        phpId: z.int(),
        isActive: z.boolean(),
        lastLoginAt: z.union([
            z.string(),
            z.null()
        ]),
        totalXpGained: z.int(),
        vipInfoId: z.union([
            z.string(),
            z.null()
        ]),
        createdAt: z.union([
            z.string(),
            z.null()
        ]),
        updatedAt: z.union([
            z.string(),
            z.null()
        ]),
        deletedAt: z.union([
            z.string(),
            z.null()
        ]),
        lastSeen: z.union([
            z.string(),
            z.null()
        ]),
        rtgBlockTime: z.int(),
        phone: z.union([
            z.string(),
            z.null()
        ]),
        path: z.array(z.string()),
        invitorId: z.union([
            z.string(),
            z.null()
        ]),
        avatar: z.string(),
        count_balance: z.int(),
        count_tournaments: z.int(),
        count_happyhours: z.int(),
        count_refunds: z.int(),
        count_progress: z.int(),
        count_daily_entries: z.int(),
        count_invite: z.int(),
        count_welcomebonus: z.int(),
        count_smsbonus: z.int(),
        count_wheelfortune: z.int(),
        address: z.int(),
        activeOperatorId: z.union([
            z.string(),
            z.null()
        ]),
        activeWalletId: z.union([
            z.string(),
            z.null()
        ]),
        inviteCode: z.union([
            z.string(),
            z.null()
        ])
    }),
    path: z.optional(z.object({
        id: z.optional(z.union([
            z.number(),
            z.null()
        ]))
    })),
    query: z.optional(z.never())
});

/**
 * The updated user
 */
export const zPatchApiUsersByIdResponse = z.object({
    status: z.enum([
        'ACTIVE',
        'INACTIVE',
        'BANNED'
    ]),
    id: z.string(),
    username: z.string(),
    email: z.union([
        z.string(),
        z.null()
    ]),
    passwordHash: z.union([
        z.string(),
        z.null()
    ]),
    accessToken: z.union([
        z.string(),
        z.null()
    ]),
    refreshToken: z.union([
        z.string(),
        z.null()
    ]),
    accessTokenExpiresAt: z.union([
        z.string(),
        z.null()
    ]),
    refreshTokenExpiresAt: z.union([
        z.string(),
        z.null()
    ]),
    currentGameSessionDataId: z.union([
        z.string(),
        z.null()
    ]),
    currentAuthSessionDataId: z.union([
        z.string(),
        z.null()
    ]),
    avatarUrl: z.string(),
    role: z.string(),
    phpId: z.int(),
    isActive: z.boolean(),
    lastLoginAt: z.union([
        z.string(),
        z.null()
    ]),
    totalXpGained: z.int(),
    vipInfoId: z.union([
        z.string(),
        z.null()
    ]),
    createdAt: z.union([
        z.string(),
        z.null()
    ]),
    updatedAt: z.union([
        z.string(),
        z.null()
    ]),
    deletedAt: z.union([
        z.string(),
        z.null()
    ]),
    lastSeen: z.union([
        z.string(),
        z.null()
    ]),
    rtgBlockTime: z.int(),
    phone: z.union([
        z.string(),
        z.null()
    ]),
    path: z.array(z.string()),
    invitorId: z.union([
        z.string(),
        z.null()
    ]),
    avatar: z.string(),
    count_balance: z.int(),
    count_tournaments: z.int(),
    count_happyhours: z.int(),
    count_refunds: z.int(),
    count_progress: z.int(),
    count_daily_entries: z.int(),
    count_invite: z.int(),
    count_welcomebonus: z.int(),
    count_smsbonus: z.int(),
    count_wheelfortune: z.int(),
    address: z.int(),
    activeOperatorId: z.union([
        z.string(),
        z.null()
    ]),
    activeWalletId: z.union([
        z.string(),
        z.null()
    ]),
    inviteCode: z.union([
        z.string(),
        z.null()
    ])
});

export const zGetApiUsersByIdCheckData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.object({
        id: z.optional(z.union([
            z.number(),
            z.null()
        ]))
    })),
    query: z.optional(z.never())
});

/**
 * User status
 */
export const zGetApiUsersByIdCheckResponse = z.object({
    userCheck: z.boolean()
});

export const zPostApiUsersByIdVerifyEmailData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.object({
        id: z.optional(z.union([
            z.number(),
            z.null()
        ]))
    })),
    query: z.optional(z.never())
});

/**
 * Verification sent
 */
export const zPostApiUsersByIdVerifyEmailResponse = z.object({
    status: z.string(),
    time: z.number()
});

export const zGetApiUsersByIdInfoData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.object({
        id: z.optional(z.union([
            z.number(),
            z.null()
        ]))
    })),
    query: z.optional(z.never())
});

/**
 * User info
 */
export const zGetApiUsersByIdInfoResponse = z.object({
    status: z.enum([
        'ACTIVE',
        'INACTIVE',
        'BANNED'
    ]),
    id: z.string(),
    username: z.string(),
    email: z.union([
        z.string(),
        z.null()
    ]),
    passwordHash: z.union([
        z.string(),
        z.null()
    ]),
    accessToken: z.union([
        z.string(),
        z.null()
    ]),
    refreshToken: z.union([
        z.string(),
        z.null()
    ]),
    accessTokenExpiresAt: z.union([
        z.string(),
        z.null()
    ]),
    refreshTokenExpiresAt: z.union([
        z.string(),
        z.null()
    ]),
    currentGameSessionDataId: z.union([
        z.string(),
        z.null()
    ]),
    currentAuthSessionDataId: z.union([
        z.string(),
        z.null()
    ]),
    avatarUrl: z.string(),
    role: z.string(),
    phpId: z.int(),
    isActive: z.boolean(),
    lastLoginAt: z.union([
        z.string(),
        z.null()
    ]),
    totalXpGained: z.int(),
    vipInfoId: z.union([
        z.string(),
        z.null()
    ]),
    createdAt: z.union([
        z.string(),
        z.null()
    ]),
    updatedAt: z.union([
        z.string(),
        z.null()
    ]),
    deletedAt: z.union([
        z.string(),
        z.null()
    ]),
    lastSeen: z.union([
        z.string(),
        z.null()
    ]),
    rtgBlockTime: z.int(),
    phone: z.union([
        z.string(),
        z.null()
    ]),
    path: z.array(z.string()),
    invitorId: z.union([
        z.string(),
        z.null()
    ]),
    avatar: z.string(),
    count_balance: z.int(),
    count_tournaments: z.int(),
    count_happyhours: z.int(),
    count_refunds: z.int(),
    count_progress: z.int(),
    count_daily_entries: z.int(),
    count_invite: z.int(),
    count_welcomebonus: z.int(),
    count_smsbonus: z.int(),
    count_wheelfortune: z.int(),
    address: z.int(),
    activeOperatorId: z.union([
        z.string(),
        z.null()
    ]),
    activeWalletId: z.union([
        z.string(),
        z.null()
    ]),
    inviteCode: z.union([
        z.string(),
        z.null()
    ])
});

export const zGetApiUsersByIdVipinfoData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.object({
        id: z.optional(z.union([
            z.number(),
            z.null()
        ]))
    })),
    query: z.optional(z.never())
});

/**
 * VIP info
 */
export const zGetApiUsersByIdVipinfoResponse = z.object({
    vipLevel: z.union([
        z.number(),
        z.null()
    ])
});

export const zGetApiUserAmountData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

/**
 * Get user amount
 */
export const zGetApiUserAmountResponse = z.object({
    amount: z.number(),
    currency: z.object({
        fiat: z.boolean(),
        name: z.string(),
        symbol: z.string(),
        type: z.string()
    }),
    withdraw: z.number(),
    rate: z.number()
});

export const zPostApiUserChangeData = z.object({
    body: z.object({
        status: z.enum([
            'ACTIVE',
            'INACTIVE',
            'BANNED'
        ]),
        id: z.string(),
        username: z.string(),
        email: z.union([
            z.string(),
            z.null()
        ]),
        passwordHash: z.union([
            z.string(),
            z.null()
        ]),
        accessToken: z.union([
            z.string(),
            z.null()
        ]),
        refreshToken: z.union([
            z.string(),
            z.null()
        ]),
        accessTokenExpiresAt: z.union([
            z.string(),
            z.null()
        ]),
        refreshTokenExpiresAt: z.union([
            z.string(),
            z.null()
        ]),
        currentGameSessionDataId: z.union([
            z.string(),
            z.null()
        ]),
        currentAuthSessionDataId: z.union([
            z.string(),
            z.null()
        ]),
        avatarUrl: z.string(),
        role: z.string(),
        phpId: z.int(),
        isActive: z.boolean(),
        lastLoginAt: z.union([
            z.string(),
            z.null()
        ]),
        totalXpGained: z.int(),
        vipInfoId: z.union([
            z.string(),
            z.null()
        ]),
        createdAt: z.union([
            z.string(),
            z.null()
        ]),
        updatedAt: z.union([
            z.string(),
            z.null()
        ]),
        deletedAt: z.union([
            z.string(),
            z.null()
        ]),
        lastSeen: z.union([
            z.string(),
            z.null()
        ]),
        rtgBlockTime: z.int(),
        phone: z.union([
            z.string(),
            z.null()
        ]),
        path: z.array(z.string()),
        invitorId: z.union([
            z.string(),
            z.null()
        ]),
        avatar: z.string(),
        count_balance: z.int(),
        count_tournaments: z.int(),
        count_happyhours: z.int(),
        count_refunds: z.int(),
        count_progress: z.int(),
        count_daily_entries: z.int(),
        count_invite: z.int(),
        count_welcomebonus: z.int(),
        count_smsbonus: z.int(),
        count_wheelfortune: z.int(),
        address: z.int(),
        activeOperatorId: z.union([
            z.string(),
            z.null()
        ]),
        activeWalletId: z.union([
            z.string(),
            z.null()
        ]),
        inviteCode: z.union([
            z.string(),
            z.null()
        ])
    }),
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

/**
 * The updated user
 */
export const zPostApiUserChangeResponse = z.object({
    status: z.enum([
        'ACTIVE',
        'INACTIVE',
        'BANNED'
    ]),
    id: z.string(),
    username: z.string(),
    email: z.union([
        z.string(),
        z.null()
    ]),
    passwordHash: z.union([
        z.string(),
        z.null()
    ]),
    accessToken: z.union([
        z.string(),
        z.null()
    ]),
    refreshToken: z.union([
        z.string(),
        z.null()
    ]),
    accessTokenExpiresAt: z.union([
        z.string(),
        z.null()
    ]),
    refreshTokenExpiresAt: z.union([
        z.string(),
        z.null()
    ]),
    currentGameSessionDataId: z.union([
        z.string(),
        z.null()
    ]),
    currentAuthSessionDataId: z.union([
        z.string(),
        z.null()
    ]),
    avatarUrl: z.string(),
    role: z.string(),
    phpId: z.int(),
    isActive: z.boolean(),
    lastLoginAt: z.union([
        z.string(),
        z.null()
    ]),
    totalXpGained: z.int(),
    vipInfoId: z.union([
        z.string(),
        z.null()
    ]),
    createdAt: z.union([
        z.string(),
        z.null()
    ]),
    updatedAt: z.union([
        z.string(),
        z.null()
    ]),
    deletedAt: z.union([
        z.string(),
        z.null()
    ]),
    lastSeen: z.union([
        z.string(),
        z.null()
    ]),
    rtgBlockTime: z.int(),
    phone: z.union([
        z.string(),
        z.null()
    ]),
    path: z.array(z.string()),
    invitorId: z.union([
        z.string(),
        z.null()
    ]),
    avatar: z.string(),
    count_balance: z.int(),
    count_tournaments: z.int(),
    count_happyhours: z.int(),
    count_refunds: z.int(),
    count_progress: z.int(),
    count_daily_entries: z.int(),
    count_invite: z.int(),
    count_welcomebonus: z.int(),
    count_smsbonus: z.int(),
    count_wheelfortune: z.int(),
    address: z.int(),
    activeOperatorId: z.union([
        z.string(),
        z.null()
    ]),
    activeWalletId: z.union([
        z.string(),
        z.null()
    ]),
    inviteCode: z.union([
        z.string(),
        z.null()
    ])
});

export const zPostApiUserEmailData = z.object({
    body: z.object({
        email: z.email(),
        password: z.string()
    }),
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

/**
 * The updated user
 */
export const zPostApiUserEmailResponse = z.object({
    status: z.enum([
        'ACTIVE',
        'INACTIVE',
        'BANNED'
    ]),
    id: z.string(),
    username: z.string(),
    email: z.union([
        z.string(),
        z.null()
    ]),
    passwordHash: z.union([
        z.string(),
        z.null()
    ]),
    accessToken: z.union([
        z.string(),
        z.null()
    ]),
    refreshToken: z.union([
        z.string(),
        z.null()
    ]),
    accessTokenExpiresAt: z.union([
        z.string(),
        z.null()
    ]),
    refreshTokenExpiresAt: z.union([
        z.string(),
        z.null()
    ]),
    currentGameSessionDataId: z.union([
        z.string(),
        z.null()
    ]),
    currentAuthSessionDataId: z.union([
        z.string(),
        z.null()
    ]),
    avatarUrl: z.string(),
    role: z.string(),
    phpId: z.int(),
    isActive: z.boolean(),
    lastLoginAt: z.union([
        z.string(),
        z.null()
    ]),
    totalXpGained: z.int(),
    vipInfoId: z.union([
        z.string(),
        z.null()
    ]),
    createdAt: z.union([
        z.string(),
        z.null()
    ]),
    updatedAt: z.union([
        z.string(),
        z.null()
    ]),
    deletedAt: z.union([
        z.string(),
        z.null()
    ]),
    lastSeen: z.union([
        z.string(),
        z.null()
    ]),
    rtgBlockTime: z.int(),
    phone: z.union([
        z.string(),
        z.null()
    ]),
    path: z.array(z.string()),
    invitorId: z.union([
        z.string(),
        z.null()
    ]),
    avatar: z.string(),
    count_balance: z.int(),
    count_tournaments: z.int(),
    count_happyhours: z.int(),
    count_refunds: z.int(),
    count_progress: z.int(),
    count_daily_entries: z.int(),
    count_invite: z.int(),
    count_welcomebonus: z.int(),
    count_smsbonus: z.int(),
    count_wheelfortune: z.int(),
    address: z.int(),
    activeOperatorId: z.union([
        z.string(),
        z.null()
    ]),
    activeWalletId: z.union([
        z.string(),
        z.null()
    ]),
    inviteCode: z.union([
        z.string(),
        z.null()
    ])
});

export const zPostApiUserPasswordData = z.object({
    body: z.object({
        now_password: z.string(),
        new_password: z.string()
    }),
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

/**
 * Password updated
 */
export const zPostApiUserPasswordResponse = z.object({
    message: z.string()
});

export const zPostApiUserSuspendData = z.object({
    body: z.object({
        time: z.number()
    }),
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

/**
 * User suspended
 */
export const zPostApiUserSuspendResponse = z.object({
    message: z.string()
});

export const zGetApiTransactionsDepositsTop10Data = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

/**
 * Top 10 deposits for the authenticated user
 */
export const zGetApiTransactionsDepositsTop10Response = z.array(z.object({
    id: z.string(),
    processedAt: z.union([
        z.string(),
        z.null()
    ]),
    walletId: z.union([
        z.string(),
        z.null()
    ]),
    type: z.string(),
    status: z.string(),
    amount: z.int(),
    netAmount: z.union([
        z.int(),
        z.null()
    ]),
    currencyName: z.union([
        z.string(),
        z.null()
    ]),
    feeAmount: z.union([
        z.int(),
        z.null()
    ]),
    productId: z.union([
        z.string(),
        z.null()
    ]),
    paymentMethod: z.union([
        z.string(),
        z.null()
    ]),
    balanceBefore: z.union([
        z.int(),
        z.null()
    ]),
    balanceAfter: z.union([
        z.int(),
        z.null()
    ]),
    bonusBalanceBefore: z.union([
        z.int(),
        z.null()
    ]),
    bonusBalanceAfter: z.union([
        z.int(),
        z.null()
    ]),
    bonusAmount: z.union([
        z.int(),
        z.null()
    ]),
    wageringRequirement: z.union([
        z.int(),
        z.null()
    ]),
    wageringProgress: z.union([
        z.int(),
        z.null()
    ]),
    description: z.union([
        z.string(),
        z.null()
    ]),
    provider: z.union([
        z.string(),
        z.null()
    ]),
    providerTxId: z.union([
        z.string(),
        z.null()
    ]),
    relatedGameId: z.union([
        z.string(),
        z.null()
    ]),
    relatedRoundId: z.union([
        z.string(),
        z.null()
    ]),
    createdAt: z.union([
        z.string(),
        z.null()
    ]),
    updatedAt: z.union([
        z.string(),
        z.null()
    ]),
    operatorId: z.union([
        z.string(),
        z.null()
    ]),
    userId: z.string()
}));

export const zPostApiTransactionsDepositsData = z.object({
    body: z.object({
        id: z.string(),
        processedAt: z.union([
            z.string(),
            z.null()
        ]),
        walletId: z.union([
            z.string(),
            z.null()
        ]),
        type: z.string(),
        status: z.string(),
        amount: z.int(),
        netAmount: z.union([
            z.int(),
            z.null()
        ]),
        currencyName: z.union([
            z.string(),
            z.null()
        ]),
        feeAmount: z.union([
            z.int(),
            z.null()
        ]),
        productId: z.union([
            z.string(),
            z.null()
        ]),
        paymentMethod: z.union([
            z.string(),
            z.null()
        ]),
        balanceBefore: z.union([
            z.int(),
            z.null()
        ]),
        balanceAfter: z.union([
            z.int(),
            z.null()
        ]),
        bonusBalanceBefore: z.union([
            z.int(),
            z.null()
        ]),
        bonusBalanceAfter: z.union([
            z.int(),
            z.null()
        ]),
        bonusAmount: z.union([
            z.int(),
            z.null()
        ]),
        wageringRequirement: z.union([
            z.int(),
            z.null()
        ]),
        wageringProgress: z.union([
            z.int(),
            z.null()
        ]),
        description: z.union([
            z.string(),
            z.null()
        ]),
        provider: z.union([
            z.string(),
            z.null()
        ]),
        providerTxId: z.union([
            z.string(),
            z.null()
        ]),
        relatedGameId: z.union([
            z.string(),
            z.null()
        ]),
        relatedRoundId: z.union([
            z.string(),
            z.null()
        ]),
        createdAt: z.union([
            z.string(),
            z.null()
        ]),
        updatedAt: z.union([
            z.string(),
            z.null()
        ]),
        operatorId: z.union([
            z.string(),
            z.null()
        ]),
        userId: z.string()
    }),
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

/**
 * The created deposit
 */
export const zPostApiTransactionsDepositsResponse = z.object({
    deposit: z.object({
        id: z.string(),
        processedAt: z.union([
            z.string(),
            z.null()
        ]),
        walletId: z.union([
            z.string(),
            z.null()
        ]),
        type: z.string(),
        status: z.string(),
        amount: z.int(),
        netAmount: z.union([
            z.int(),
            z.null()
        ]),
        currencyName: z.union([
            z.string(),
            z.null()
        ]),
        feeAmount: z.union([
            z.int(),
            z.null()
        ]),
        productId: z.union([
            z.string(),
            z.null()
        ]),
        paymentMethod: z.union([
            z.string(),
            z.null()
        ]),
        balanceBefore: z.union([
            z.int(),
            z.null()
        ]),
        balanceAfter: z.union([
            z.int(),
            z.null()
        ]),
        bonusBalanceBefore: z.union([
            z.int(),
            z.null()
        ]),
        bonusBalanceAfter: z.union([
            z.int(),
            z.null()
        ]),
        bonusAmount: z.union([
            z.int(),
            z.null()
        ]),
        wageringRequirement: z.union([
            z.int(),
            z.null()
        ]),
        wageringProgress: z.union([
            z.int(),
            z.null()
        ]),
        description: z.union([
            z.string(),
            z.null()
        ]),
        provider: z.union([
            z.string(),
            z.null()
        ]),
        providerTxId: z.union([
            z.string(),
            z.null()
        ]),
        relatedGameId: z.union([
            z.string(),
            z.null()
        ]),
        relatedRoundId: z.union([
            z.string(),
            z.null()
        ]),
        createdAt: z.union([
            z.string(),
            z.null()
        ]),
        updatedAt: z.union([
            z.string(),
            z.null()
        ]),
        operatorId: z.union([
            z.string(),
            z.null()
        ]),
        userId: z.string()
    })
});

export const zGetApiTransactionsDepositsByIdData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        id: z.string()
    }),
    query: z.optional(z.never())
});

/**
 * The deposit details
 */
export const zGetApiTransactionsDepositsByIdResponse = z.object({
    deposit: z.object({
        id: z.string(),
        processedAt: z.union([
            z.string(),
            z.null()
        ]),
        walletId: z.union([
            z.string(),
            z.null()
        ]),
        type: z.string(),
        status: z.string(),
        amount: z.int(),
        netAmount: z.union([
            z.int(),
            z.null()
        ]),
        currencyName: z.union([
            z.string(),
            z.null()
        ]),
        feeAmount: z.union([
            z.int(),
            z.null()
        ]),
        productId: z.union([
            z.string(),
            z.null()
        ]),
        paymentMethod: z.union([
            z.string(),
            z.null()
        ]),
        balanceBefore: z.union([
            z.int(),
            z.null()
        ]),
        balanceAfter: z.union([
            z.int(),
            z.null()
        ]),
        bonusBalanceBefore: z.union([
            z.int(),
            z.null()
        ]),
        bonusBalanceAfter: z.union([
            z.int(),
            z.null()
        ]),
        bonusAmount: z.union([
            z.int(),
            z.null()
        ]),
        wageringRequirement: z.union([
            z.int(),
            z.null()
        ]),
        wageringProgress: z.union([
            z.int(),
            z.null()
        ]),
        description: z.union([
            z.string(),
            z.null()
        ]),
        provider: z.union([
            z.string(),
            z.null()
        ]),
        providerTxId: z.union([
            z.string(),
            z.null()
        ]),
        relatedGameId: z.union([
            z.string(),
            z.null()
        ]),
        relatedRoundId: z.union([
            z.string(),
            z.null()
        ]),
        createdAt: z.union([
            z.string(),
            z.null()
        ]),
        updatedAt: z.union([
            z.string(),
            z.null()
        ]),
        operatorId: z.union([
            z.string(),
            z.null()
        ]),
        userId: z.string()
    })
});

export const zPatchApiTransactionsDepositsByIdStatusData = z.object({
    body: z.object({
        id: z.string(),
        processedAt: z.union([
            z.string(),
            z.null()
        ]),
        walletId: z.union([
            z.string(),
            z.null()
        ]),
        type: z.string(),
        status: z.string(),
        amount: z.int(),
        netAmount: z.union([
            z.int(),
            z.null()
        ]),
        currencyName: z.union([
            z.string(),
            z.null()
        ]),
        feeAmount: z.union([
            z.int(),
            z.null()
        ]),
        productId: z.union([
            z.string(),
            z.null()
        ]),
        paymentMethod: z.union([
            z.string(),
            z.null()
        ]),
        balanceBefore: z.union([
            z.int(),
            z.null()
        ]),
        balanceAfter: z.union([
            z.int(),
            z.null()
        ]),
        bonusBalanceBefore: z.union([
            z.int(),
            z.null()
        ]),
        bonusBalanceAfter: z.union([
            z.int(),
            z.null()
        ]),
        bonusAmount: z.union([
            z.int(),
            z.null()
        ]),
        wageringRequirement: z.union([
            z.int(),
            z.null()
        ]),
        wageringProgress: z.union([
            z.int(),
            z.null()
        ]),
        description: z.union([
            z.string(),
            z.null()
        ]),
        provider: z.union([
            z.string(),
            z.null()
        ]),
        providerTxId: z.union([
            z.string(),
            z.null()
        ]),
        relatedGameId: z.union([
            z.string(),
            z.null()
        ]),
        relatedRoundId: z.union([
            z.string(),
            z.null()
        ]),
        createdAt: z.union([
            z.string(),
            z.null()
        ]),
        updatedAt: z.union([
            z.string(),
            z.null()
        ]),
        operatorId: z.union([
            z.string(),
            z.null()
        ]),
        userId: z.string()
    }),
    path: z.object({
        id: z.string()
    }),
    query: z.optional(z.never())
});

/**
 * The updated deposit
 */
export const zPatchApiTransactionsDepositsByIdStatusResponse = z.object({
    deposit: z.object({
        id: z.string(),
        processedAt: z.union([
            z.string(),
            z.null()
        ]),
        walletId: z.union([
            z.string(),
            z.null()
        ]),
        type: z.string(),
        status: z.string(),
        amount: z.int(),
        netAmount: z.union([
            z.int(),
            z.null()
        ]),
        currencyName: z.union([
            z.string(),
            z.null()
        ]),
        feeAmount: z.union([
            z.int(),
            z.null()
        ]),
        productId: z.union([
            z.string(),
            z.null()
        ]),
        paymentMethod: z.union([
            z.string(),
            z.null()
        ]),
        balanceBefore: z.union([
            z.int(),
            z.null()
        ]),
        balanceAfter: z.union([
            z.int(),
            z.null()
        ]),
        bonusBalanceBefore: z.union([
            z.int(),
            z.null()
        ]),
        bonusBalanceAfter: z.union([
            z.int(),
            z.null()
        ]),
        bonusAmount: z.union([
            z.int(),
            z.null()
        ]),
        wageringRequirement: z.union([
            z.int(),
            z.null()
        ]),
        wageringProgress: z.union([
            z.int(),
            z.null()
        ]),
        description: z.union([
            z.string(),
            z.null()
        ]),
        provider: z.union([
            z.string(),
            z.null()
        ]),
        providerTxId: z.union([
            z.string(),
            z.null()
        ]),
        relatedGameId: z.union([
            z.string(),
            z.null()
        ]),
        relatedRoundId: z.union([
            z.string(),
            z.null()
        ]),
        createdAt: z.union([
            z.string(),
            z.null()
        ]),
        updatedAt: z.union([
            z.string(),
            z.null()
        ]),
        operatorId: z.union([
            z.string(),
            z.null()
        ]),
        userId: z.string()
    })
});

export const zGetApiRewardStatusData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

/**
 * Reward status retrieved successfully
 */
export const zGetApiRewardStatusResponse = z.object({
    commissionReward: z.number(),
    commissionAvailable: z.number(),
    referralReward: z.number(),
    referralAvailable: z.number()
});

export const zPostApiRewardGetLogData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

export const zGetApiRewardActivityData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

/**
 * Reward activity retrieved successfully
 */
export const zGetApiRewardActivityResponse = z.array(z.object({
    id: z.string(),
    invitorId: z.string(),
    childId: z.string(),
    currency: z.string(),
    referralCode: z.string(),
    betAmount: z.number(),
    commissionAmount: z.number(),
    commissionWager: z.number(),
    totalReferralAmount: z.number(),
    referralAmount: z.number(),
    referralWager: z.number(),
    lastVipLevelAmount: z.number(),
    createdAt: z.string(),
    updatedAt: z.string()
}));

export const zGetApiRewardDashboardData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

/**
 * Reward dashboard retrieved successfully
 */
export const zGetApiRewardDashboardResponse = z.object({
    totalCommissionReward: z.optional(z.number()),
    totalCommissionAmount: z.optional(z.number()),
    totalAvailableReferral: z.optional(z.number()),
    friends: z.number(),
    code: z.string()
});

export const zPostApiRewardConvertData = z.object({
    body: z.object({
        type: z.enum([
            'commission',
            'referral'
        ])
    }),
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

/**
 * Reward conversion processed successfully
 */
export const zPostApiRewardConvertResponse = z.object({
    status: z.union([
        z.boolean(),
        z.string()
    ])
});

export const zGetApiWalletsData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

/**
 * Active wallet summary or null if none is active
 */
export const zGetApiWalletsResponse = z.object({
    id: z.string(),
    balance: z.int(),
    paymentMethod: z.string(),
    currency: z.string(),
    address: z.union([
        z.string(),
        z.null()
    ]),
    cashtag: z.union([
        z.string(),
        z.null()
    ]),
    operatorId: z.string(),
    lastUsedAt: z.union([
        z.string(),
        z.null()
    ]),
    createdAt: z.union([
        z.string(),
        z.null()
    ]),
    updatedAt: z.union([
        z.string(),
        z.null()
    ]),
    userId: z.string(),
    isActive: z.boolean()
});

export const zPostApiWalletsCashtagData = z.object({
    body: z.object({
        cashtag: z.string()
    }),
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

/**
 * cashtag updated
 */
export const zPostApiWalletsCashtagResponse = z.object({
    cashtag: z.string()
});

export const zGetApiWalletsHistoryData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

/**
 * All wallets for the authenticated user
 */
export const zGetApiWalletsHistoryResponse = z.object({
    wallets: z.array(z.object({
        id: z.string(),
        balance: z.int(),
        paymentMethod: z.string(),
        currency: z.string(),
        address: z.union([
            z.string(),
            z.null()
        ]),
        cashtag: z.union([
            z.string(),
            z.null()
        ]),
        operatorId: z.string(),
        lastUsedAt: z.union([
            z.string(),
            z.null()
        ]),
        createdAt: z.union([
            z.string(),
            z.null()
        ]),
        updatedAt: z.union([
            z.string(),
            z.null()
        ]),
        userId: z.string(),
        isActive: z.boolean()
    }))
});

export const zPostApiWalletsSwitchOperatorData = z.object({
    body: z.object({
        operatorId: z.string(),
        idempotencyKey: z.optional(z.string())
    }),
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

/**
 * The newly activated wallet
 */
export const zPostApiWalletsSwitchOperatorResponse = z.object({
    wallet: z.object({
        id: z.string(),
        balance: z.int(),
        paymentMethod: z.string(),
        currency: z.string(),
        address: z.union([
            z.string(),
            z.null()
        ]),
        cashtag: z.union([
            z.string(),
            z.null()
        ]),
        operatorId: z.string(),
        lastUsedAt: z.union([
            z.string(),
            z.null()
        ]),
        createdAt: z.union([
            z.string(),
            z.null()
        ]),
        updatedAt: z.union([
            z.string(),
            z.null()
        ]),
        userId: z.string(),
        isActive: z.boolean()
    })
});

export const zGetApiReferralCodeStatusData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

/**
 * Referral status retrieved successfully
 */
export const zGetApiReferralCodeStatusResponse = z.object({
    friendCount: z.number(),
    referralCount: z.number()
});

export const zGetApiReferralCodeData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

/**
 * Referal codes response list
 */
export const zGetApiReferralCodeResponse = z.array(z.object({
    id: z.string(),
    code: z.string(),
    name: z.string(),
    commissionRate: z.string(),
    userId: z.string(),
    createdAt: z.string(),
    updatedAt: z.string()
}));

export const zPostApiReferralCodeData = z.object({
    body: z.object({
        name: z.string().min(1),
        commissionRate: z.optional(z.number())
    }),
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

export const zDeleteApiReferralCodeReferralCodeIdData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        referralCodeId: z.string()
    }),
    query: z.optional(z.never())
});

/**
 * Referral code deleted successfully
 */
export const zDeleteApiReferralCodeReferralCodeIdResponse = z.void();

export const zPostApiAuthLoginData = z.object({
    body: z.object({
        password: z.string(),
        username: z.string()
    }),
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

export const zPostApiAuthSignupData = z.object({
    body: z.object({
        username: z.string(),
        password: z.string(),
        referralCode: z.optional(z.string()).default('system'),
        operatorId: z.optional(z.string()).default('clxjv0w2z0000356s1szacrqs')
    }),
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

/**
 * The created user object and sets an access token cookie.
 */
export const zPostApiAuthSignupResponse = z.object({
    status: z.enum([
        'ACTIVE',
        'INACTIVE',
        'BANNED'
    ]),
    id: z.string(),
    username: z.string(),
    email: z.union([
        z.string(),
        z.null()
    ]),
    passwordHash: z.union([
        z.string(),
        z.null()
    ]),
    accessToken: z.union([
        z.string(),
        z.null()
    ]),
    refreshToken: z.union([
        z.string(),
        z.null()
    ]),
    accessTokenExpiresAt: z.union([
        z.string(),
        z.null()
    ]),
    refreshTokenExpiresAt: z.union([
        z.string(),
        z.null()
    ]),
    currentGameSessionDataId: z.union([
        z.string(),
        z.null()
    ]),
    currentAuthSessionDataId: z.union([
        z.string(),
        z.null()
    ]),
    avatarUrl: z.string(),
    role: z.string(),
    phpId: z.int(),
    isActive: z.boolean(),
    lastLoginAt: z.union([
        z.string(),
        z.null()
    ]),
    totalXpGained: z.int(),
    vipInfoId: z.union([
        z.string(),
        z.null()
    ]),
    createdAt: z.union([
        z.string(),
        z.null()
    ]),
    updatedAt: z.union([
        z.string(),
        z.null()
    ]),
    deletedAt: z.union([
        z.string(),
        z.null()
    ]),
    lastSeen: z.union([
        z.string(),
        z.null()
    ]),
    rtgBlockTime: z.int(),
    phone: z.union([
        z.string(),
        z.null()
    ]),
    path: z.array(z.string()),
    invitorId: z.union([
        z.string(),
        z.null()
    ]),
    avatar: z.string(),
    count_balance: z.int(),
    count_tournaments: z.int(),
    count_happyhours: z.int(),
    count_refunds: z.int(),
    count_progress: z.int(),
    count_daily_entries: z.int(),
    count_invite: z.int(),
    count_welcomebonus: z.int(),
    count_smsbonus: z.int(),
    count_wheelfortune: z.int(),
    address: z.int(),
    activeOperatorId: z.union([
        z.string(),
        z.null()
    ]),
    activeWalletId: z.union([
        z.string(),
        z.null()
    ]),
    inviteCode: z.union([
        z.string(),
        z.null()
    ])
});

export const zPostApiAuthLogoutData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

/**
 * Logout successful
 */
export const zPostApiAuthLogoutResponse = z.object({
    message: z.string()
});

export const zGetApiAuthMeData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

/**
 * The current user session
 */
export const zGetApiAuthMeResponse = z.object({
    user: z.object({
        status: z.enum([
            'ACTIVE',
            'INACTIVE',
            'BANNED'
        ]),
        id: z.string(),
        username: z.string(),
        email: z.union([
            z.string(),
            z.null()
        ]),
        passwordHash: z.union([
            z.string(),
            z.null()
        ]),
        accessToken: z.union([
            z.string(),
            z.null()
        ]),
        refreshToken: z.union([
            z.string(),
            z.null()
        ]),
        accessTokenExpiresAt: z.union([
            z.string(),
            z.null()
        ]),
        refreshTokenExpiresAt: z.union([
            z.string(),
            z.null()
        ]),
        currentGameSessionDataId: z.union([
            z.string(),
            z.null()
        ]),
        currentAuthSessionDataId: z.union([
            z.string(),
            z.null()
        ]),
        avatarUrl: z.string(),
        role: z.string(),
        phpId: z.int(),
        isActive: z.boolean(),
        lastLoginAt: z.union([
            z.string(),
            z.null()
        ]),
        totalXpGained: z.int(),
        vipInfoId: z.union([
            z.string(),
            z.null()
        ]),
        createdAt: z.union([
            z.string(),
            z.null()
        ]),
        updatedAt: z.union([
            z.string(),
            z.null()
        ]),
        deletedAt: z.union([
            z.string(),
            z.null()
        ]),
        lastSeen: z.union([
            z.string(),
            z.null()
        ]),
        rtgBlockTime: z.int(),
        phone: z.union([
            z.string(),
            z.null()
        ]),
        path: z.array(z.string()),
        invitorId: z.union([
            z.string(),
            z.null()
        ]),
        avatar: z.string(),
        count_balance: z.int(),
        count_tournaments: z.int(),
        count_happyhours: z.int(),
        count_refunds: z.int(),
        count_progress: z.int(),
        count_daily_entries: z.int(),
        count_invite: z.int(),
        count_welcomebonus: z.int(),
        count_smsbonus: z.int(),
        count_wheelfortune: z.int(),
        address: z.int(),
        activeOperatorId: z.union([
            z.string(),
            z.null()
        ]),
        activeWalletId: z.union([
            z.string(),
            z.null()
        ]),
        inviteCode: z.union([
            z.string(),
            z.null()
        ])
    }),
    authSession: z.object({
        status: z.enum([
            'ACTIVE',
            'COMPLETED',
            'EXPIRED',
            'ABANDONED',
            'TIMEOUT',
            'OTP_PENDING'
        ]),
        id: z.string(),
        userId: z.string(),
        ipAddress: z.union([
            z.string(),
            z.null()
        ]),
        userAgent: z.union([
            z.string(),
            z.null()
        ]),
        deviceId: z.union([
            z.string(),
            z.null()
        ]),
        createdAt: z.union([
            z.string(),
            z.null()
        ]),
        expiresAt: z.union([
            z.string(),
            z.null()
        ]),
        lastSeen: z.union([
            z.string(),
            z.null()
        ]),
        otp: z.union([
            z.string(),
            z.null()
        ]),
        accessToken: z.union([
            z.string(),
            z.null()
        ]),
        phpToken: z.union([
            z.string(),
            z.null()
        ])
    }),
    wallet: z.object({
        id: z.string(),
        balance: z.int(),
        paymentMethod: z.string(),
        currency: z.string(),
        address: z.union([
            z.string(),
            z.null()
        ]),
        cashtag: z.union([
            z.string(),
            z.null()
        ]),
        operatorId: z.string(),
        lastUsedAt: z.union([
            z.string(),
            z.null()
        ]),
        createdAt: z.union([
            z.string(),
            z.null()
        ]),
        updatedAt: z.union([
            z.string(),
            z.null()
        ]),
        userId: z.string(),
        isActive: z.boolean()
    }),
    vipInfo: z.object({
        id: z.string(),
        level: z.int(),
        xp: z.int(),
        totalXp: z.int(),
        userId: z.string(),
        currentRankid: z.union([
            z.int(),
            z.null()
        ]),
        createdAt: z.union([
            z.string(),
            z.null()
        ]),
        updatedAt: z.union([
            z.string(),
            z.null()
        ])
    }),
    operator: z.object({
        id: z.string(),
        name: z.string(),
        operatorSecret: z.string(),
        operatorAccess: z.string(),
        callbackUrl: z.string(),
        isActive: z.boolean(),
        allowedIps: z.string(),
        description: z.union([
            z.string(),
            z.null()
        ]),
        productIds: z.union([
            z.string(),
            z.null()
        ]),
        balance: z.int(),
        netRevenue: z.int(),
        acceptedPayments: z.array(z.string()),
        ownerId: z.union([
            z.string(),
            z.null()
        ]),
        lastUsedAt: z.union([
            z.string(),
            z.null()
        ]),
        createdAt: z.union([
            z.string(),
            z.null()
        ]),
        updatedAt: z.union([
            z.string(),
            z.null()
        ]),
        upfrontBankCredits: z.int(),
        platformFeeRate: z.string(),
        loyaltyContributionRate: z.string()
    }),
    token: z.string()
});

export const zGetApiGamesAllData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

/**
 * Top 10 deposits for the authenticated user
 */
export const zGetApiGamesAllResponse = z.array(z.object({
    id: z.string(),
    name: z.string(),
    title: z.union([
        z.string(),
        z.null()
    ]),
    description: z.union([
        z.string(),
        z.null()
    ]),
    category: z.string(),
    tags: z.union([
        z.string(),
        z.null()
    ]),
    thumbnailUrl: z.union([
        z.string(),
        z.null()
    ]),
    bannerUrl: z.union([
        z.string(),
        z.null()
    ]),
    developer: z.string(),
    providerId: z.union([
        z.string(),
        z.null()
    ]),
    totalWagered: z.union([
        z.int(),
        z.null()
    ]),
    totalWon: z.union([
        z.int(),
        z.null()
    ]),
    targetRtp: z.union([
        z.int(),
        z.null()
    ]),
    isFeatured: z.union([
        z.boolean(),
        z.null()
    ]),
    statIn: z.int(),
    statOut: z.int(),
    isActive: z.boolean(),
    operatorId: z.union([
        z.string(),
        z.null()
    ]),
    version: z.union([
        z.string(),
        z.null()
    ]),
    jpgIds: z.array(z.string()),
    isHorizontal: z.boolean(),
    jpgId: z.union([
        z.string(),
        z.null()
    ]),
    label: z.union([
        z.string(),
        z.null()
    ]),
    device: z.union([
        z.int(),
        z.null()
    ]),
    gamebank: z.union([
        z.string(),
        z.null()
    ]),
    linesPercentConfigSpin: z.union([
        z.string(),
        z.null()
    ]),
    linesPercentConfigSpinBonus: z.union([
        z.string(),
        z.null()
    ]),
    linesPercentConfigBonus: z.union([
        z.string(),
        z.null()
    ]),
    linesPercentConfigBonusBonus: z.union([
        z.string(),
        z.null()
    ]),
    rezerv: z.union([
        z.string(),
        z.null()
    ]),
    cask: z.union([
        z.string(),
        z.null()
    ]),
    advanced: z.union([
        z.string(),
        z.null()
    ]),
    bet: z.union([
        z.string(),
        z.null()
    ]),
    scaleMode: z.union([
        z.string(),
        z.null()
    ]),
    slotViewState: z.union([
        z.string(),
        z.null()
    ]),
    view: z.union([
        z.string(),
        z.null()
    ]),
    denomination: z.union([
        z.string(),
        z.null()
    ]),
    categoryTemp: z.union([
        z.string(),
        z.null()
    ]),
    originalId: z.union([
        z.string(),
        z.null()
    ]),
    bids: z.array(z.string()),
    rtpStatIn: z.union([
        z.int(),
        z.null()
    ]),
    rtpStatOut: z.union([
        z.int(),
        z.null()
    ]),
    currentRtp: z.union([
        z.string(),
        z.null()
    ]),
    createdAt: z.union([
        z.string(),
        z.null()
    ]),
    updatedAt: z.union([
        z.string(),
        z.null()
    ]),
    status: z.int()
}));

export const zGetApiGamesSearchData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.object({
        game_categories_slug: z.optional(z.string()),
        page: z.optional(z.string()),
        limit: z.optional(z.string())
    }))
});

/**
 * A list of games matching the search criteria
 */
export const zGetApiGamesSearchResponse = z.object({
    gameId: z.string()
});

export const zPostApiGamesByIdEnterData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        id: z.string()
    }),
    query: z.optional(z.never())
});

/**
 * Game session details
 */
export const zPostApiGamesByIdEnterResponse = z.object({
    webUrl: z.string(),
    gameConfig: z.object({
        authToken: z.string(),
        gameSessionId: z.string(),
        userId: z.string(),
        gameName: z.string(),
        lobbyUrl: z.string(),
        depositUrl: z.string(),
        operator: z.optional(z.string()),
        provider: z.optional(z.string()),
        lang: z.optional(z.string()),
        currency: z.optional(z.string()),
        mode: z.optional(z.string()),
        device: z.optional(z.string()),
        rgsApiBase: z.optional(z.string()),
        cdn: z.optional(z.string()),
        baseCdn: z.optional(z.string())
    })
});

export const zPostApiGamesLeaveData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

export const zGetApiGamesCheckSessionData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

/**
 * The user object and sets an access token cookie.
 */
export const zGetApiGamesCheckSessionResponse = z.object({
    gameId: z.string()
});

export const zGetApiGamespinsTopwinsData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

/**
 * The list of topwins
 */
export const zGetApiGamespinsTopwinsResponse = z.array(z.object({
    id: z.string(),
    playerName: z.union([
        z.string(),
        z.null()
    ]),
    gameName: z.union([
        z.string(),
        z.null()
    ]),
    gameId: z.union([
        z.string(),
        z.null()
    ]),
    spinData: z.union([
        z.string(),
        z.null()
    ]),
    grossWinAmount: z.number(),
    wagerAmount: z.number(),
    spinNumber: z.int(),
    playerAvatar: z.union([
        z.string(),
        z.null()
    ]),
    currencyId: z.union([
        z.string(),
        z.null()
    ]),
    sessionId: z.string(),
    userId: z.union([
        z.string(),
        z.null()
    ]),
    createdAt: z.union([
        z.string(),
        z.null()
    ]),
    updatedAt: z.union([
        z.string(),
        z.null()
    ]),
    occurredAt: z.union([
        z.string(),
        z.null()
    ]),
    sessionDataId: z.union([
        z.string(),
        z.null()
    ]),
    type: z.union([
        z.string(),
        z.null()
    ]),
    operatorId: z.union([
        z.string(),
        z.null()
    ]),
    status: z.union([
        z.string(),
        z.null()
    ]),
    playerBalanceAtStart: z.int(),
    playerBalance: z.int(),
    gamePlayerWinTotalTodayid: z.int(),
    playerBetTotalToday: z.int(),
    sessionTotalWinAmount: z.int(),
    sessionTotalBetAmount: z.int(),
    gameSessionRtp: z.int(),
    playerRtpToday: z.int(),
    winAmount: z.int(),
    betAmount: z.int()
}));

export const zGetApiVipRanksData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

/**
 * The list of VIP ranks
 */
export const zGetApiVipRanksResponse = z.array(z.object({
    id: z.int(),
    name: z.string(),
    minXp: z.int(),
    icon: z.string(),
    dailyCashbackMax: z.int(),
    monthlyCashbackMax: z.int(),
    wagerBonusCoinPct: z.int(),
    purchaseBonusCoinPct: z.int(),
    levelUpBonusCoinPct: z.int(),
    vipSpinMaxAmount: z.int(),
    hasConcierge: z.boolean(),
    hasVipLoungeAccess: z.boolean(),
    isInvitationOnly: z.boolean()
}));

export const zPostApiVipRanksData = z.object({
    body: z.object({
        id: z.int(),
        name: z.string(),
        minXp: z.int(),
        icon: z.string(),
        dailyCashbackMax: z.int(),
        monthlyCashbackMax: z.int(),
        wagerBonusCoinPct: z.int(),
        purchaseBonusCoinPct: z.int(),
        levelUpBonusCoinPct: z.int(),
        vipSpinMaxAmount: z.int(),
        hasConcierge: z.boolean(),
        hasVipLoungeAccess: z.boolean(),
        isInvitationOnly: z.boolean()
    }),
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

/**
 * The created VIP rank
 */
export const zPostApiVipRanksResponse = z.object({
    id: z.int(),
    name: z.string(),
    minXp: z.int(),
    icon: z.string(),
    dailyCashbackMax: z.int(),
    monthlyCashbackMax: z.int(),
    wagerBonusCoinPct: z.int(),
    purchaseBonusCoinPct: z.int(),
    levelUpBonusCoinPct: z.int(),
    vipSpinMaxAmount: z.int(),
    hasConcierge: z.boolean(),
    hasVipLoungeAccess: z.boolean(),
    isInvitationOnly: z.boolean()
});

export const zGetApiVipLevelsData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

/**
 * The list of VIP levels
 */
export const zGetApiVipLevelsResponse = z.array(z.object({
    id: z.string(),
    parentId: z.int(),
    minXpNeeded: z.int(),
    levelNumber: z.int(),
    levelName: z.string(),
    spinBonusMultiplier: z.number(),
    settingId: z.union([
        z.int(),
        z.null()
    ]),
    levelUpBonusAmount: z.union([
        z.int(),
        z.null()
    ])
}));

export const zPostApiVipLevelsData = z.object({
    body: z.object({
        id: z.string(),
        parentId: z.int(),
        minXpNeeded: z.int(),
        levelNumber: z.int(),
        levelName: z.string(),
        spinBonusMultiplier: z.number(),
        settingId: z.union([
            z.int(),
            z.null()
        ]),
        levelUpBonusAmount: z.union([
            z.int(),
            z.null()
        ])
    }),
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

/**
 * The created VIP level
 */
export const zPostApiVipLevelsResponse = z.object({
    id: z.string(),
    parentId: z.int(),
    minXpNeeded: z.int(),
    levelNumber: z.int(),
    levelName: z.string(),
    spinBonusMultiplier: z.number(),
    settingId: z.union([
        z.int(),
        z.null()
    ]),
    levelUpBonusAmount: z.union([
        z.int(),
        z.null()
    ])
});

export const zPostApiVipCashbackData = z.object({
    body: z.object({
        id: z.string(),
        userId: z.union([
            z.string(),
            z.null()
        ]),
        amount: z.int(),
        currency: z.string(),
        tiersName: z.string(),
        type: z.string(),
        createdAt: z.union([
            z.string(),
            z.null()
        ])
    }),
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

/**
 * The created VIP cashback
 */
export const zPostApiVipCashbackResponse = z.object({
    id: z.string(),
    userId: z.union([
        z.string(),
        z.null()
    ]),
    amount: z.int(),
    currency: z.string(),
    tiersName: z.string(),
    type: z.string(),
    createdAt: z.union([
        z.string(),
        z.null()
    ])
});

export const zGetApiVipCashbackByUserIdData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        userId: z.string()
    }),
    query: z.optional(z.never())
});

/**
 * The list of VIP cashbacks
 */
export const zGetApiVipCashbackByUserIdResponse = z.array(z.object({
    id: z.string(),
    userId: z.union([
        z.string(),
        z.null()
    ]),
    amount: z.int(),
    currency: z.string(),
    tiersName: z.string(),
    type: z.string(),
    createdAt: z.union([
        z.string(),
        z.null()
    ])
}));

export const zPostApiVipCashbackMonthlyTriggerData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

/**
 * The monthly cashback trigger response
 */
export const zPostApiVipCashbackMonthlyTriggerResponse = z.object({
    message: z.string()
});

export const zGetApiVipBonusByUserIdData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        userId: z.string()
    }),
    query: z.optional(z.never())
});

/**
 * The available level up bonus
 */
export const zGetApiVipBonusByUserIdResponse = z.object({
    id: z.string(),
    userId: z.string(),
    amount: z.int(),
    levelName: z.string(),
    levelXp: z.int(),
    createdAt: z.union([
        z.string(),
        z.null()
    ])
});

export const zPostApiVipLevelupCalculateData = z.object({
    body: z.object({
        userId: z.string(),
        turnover: z.number()
    }),
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

/**
 * The level up calculation response
 */
export const zPostApiVipLevelupCalculateResponse = z.object({
    message: z.string()
});

export const zPostApiVipSpinRewardData = z.object({
    body: z.object({
        id: z.string(),
        userId: z.string(),
        amount: z.int(),
        currency: z.string(),
        createdAt: z.union([
            z.string(),
            z.null()
        ])
    }),
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

/**
 * The created VIP spin reward
 */
export const zPostApiVipSpinRewardResponse = z.object({
    id: z.string(),
    userId: z.string(),
    amount: z.int(),
    currency: z.string(),
    createdAt: z.union([
        z.string(),
        z.null()
    ])
});

export const zGetApiVipSpinRewardTotalData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

/**
 * The total bonus amount
 */
export const zGetApiVipSpinRewardTotalResponse = z.object({
    total: z.number()
});

export const zGetApiVipSpinRewardWinnersData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

/**
 * The list of VIP spin reward winners
 */
export const zGetApiVipSpinRewardWinnersResponse = z.array(z.object({
    id: z.string(),
    userId: z.string(),
    amount: z.int(),
    currency: z.string(),
    createdAt: z.union([
        z.string(),
        z.null()
    ])
}));

export const zGetApiVipSpinRewardLastByUserIdData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        userId: z.string()
    }),
    query: z.optional(z.never())
});

/**
 * The last spin record
 */
export const zGetApiVipSpinRewardLastByUserIdResponse = z.object({
    id: z.string(),
    userId: z.string(),
    amount: z.int(),
    currency: z.string(),
    createdAt: z.union([
        z.string(),
        z.null()
    ])
});

export const zGetApiDashboardSettlementsData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.object({
        limit: z.optional(z.string()).default('10')
    }))
});

/**
 * Settlement history retrieved successfully
 */
export const zGetApiDashboardSettlementsResponse = z.object({
    success: z.boolean(),
    data: z.array(z.unknown())
});

export const zGetApiDashboardLoyaltyReportData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.object({
        period: z.enum([
            'weekly',
            'monthly'
        ])
    })
});

/**
 * Loyalty report retrieved successfully
 */
export const zGetApiDashboardLoyaltyReportResponse = z.object({
    success: z.boolean(),
    data: z.object({
        period: z.string(),
        startDate: z.string(),
        endDate: z.string(),
        totalContribution: z.number(),
        totalBenefitsToPlayers: z.number()
    })
});

export const zGetApiDashboardKpisData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

/**
 * KPIs retrieved successfully
 */
export const zGetApiDashboardKpisResponse = z.object({
    success: z.boolean(),
    data: z.object({
        totalPlayers: z.number(),
        totalDeposits: z.number(),
        totalWithdrawals: z.number(),
        totalBets: z.number(),
        totalWins: z.number(),
        period: z.string()
    })
});

export const zGetApiDashboardTopPlayersData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.object({
        metric: z.optional(z.enum([
            'bets',
            'wins',
            'balance'
        ])),
        limit: z.optional(z.string()).default('10')
    }))
});

/**
 * Top players retrieved successfully
 */
export const zGetApiDashboardTopPlayersResponse = z.object({
    success: z.boolean(),
    data: z.array(z.unknown()),
    metric: z.string()
});

export const zGetApiDashboardRecentActivityData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.object({
        days: z.optional(z.string()).default('7')
    }))
});

/**
 * Recent activity retrieved successfully
 */
export const zGetApiDashboardRecentActivityResponse = z.object({
    success: z.boolean(),
    data: z.object({
        recentTransactions: z.array(z.unknown()),
        recentLoyaltyActivity: z.array(z.unknown()),
        periodDays: z.number()
    })
});

export const zGetApiDashboardKpiSummaryData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

/**
 * KPI summary retrieved successfully
 */
export const zGetApiDashboardKpiSummaryResponse = z.object({
    success: z.boolean(),
    data: z.object({
        totalRevenue: z.number(),
        activePlayers24h: z.number(),
        newUsers24h: z.number(),
        operatorBalance: z.number()
    })
});

export const zGetApiDashboardTransactionsData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.object({
        page: z.optional(z.string()).default('1'),
        pageSize: z.optional(z.string()).default('20'),
        userId: z.optional(z.string()),
        status: z.optional(z.string()),
        startDate: z.optional(z.string()),
        endDate: z.optional(z.string())
    }))
});

/**
 * Transactions retrieved successfully
 */
export const zGetApiDashboardTransactionsResponse = z.object({
    success: z.boolean(),
    data: z.array(z.unknown()),
    pagination: z.object({
        totalItems: z.number(),
        totalPages: z.number(),
        currentPage: z.number()
    })
});

export const zGetApiDashboardUserActivityData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.object({
        dateRange: z.optional(z.enum([
            'last7days',
            'last30days'
        ])),
        startDate: z.optional(z.string()),
        endDate: z.optional(z.string())
    }))
});

/**
 * User activity retrieved successfully
 */
export const zGetApiDashboardUserActivityResponse = z.object({
    success: z.boolean(),
    data: z.object({
        newUsers: z.number(),
        removedUsers: z.number()
    })
});

export const zGetApiDashboardGameStatsData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

/**
 * Game statistics retrieved successfully
 */
export const zGetApiDashboardGameStatsResponse = z.object({
    success: z.boolean(),
    data: z.array(z.object({
        gameId: z.string(),
        gameName: z.string(),
        totalSpins: z.number(),
        totalWagered: z.number(),
        totalWon: z.number(),
        winLossRatio: z.number()
    }))
});

export const zGetApiDashboardPlayersData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.object({
        page: z.optional(z.string()).default('1'),
        pageSize: z.optional(z.string()).default('20')
    }))
});

/**
 * Players retrieved successfully
 */
export const zGetApiDashboardPlayersResponse = z.object({
    success: z.boolean(),
    data: z.array(z.unknown()),
    pagination: z.object({
        totalItems: z.number(),
        totalPages: z.number(),
        currentPage: z.number()
    })
});

export const zGetApiOperatorsData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

/**
 * Returns a list of operators.
 */
export const zGetApiOperatorsResponse = z.array(z.object({
    id: z.string(),
    name: z.string(),
    operatorSecret: z.string(),
    operatorAccess: z.string(),
    callbackUrl: z.string(),
    isActive: z.boolean(),
    allowedIps: z.string(),
    description: z.union([
        z.string(),
        z.null()
    ]),
    productIds: z.union([
        z.string(),
        z.null()
    ]),
    balance: z.int(),
    netRevenue: z.int(),
    acceptedPayments: z.array(z.string()),
    ownerId: z.union([
        z.string(),
        z.null()
    ]),
    lastUsedAt: z.union([
        z.string(),
        z.null()
    ]),
    createdAt: z.union([
        z.string(),
        z.null()
    ]),
    updatedAt: z.union([
        z.string(),
        z.null()
    ]),
    upfrontBankCredits: z.int(),
    platformFeeRate: z.string(),
    loyaltyContributionRate: z.string()
}));

export const zGetApiOperatorsProductsData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

/**
 * Returns a list of products.
 */
export const zGetApiOperatorsProductsResponse = z.object({
    operator: z.object({
        id: z.string(),
        name: z.string(),
        operatorSecret: z.string(),
        operatorAccess: z.string(),
        callbackUrl: z.string(),
        isActive: z.boolean(),
        allowedIps: z.string(),
        description: z.union([
            z.string(),
            z.null()
        ]),
        productIds: z.union([
            z.string(),
            z.null()
        ]),
        balance: z.int(),
        netRevenue: z.int(),
        acceptedPayments: z.array(z.string()),
        ownerId: z.union([
            z.string(),
            z.null()
        ]),
        lastUsedAt: z.union([
            z.string(),
            z.null()
        ]),
        createdAt: z.union([
            z.string(),
            z.null()
        ]),
        updatedAt: z.union([
            z.string(),
            z.null()
        ]),
        upfrontBankCredits: z.int(),
        platformFeeRate: z.string(),
        loyaltyContributionRate: z.string()
    }),
    product: z.array(z.object({
        id: z.string(),
        title: z.string(),
        productType: z.string(),
        bonusTotalInCredits: z.int(),
        isActive: z.union([
            z.boolean(),
            z.null()
        ]),
        priceInCents: z.int(),
        amountToReceiveInCredits: z.int(),
        bestValue: z.int(),
        discountInCents: z.int(),
        bonusSpins: z.int(),
        isPromo: z.union([
            z.boolean(),
            z.null()
        ]),
        totalDiscountInCents: z.int(),
        operatorId: z.union([
            z.string(),
            z.null()
        ]),
        createdAt: z.union([
            z.string(),
            z.null()
        ]),
        updatedAt: z.union([
            z.string(),
            z.null()
        ])
    }))
});

export const zPostApiRedtigerGameSettingsData = z.object({
    body: z.optional(z.unknown()),
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

/**
 * Redtiger game settings
 */
export const zPostApiRedtigerGameSettingsResponse = z.object({
    success: z.boolean(),
    result: z.optional(z.object({
        user: z.object({
            balance: z.object({
                cash: z.string(),
                freeBets: z.optional(z.string()),
                bonus: z.optional(z.string())
            }),
            canGamble: z.boolean(),
            userId: z.union([
                z.number(),
                z.string()
            ]),
            sessionId: z.string(),
            sessionNetPosition: z.optional(z.string()),
            token: z.string(),
            country: z.optional(z.string()),
            currency: z.optional(z.object({
                code: z.string(),
                symbol: z.string()
            })),
            stakes: z.optional(z.unknown()),
            limits: z.optional(z.unknown()),
            serverTime: z.iso.datetime()
        }),
        games: z.optional(z.object({
            version: z.optional(z.string()),
            gamesType: z.optional(z.string())
        })),
        launcher: z.optional(z.object({
            version: z.optional(z.string())
        })),
        jackpots: z.optional(z.unknown())
    })),
    error: z.optional(z.object({
        code: z.string(),
        message: z.string(),
        details: z.optional(z.unknown())
    }))
});

export const zPostApiRedtigerGameSpinData = z.object({
    body: z.optional(z.unknown()),
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

/**
 * Redtiger spin result
 */
export const zPostApiRedtigerGameSpinResponse = z.object({
    transactions: z.object({
        roundId: z.union([
            z.number(),
            z.string()
        ])
    }),
    user: z.object({
        balance: z.object({
            cash: z.object({
                atStart: z.optional(z.string()),
                afterBet: z.optional(z.string()),
                atEnd: z.string()
            }),
            freeBets: z.optional(z.object({
                atStart: z.optional(z.string()),
                afterBet: z.optional(z.string()),
                atEnd: z.string()
            })),
            bonus: z.optional(z.object({
                atStart: z.optional(z.string()),
                afterBet: z.optional(z.string()),
                atEnd: z.string()
            }))
        }),
        userId: z.union([
            z.number(),
            z.string()
        ]),
        sessionId: z.string(),
        sessionNetPosition: z.optional(z.string()),
        token: z.string(),
        serverTime: z.iso.datetime(),
        canGamble: z.optional(z.boolean())
    }),
    game: z.object({
        win: z.object({
            instantWin: z.optional(z.string()),
            lines: z.optional(z.string()),
            total: z.string()
        }),
        stake: z.string(),
        multiplier: z.optional(z.number()),
        winLines: z.optional(z.array(z.unknown())),
        reelsBuffer: z.optional(z.array(z.array(z.array(z.number())))),
        xpBreakdown: z.optional(z.object({
            baseXp: z.number(),
            bonusXp: z.number(),
            totalXp: z.number()
        }))
    }),
    jackpots: z.optional(z.unknown()),
    bonusChance: z.optional(z.unknown())
});

export const zPostApiGameByGameNameServer__Data = z.object({
    body: z.optional(z.never()),
    path: z.object({
        gameName: z.string()
    }),
    query: z.optional(z.never())
});

/**
 * Successful spin response or init/paytable string.
 */
export const zPostApiGameByGameNameServer__Response = z.object({
    success: z.boolean(),
    message: z.string(),
    data: z.object({
        winAmount: z.number(),
        balance: z.number(),
        reels: z.optional(z.record(z.string(), z.array(z.unknown()))),
        winLines: z.array(z.unknown()),
        isBonus: z.boolean(),
        freeSpinState: z.optional(z.unknown()),
        isRespin: z.optional(z.boolean())
    })
});

export const zPostApiGameConfig__Data = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

/**
 * Successful spin response or init/paytable string.
 */
export const zPostApiGameConfig__Response = z.object({
    success: z.boolean(),
    message: z.string(),
    data: z.object({
        winAmount: z.number(),
        balance: z.number(),
        reels: z.optional(z.record(z.string(), z.array(z.unknown()))),
        winLines: z.array(z.unknown()),
        isBonus: z.boolean(),
        freeSpinState: z.optional(z.unknown()),
        isRespin: z.optional(z.boolean())
    })
});
