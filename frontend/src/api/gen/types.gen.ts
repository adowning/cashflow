// This file is auto-generated by @hey-api/openapi-ts

export type ClientOptions = {
    baseUrl: `${string}://${string}` | (string & {});
};

export type PostApiUpdatesCheckData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/updates/check';
};

export type PostApiUpdatesCheckResponses = {
    /**
     * The updated user
     */
    200: string;
};

export type PostApiUpdatesCheckResponse = PostApiUpdatesCheckResponses[keyof PostApiUpdatesCheckResponses];

export type PostApiUpdatesUploadData = {
    body?: {
        [key: string]: unknown;
    };
    path?: never;
    query?: never;
    url: '/api/updates/upload';
};

export type PostApiUpdatesUploadErrors = {
    /**
     * Bad Request
     */
    400: string;
};

export type PostApiUpdatesUploadError = PostApiUpdatesUploadErrors[keyof PostApiUpdatesUploadErrors];

export type PostApiUpdatesUploadResponses = {
    /**
     * Upload success response
     */
    200: boolean;
};

export type PostApiUpdatesUploadResponse = PostApiUpdatesUploadResponses[keyof PostApiUpdatesUploadResponses];

export type GetApiUpdatesDownloadByFilenameData = {
    body?: never;
    path: {
        filename: string;
    };
    query?: never;
    url: '/api/updates/download/{filename}';
};

export type GetApiUpdatesDownloadByFilenameErrors = {
    /**
     * Not Found
     */
    404: string;
};

export type GetApiUpdatesDownloadByFilenameError = GetApiUpdatesDownloadByFilenameErrors[keyof GetApiUpdatesDownloadByFilenameErrors];

export type GetApiUpdatesDownloadByFilenameResponses = {
    /**
     * Application file (APK or ZIP)
     */
    200: unknown;
};

export type GetApiUpdatesVersionsByAppIdByPlatformData = {
    body?: never;
    path: {
        appId: string;
        platform: string;
    };
    query?: never;
    url: '/api/updates/versions/{appId}/{platform}';
};

export type GetApiUpdatesVersionsByAppIdByPlatformErrors = {
    /**
     * Bad Request
     */
    400: string;
};

export type GetApiUpdatesVersionsByAppIdByPlatformError = GetApiUpdatesVersionsByAppIdByPlatformErrors[keyof GetApiUpdatesVersionsByAppIdByPlatformErrors];

export type GetApiUpdatesVersionsByAppIdByPlatformResponses = {
    /**
     * List of versions
     */
    200: Array<string>;
};

export type GetApiUpdatesVersionsByAppIdByPlatformResponse = GetApiUpdatesVersionsByAppIdByPlatformResponses[keyof GetApiUpdatesVersionsByAppIdByPlatformResponses];

export type GetApiUsersData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/users';
};

export type GetApiUsersResponses = {
    /**
     * The list of users
     */
    200: Array<{
        status: 'ACTIVE' | 'INACTIVE' | 'BANNED';
        id: string;
        username: string;
        email: string | null;
        passwordHash: string | null;
        accessToken: string | null;
        refreshToken: string | null;
        accessTokenExpiresAt: string | null;
        refreshTokenExpiresAt: string | null;
        currentGameSessionDataId: string | null;
        currentAuthSessionDataId: string | null;
        avatarUrl: string;
        role: string;
        phpId: number;
        isActive: boolean;
        lastLoginAt: string | null;
        totalXpGained: number;
        vipInfoId: string | null;
        createdAt: string | null;
        updatedAt: string | null;
        deletedAt: string | null;
        lastSeen: string | null;
        rtgBlockTime: number;
        phone: string | null;
        path: Array<string>;
        invitorId: string | null;
        avatar: string;
        count_balance: number;
        count_tournaments: number;
        count_happyhours: number;
        count_refunds: number;
        count_progress: number;
        count_daily_entries: number;
        count_invite: number;
        count_welcomebonus: number;
        count_smsbonus: number;
        count_wheelfortune: number;
        address: number;
        activeOperatorId: string | null;
        activeWalletId: string | null;
        inviteCode: string | null;
    }>;
};

export type GetApiUsersResponse = GetApiUsersResponses[keyof GetApiUsersResponses];

export type PostApiEnterGameData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/enter/game';
};

export type PostApiEnterGameResponses = {
    /**
     * Enter game
     */
    200: unknown;
};

export type PostApiGamesData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/games';
};

export type PostApiGamesResponses = {
    /**
     * User game
     */
    200: unknown;
};

export type PostApiSetupGameData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/setup/game';
};

export type PostApiSetupGameResponses = {
    /**
     * Favorite game
     */
    200: unknown;
};

export type GetApiSpinpageData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/spinpage';
};

export type GetApiSpinpageResponses = {
    /**
     * Spin page
     */
    200: unknown;
};

export type PostApiSpinData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/spin';
};

export type PostApiSpinResponses = {
    /**
     * Spin
     */
    200: unknown;
};

export type GetApiFavoriteGameData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/favorite/game';
};

export type GetApiFavoriteGameResponses = {
    /**
     * Favorite game list
     */
    200: unknown;
};

export type PostApiEndGameSessionData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/end-game-session';
};

export type PostApiEndGameSessionErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
};

export type PostApiEndGameSessionResponses = {
    /**
     * Session ended response
     */
    200: {
        success: boolean;
        message: string;
    };
};

export type PostApiEndGameSessionResponse = PostApiEndGameSessionResponses[keyof PostApiEndGameSessionResponses];

export type DeleteApiUsersByIdData = {
    body?: never;
    path?: {
        id?: number | null;
    };
    query?: never;
    url: '/api/users/{id}';
};

export type DeleteApiUsersByIdErrors = {
    /**
     * User not found
     */
    404: {
        message: string;
    };
    /**
     * Invalid id error
     */
    422: {
        success: boolean;
        error: {
            issues: Array<{
                code: string;
                path: Array<string | number>;
                message?: string;
            }>;
            name: string;
        };
    };
};

export type DeleteApiUsersByIdError = DeleteApiUsersByIdErrors[keyof DeleteApiUsersByIdErrors];

export type DeleteApiUsersByIdResponses = {
    /**
     * User deleted
     */
    204: void;
};

export type DeleteApiUsersByIdResponse = DeleteApiUsersByIdResponses[keyof DeleteApiUsersByIdResponses];

export type GetApiUsersByIdData = {
    body?: never;
    path?: {
        id?: number | null;
    };
    query?: never;
    url: '/api/users/{id}';
};

export type GetApiUsersByIdErrors = {
    /**
     * User not found
     */
    404: {
        message: string;
    };
    /**
     * Invalid id error
     */
    422: {
        success: boolean;
        error: {
            issues: Array<{
                code: string;
                path: Array<string | number>;
                message?: string;
            }>;
            name: string;
        };
    };
};

export type GetApiUsersByIdError = GetApiUsersByIdErrors[keyof GetApiUsersByIdErrors];

export type GetApiUsersByIdResponses = {
    /**
     * The requested user
     */
    200: {
        status: 'ACTIVE' | 'INACTIVE' | 'BANNED';
        id: string;
        username: string;
        email: string | null;
        passwordHash: string | null;
        accessToken: string | null;
        refreshToken: string | null;
        accessTokenExpiresAt: string | null;
        refreshTokenExpiresAt: string | null;
        currentGameSessionDataId: string | null;
        currentAuthSessionDataId: string | null;
        avatarUrl: string;
        role: string;
        phpId: number;
        isActive: boolean;
        lastLoginAt: string | null;
        totalXpGained: number;
        vipInfoId: string | null;
        createdAt: string | null;
        updatedAt: string | null;
        deletedAt: string | null;
        lastSeen: string | null;
        rtgBlockTime: number;
        phone: string | null;
        path: Array<string>;
        invitorId: string | null;
        avatar: string;
        count_balance: number;
        count_tournaments: number;
        count_happyhours: number;
        count_refunds: number;
        count_progress: number;
        count_daily_entries: number;
        count_invite: number;
        count_welcomebonus: number;
        count_smsbonus: number;
        count_wheelfortune: number;
        address: number;
        activeOperatorId: string | null;
        activeWalletId: string | null;
        inviteCode: string | null;
    };
};

export type GetApiUsersByIdResponse = GetApiUsersByIdResponses[keyof GetApiUsersByIdResponses];

export type PatchApiUsersByIdData = {
    /**
     * The user updates
     */
    body: {
        status: 'ACTIVE' | 'INACTIVE' | 'BANNED';
        id: string;
        username: string;
        email: string | null;
        passwordHash: string | null;
        accessToken: string | null;
        refreshToken: string | null;
        accessTokenExpiresAt: string | null;
        refreshTokenExpiresAt: string | null;
        currentGameSessionDataId: string | null;
        currentAuthSessionDataId: string | null;
        avatarUrl: string;
        role: string;
        phpId: number;
        isActive: boolean;
        lastLoginAt: string | null;
        totalXpGained: number;
        vipInfoId: string | null;
        createdAt: string | null;
        updatedAt: string | null;
        deletedAt: string | null;
        lastSeen: string | null;
        rtgBlockTime: number;
        phone: string | null;
        path: Array<string>;
        invitorId: string | null;
        avatar: string;
        count_balance: number;
        count_tournaments: number;
        count_happyhours: number;
        count_refunds: number;
        count_progress: number;
        count_daily_entries: number;
        count_invite: number;
        count_welcomebonus: number;
        count_smsbonus: number;
        count_wheelfortune: number;
        address: number;
        activeOperatorId: string | null;
        activeWalletId: string | null;
        inviteCode: string | null;
    };
    path?: {
        id?: number | null;
    };
    query?: never;
    url: '/api/users/{id}';
};

export type PatchApiUsersByIdErrors = {
    /**
     * User not found
     */
    404: {
        message: string;
    };
};

export type PatchApiUsersByIdError = PatchApiUsersByIdErrors[keyof PatchApiUsersByIdErrors];

export type PatchApiUsersByIdResponses = {
    /**
     * The updated user
     */
    200: {
        status: 'ACTIVE' | 'INACTIVE' | 'BANNED';
        id: string;
        username: string;
        email: string | null;
        passwordHash: string | null;
        accessToken: string | null;
        refreshToken: string | null;
        accessTokenExpiresAt: string | null;
        refreshTokenExpiresAt: string | null;
        currentGameSessionDataId: string | null;
        currentAuthSessionDataId: string | null;
        avatarUrl: string;
        role: string;
        phpId: number;
        isActive: boolean;
        lastLoginAt: string | null;
        totalXpGained: number;
        vipInfoId: string | null;
        createdAt: string | null;
        updatedAt: string | null;
        deletedAt: string | null;
        lastSeen: string | null;
        rtgBlockTime: number;
        phone: string | null;
        path: Array<string>;
        invitorId: string | null;
        avatar: string;
        count_balance: number;
        count_tournaments: number;
        count_happyhours: number;
        count_refunds: number;
        count_progress: number;
        count_daily_entries: number;
        count_invite: number;
        count_welcomebonus: number;
        count_smsbonus: number;
        count_wheelfortune: number;
        address: number;
        activeOperatorId: string | null;
        activeWalletId: string | null;
        inviteCode: string | null;
    };
};

export type PatchApiUsersByIdResponse = PatchApiUsersByIdResponses[keyof PatchApiUsersByIdResponses];

export type GetApiUsersByIdCheckData = {
    body?: never;
    path?: {
        id?: number | null;
    };
    query?: never;
    url: '/api/users/{id}/check';
};

export type GetApiUsersByIdCheckErrors = {
    /**
     * User not found
     */
    404: {
        message: string;
    };
};

export type GetApiUsersByIdCheckError = GetApiUsersByIdCheckErrors[keyof GetApiUsersByIdCheckErrors];

export type GetApiUsersByIdCheckResponses = {
    /**
     * User status
     */
    200: {
        userCheck: boolean;
    };
};

export type GetApiUsersByIdCheckResponse = GetApiUsersByIdCheckResponses[keyof GetApiUsersByIdCheckResponses];

export type PostApiUsersByIdVerifyEmailData = {
    body?: never;
    path?: {
        id?: number | null;
    };
    query?: never;
    url: '/api/users/{id}/verify-email';
};

export type PostApiUsersByIdVerifyEmailResponses = {
    /**
     * Verification sent
     */
    200: {
        status: string;
        time: number;
    };
};

export type PostApiUsersByIdVerifyEmailResponse = PostApiUsersByIdVerifyEmailResponses[keyof PostApiUsersByIdVerifyEmailResponses];

export type GetApiUsersByIdInfoData = {
    body?: never;
    path?: {
        id?: number | null;
    };
    query?: never;
    url: '/api/users/{id}/info';
};

export type GetApiUsersByIdInfoErrors = {
    /**
     * User not found
     */
    404: {
        message: string;
    };
};

export type GetApiUsersByIdInfoError = GetApiUsersByIdInfoErrors[keyof GetApiUsersByIdInfoErrors];

export type GetApiUsersByIdInfoResponses = {
    /**
     * User info
     */
    200: {
        status: 'ACTIVE' | 'INACTIVE' | 'BANNED';
        id: string;
        username: string;
        email: string | null;
        passwordHash: string | null;
        accessToken: string | null;
        refreshToken: string | null;
        accessTokenExpiresAt: string | null;
        refreshTokenExpiresAt: string | null;
        currentGameSessionDataId: string | null;
        currentAuthSessionDataId: string | null;
        avatarUrl: string;
        role: string;
        phpId: number;
        isActive: boolean;
        lastLoginAt: string | null;
        totalXpGained: number;
        vipInfoId: string | null;
        createdAt: string | null;
        updatedAt: string | null;
        deletedAt: string | null;
        lastSeen: string | null;
        rtgBlockTime: number;
        phone: string | null;
        path: Array<string>;
        invitorId: string | null;
        avatar: string;
        count_balance: number;
        count_tournaments: number;
        count_happyhours: number;
        count_refunds: number;
        count_progress: number;
        count_daily_entries: number;
        count_invite: number;
        count_welcomebonus: number;
        count_smsbonus: number;
        count_wheelfortune: number;
        address: number;
        activeOperatorId: string | null;
        activeWalletId: string | null;
        inviteCode: string | null;
    };
};

export type GetApiUsersByIdInfoResponse = GetApiUsersByIdInfoResponses[keyof GetApiUsersByIdInfoResponses];

export type GetApiUsersByIdVipinfoData = {
    body?: never;
    path?: {
        id?: number | null;
    };
    query?: never;
    url: '/api/users/{id}/vipinfo';
};

export type GetApiUsersByIdVipinfoResponses = {
    /**
     * VIP info
     */
    200: {
        vipLevel: number | null;
    };
};

export type GetApiUsersByIdVipinfoResponse = GetApiUsersByIdVipinfoResponses[keyof GetApiUsersByIdVipinfoResponses];

export type GetApiUserAmountData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/user/amount';
};

export type GetApiUserAmountResponses = {
    /**
     * Get user amount
     */
    200: {
        amount: number;
        currency: {
            fiat: boolean;
            name: string;
            symbol: string;
            type: string;
        };
        withdraw: number;
        rate: number;
    };
};

export type GetApiUserAmountResponse = GetApiUserAmountResponses[keyof GetApiUserAmountResponses];

export type PostApiUserChangeData = {
    /**
     * The user info to update
     */
    body: {
        status: 'ACTIVE' | 'INACTIVE' | 'BANNED';
        id: string;
        username: string;
        email: string | null;
        passwordHash: string | null;
        accessToken: string | null;
        refreshToken: string | null;
        accessTokenExpiresAt: string | null;
        refreshTokenExpiresAt: string | null;
        currentGameSessionDataId: string | null;
        currentAuthSessionDataId: string | null;
        avatarUrl: string;
        role: string;
        phpId: number;
        isActive: boolean;
        lastLoginAt: string | null;
        totalXpGained: number;
        vipInfoId: string | null;
        createdAt: string | null;
        updatedAt: string | null;
        deletedAt: string | null;
        lastSeen: string | null;
        rtgBlockTime: number;
        phone: string | null;
        path: Array<string>;
        invitorId: string | null;
        avatar: string;
        count_balance: number;
        count_tournaments: number;
        count_happyhours: number;
        count_refunds: number;
        count_progress: number;
        count_daily_entries: number;
        count_invite: number;
        count_welcomebonus: number;
        count_smsbonus: number;
        count_wheelfortune: number;
        address: number;
        activeOperatorId: string | null;
        activeWalletId: string | null;
        inviteCode: string | null;
    };
    path?: never;
    query?: never;
    url: '/api/user/change';
};

export type PostApiUserChangeResponses = {
    /**
     * The updated user
     */
    200: {
        status: 'ACTIVE' | 'INACTIVE' | 'BANNED';
        id: string;
        username: string;
        email: string | null;
        passwordHash: string | null;
        accessToken: string | null;
        refreshToken: string | null;
        accessTokenExpiresAt: string | null;
        refreshTokenExpiresAt: string | null;
        currentGameSessionDataId: string | null;
        currentAuthSessionDataId: string | null;
        avatarUrl: string;
        role: string;
        phpId: number;
        isActive: boolean;
        lastLoginAt: string | null;
        totalXpGained: number;
        vipInfoId: string | null;
        createdAt: string | null;
        updatedAt: string | null;
        deletedAt: string | null;
        lastSeen: string | null;
        rtgBlockTime: number;
        phone: string | null;
        path: Array<string>;
        invitorId: string | null;
        avatar: string;
        count_balance: number;
        count_tournaments: number;
        count_happyhours: number;
        count_refunds: number;
        count_progress: number;
        count_daily_entries: number;
        count_invite: number;
        count_welcomebonus: number;
        count_smsbonus: number;
        count_wheelfortune: number;
        address: number;
        activeOperatorId: string | null;
        activeWalletId: string | null;
        inviteCode: string | null;
    };
};

export type PostApiUserChangeResponse = PostApiUserChangeResponses[keyof PostApiUserChangeResponses];

export type PostApiUserEmailData = {
    /**
     * The email to update
     */
    body: {
        email: string;
        password: string;
    };
    path?: never;
    query?: never;
    url: '/api/user/email';
};

export type PostApiUserEmailResponses = {
    /**
     * The updated user
     */
    200: {
        status: 'ACTIVE' | 'INACTIVE' | 'BANNED';
        id: string;
        username: string;
        email: string | null;
        passwordHash: string | null;
        accessToken: string | null;
        refreshToken: string | null;
        accessTokenExpiresAt: string | null;
        refreshTokenExpiresAt: string | null;
        currentGameSessionDataId: string | null;
        currentAuthSessionDataId: string | null;
        avatarUrl: string;
        role: string;
        phpId: number;
        isActive: boolean;
        lastLoginAt: string | null;
        totalXpGained: number;
        vipInfoId: string | null;
        createdAt: string | null;
        updatedAt: string | null;
        deletedAt: string | null;
        lastSeen: string | null;
        rtgBlockTime: number;
        phone: string | null;
        path: Array<string>;
        invitorId: string | null;
        avatar: string;
        count_balance: number;
        count_tournaments: number;
        count_happyhours: number;
        count_refunds: number;
        count_progress: number;
        count_daily_entries: number;
        count_invite: number;
        count_welcomebonus: number;
        count_smsbonus: number;
        count_wheelfortune: number;
        address: number;
        activeOperatorId: string | null;
        activeWalletId: string | null;
        inviteCode: string | null;
    };
};

export type PostApiUserEmailResponse = PostApiUserEmailResponses[keyof PostApiUserEmailResponses];

export type PostApiUserPasswordData = {
    /**
     * The password to update
     */
    body: {
        now_password: string;
        new_password: string;
    };
    path?: never;
    query?: never;
    url: '/api/user/password';
};

export type PostApiUserPasswordResponses = {
    /**
     * Password updated
     */
    200: {
        message: string;
    };
};

export type PostApiUserPasswordResponse = PostApiUserPasswordResponses[keyof PostApiUserPasswordResponses];

export type PostApiUserSuspendData = {
    /**
     * The suspension time
     */
    body: {
        time: number;
    };
    path?: never;
    query?: never;
    url: '/api/user/suspend';
};

export type PostApiUserSuspendResponses = {
    /**
     * User suspended
     */
    200: {
        message: string;
    };
};

export type PostApiUserSuspendResponse = PostApiUserSuspendResponses[keyof PostApiUserSuspendResponses];

export type GetApiTransactionsDepositsTop10Data = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/transactions/deposits/top10';
};

export type GetApiTransactionsDepositsTop10Errors = {
    /**
     * Unauthorized
     */
    401: {
        error: string;
    };
    /**
     * Internal server error
     */
    500: {
        error: string;
    };
};

export type GetApiTransactionsDepositsTop10Error = GetApiTransactionsDepositsTop10Errors[keyof GetApiTransactionsDepositsTop10Errors];

export type GetApiTransactionsDepositsTop10Responses = {
    /**
     * Top 10 deposits for the authenticated user
     */
    200: Array<{
        id: string;
        processedAt: string | null;
        walletId: string | null;
        type: string;
        status: string;
        amount: number;
        netAmount: number | null;
        currencyName: string | null;
        feeAmount: number | null;
        productId: string | null;
        paymentMethod: string | null;
        balanceBefore: number | null;
        balanceAfter: number | null;
        bonusBalanceBefore: number | null;
        bonusBalanceAfter: number | null;
        bonusAmount: number | null;
        wageringRequirement: number | null;
        wageringProgress: number | null;
        description: string | null;
        provider: string | null;
        providerTxId: string | null;
        relatedGameId: string | null;
        relatedRoundId: string | null;
        createdAt: string | null;
        updatedAt: string | null;
        operatorId: string | null;
        userId: string;
    }>;
};

export type GetApiTransactionsDepositsTop10Response = GetApiTransactionsDepositsTop10Responses[keyof GetApiTransactionsDepositsTop10Responses];

export type PostApiTransactionsDepositsData = {
    /**
     * Deposit data to create
     */
    body: {
        id: string;
        processedAt: string | null;
        walletId: string | null;
        type: string;
        status: string;
        amount: number;
        netAmount: number | null;
        currencyName: string | null;
        feeAmount: number | null;
        productId: string | null;
        paymentMethod: string | null;
        balanceBefore: number | null;
        balanceAfter: number | null;
        bonusBalanceBefore: number | null;
        bonusBalanceAfter: number | null;
        bonusAmount: number | null;
        wageringRequirement: number | null;
        wageringProgress: number | null;
        description: string | null;
        provider: string | null;
        providerTxId: string | null;
        relatedGameId: string | null;
        relatedRoundId: string | null;
        createdAt: string | null;
        updatedAt: string | null;
        operatorId: string | null;
        userId: string;
    };
    path?: never;
    query?: never;
    url: '/api/transactions/deposits';
};

export type PostApiTransactionsDepositsErrors = {
    /**
     * Invalid request body
     */
    400: {
        error: string;
    };
    /**
     * Unauthorized
     */
    401: {
        error: string;
    };
    /**
     * Internal server error
     */
    500: {
        error: string;
    };
};

export type PostApiTransactionsDepositsError = PostApiTransactionsDepositsErrors[keyof PostApiTransactionsDepositsErrors];

export type PostApiTransactionsDepositsResponses = {
    /**
     * The created deposit
     */
    201: {
        deposit: {
            id: string;
            processedAt: string | null;
            walletId: string | null;
            type: string;
            status: string;
            amount: number;
            netAmount: number | null;
            currencyName: string | null;
            feeAmount: number | null;
            productId: string | null;
            paymentMethod: string | null;
            balanceBefore: number | null;
            balanceAfter: number | null;
            bonusBalanceBefore: number | null;
            bonusBalanceAfter: number | null;
            bonusAmount: number | null;
            wageringRequirement: number | null;
            wageringProgress: number | null;
            description: string | null;
            provider: string | null;
            providerTxId: string | null;
            relatedGameId: string | null;
            relatedRoundId: string | null;
            createdAt: string | null;
            updatedAt: string | null;
            operatorId: string | null;
            userId: string;
        };
    };
};

export type PostApiTransactionsDepositsResponse = PostApiTransactionsDepositsResponses[keyof PostApiTransactionsDepositsResponses];

export type GetApiTransactionsDepositsByIdData = {
    body?: never;
    path: {
        /**
         * Deposit ID
         */
        id: string;
    };
    query?: never;
    url: '/api/transactions/deposits/{id}';
};

export type GetApiTransactionsDepositsByIdErrors = {
    /**
     * Invalid deposit ID
     */
    400: {
        error: string;
    };
    /**
     * Unauthorized
     */
    401: {
        error: string;
    };
    /**
     * Forbidden
     */
    403: {
        error: string;
    };
    /**
     * Deposit not found
     */
    404: {
        error: string;
    };
    /**
     * Internal server error
     */
    500: {
        error: string;
    };
};

export type GetApiTransactionsDepositsByIdError = GetApiTransactionsDepositsByIdErrors[keyof GetApiTransactionsDepositsByIdErrors];

export type GetApiTransactionsDepositsByIdResponses = {
    /**
     * The deposit details
     */
    200: {
        deposit: {
            id: string;
            processedAt: string | null;
            walletId: string | null;
            type: string;
            status: string;
            amount: number;
            netAmount: number | null;
            currencyName: string | null;
            feeAmount: number | null;
            productId: string | null;
            paymentMethod: string | null;
            balanceBefore: number | null;
            balanceAfter: number | null;
            bonusBalanceBefore: number | null;
            bonusBalanceAfter: number | null;
            bonusAmount: number | null;
            wageringRequirement: number | null;
            wageringProgress: number | null;
            description: string | null;
            provider: string | null;
            providerTxId: string | null;
            relatedGameId: string | null;
            relatedRoundId: string | null;
            createdAt: string | null;
            updatedAt: string | null;
            operatorId: string | null;
            userId: string;
        };
    };
};

export type GetApiTransactionsDepositsByIdResponse = GetApiTransactionsDepositsByIdResponses[keyof GetApiTransactionsDepositsByIdResponses];

export type PatchApiTransactionsDepositsByIdStatusData = {
    /**
     * Status update data
     */
    body: {
        id: string;
        processedAt: string | null;
        walletId: string | null;
        type: string;
        status: string;
        amount: number;
        netAmount: number | null;
        currencyName: string | null;
        feeAmount: number | null;
        productId: string | null;
        paymentMethod: string | null;
        balanceBefore: number | null;
        balanceAfter: number | null;
        bonusBalanceBefore: number | null;
        bonusBalanceAfter: number | null;
        bonusAmount: number | null;
        wageringRequirement: number | null;
        wageringProgress: number | null;
        description: string | null;
        provider: string | null;
        providerTxId: string | null;
        relatedGameId: string | null;
        relatedRoundId: string | null;
        createdAt: string | null;
        updatedAt: string | null;
        operatorId: string | null;
        userId: string;
    };
    path: {
        /**
         * Deposit ID
         */
        id: string;
    };
    query?: never;
    url: '/api/transactions/deposits/{id}/status';
};

export type PatchApiTransactionsDepositsByIdStatusErrors = {
    /**
     * Invalid request body or deposit ID
     */
    400: {
        error: string;
    };
    /**
     * Unauthorized
     */
    401: {
        error: string;
    };
    /**
     * Forbidden
     */
    403: {
        error: string;
    };
    /**
     * Deposit not found
     */
    404: {
        error: string;
    };
    /**
     * Internal server error
     */
    500: {
        error: string;
    };
};

export type PatchApiTransactionsDepositsByIdStatusError = PatchApiTransactionsDepositsByIdStatusErrors[keyof PatchApiTransactionsDepositsByIdStatusErrors];

export type PatchApiTransactionsDepositsByIdStatusResponses = {
    /**
     * The updated deposit
     */
    200: {
        deposit: {
            id: string;
            processedAt: string | null;
            walletId: string | null;
            type: string;
            status: string;
            amount: number;
            netAmount: number | null;
            currencyName: string | null;
            feeAmount: number | null;
            productId: string | null;
            paymentMethod: string | null;
            balanceBefore: number | null;
            balanceAfter: number | null;
            bonusBalanceBefore: number | null;
            bonusBalanceAfter: number | null;
            bonusAmount: number | null;
            wageringRequirement: number | null;
            wageringProgress: number | null;
            description: string | null;
            provider: string | null;
            providerTxId: string | null;
            relatedGameId: string | null;
            relatedRoundId: string | null;
            createdAt: string | null;
            updatedAt: string | null;
            operatorId: string | null;
            userId: string;
        };
    };
};

export type PatchApiTransactionsDepositsByIdStatusResponse = PatchApiTransactionsDepositsByIdStatusResponses[keyof PatchApiTransactionsDepositsByIdStatusResponses];

export type GetApiRewardStatusData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/reward/status';
};

export type GetApiRewardStatusResponses = {
    /**
     * Reward status retrieved successfully
     */
    200: {
        commissionReward: number;
        commissionAvailable: number;
        referralReward: number;
        referralAvailable: number;
    };
};

export type GetApiRewardStatusResponse = GetApiRewardStatusResponses[keyof GetApiRewardStatusResponses];

export type PostApiRewardGetLogData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/reward/get-log';
};

export type PostApiRewardGetLogResponses = {
    /**
     * Reward logs retrieved successfully
     */
    200: unknown;
};

export type GetApiRewardActivityData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/reward/activity';
};

export type GetApiRewardActivityResponses = {
    /**
     * Reward activity retrieved successfully
     */
    200: Array<{
        id: string;
        invitorId: string;
        childId: string;
        currency: string;
        referralCode: string;
        betAmount: number;
        commissionAmount: number;
        commissionWager: number;
        totalReferralAmount: number;
        referralAmount: number;
        referralWager: number;
        lastVipLevelAmount: number;
        createdAt: string;
        updatedAt: string;
    }>;
};

export type GetApiRewardActivityResponse = GetApiRewardActivityResponses[keyof GetApiRewardActivityResponses];

export type GetApiRewardDashboardData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/reward/dashboard';
};

export type GetApiRewardDashboardResponses = {
    /**
     * Reward dashboard retrieved successfully
     */
    200: {
        totalCommissionReward?: number;
        totalCommissionAmount?: number;
        totalAvailableReferral?: number;
        friends: number;
        code: string;
    };
};

export type GetApiRewardDashboardResponse = GetApiRewardDashboardResponses[keyof GetApiRewardDashboardResponses];

export type PostApiRewardConvertData = {
    body: {
        type: 'commission' | 'referral';
    };
    path?: never;
    query?: never;
    url: '/api/reward/convert';
};

export type PostApiRewardConvertResponses = {
    /**
     * Reward conversion processed successfully
     */
    200: {
        status: boolean | string;
    };
};

export type PostApiRewardConvertResponse = PostApiRewardConvertResponses[keyof PostApiRewardConvertResponses];

export type GetApiWalletsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/wallets';
};

export type GetApiWalletsErrors = {
    /**
     * Wallet not found
     */
    404: {
        error: string;
    };
};

export type GetApiWalletsError = GetApiWalletsErrors[keyof GetApiWalletsErrors];

export type GetApiWalletsResponses = {
    /**
     * Active wallet summary or null if none is active
     */
    200: {
        id: string;
        balance: number;
        paymentMethod: string;
        currency: string;
        address: string | null;
        cashtag: string | null;
        operatorId: string;
        lastUsedAt: string | null;
        createdAt: string | null;
        updatedAt: string | null;
        userId: string;
        isActive: boolean;
    };
};

export type GetApiWalletsResponse = GetApiWalletsResponses[keyof GetApiWalletsResponses];

export type PostApiWalletsCashtagData = {
    /**
     * The password to update
     */
    body: {
        cashtag: string;
    };
    path?: never;
    query?: never;
    url: '/api/wallets/cashtag';
};

export type PostApiWalletsCashtagErrors = {
    /**
     * Invalid request body
     */
    400: {
        error: string;
    };
    /**
     * Unauthorized
     */
    401: {
        error: string;
    };
};

export type PostApiWalletsCashtagError = PostApiWalletsCashtagErrors[keyof PostApiWalletsCashtagErrors];

export type PostApiWalletsCashtagResponses = {
    /**
     * cashtag updated
     */
    200: {
        cashtag: string;
    };
};

export type PostApiWalletsCashtagResponse = PostApiWalletsCashtagResponses[keyof PostApiWalletsCashtagResponses];

export type GetApiWalletsHistoryData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/wallets/history';
};

export type GetApiWalletsHistoryResponses = {
    /**
     * All wallets for the authenticated user
     */
    200: {
        wallets: Array<{
            id: string;
            balance: number;
            paymentMethod: string;
            currency: string;
            address: string | null;
            cashtag: string | null;
            operatorId: string;
            lastUsedAt: string | null;
            createdAt: string | null;
            updatedAt: string | null;
            userId: string;
            isActive: boolean;
        }>;
    };
};

export type GetApiWalletsHistoryResponse = GetApiWalletsHistoryResponses[keyof GetApiWalletsHistoryResponses];

export type PostApiWalletsSwitchOperatorData = {
    /**
     * Target operator to switch the active wallet to
     */
    body: {
        operatorId: string;
        idempotencyKey?: string;
    };
    path?: never;
    query?: never;
    url: '/api/wallets/switch-operator';
};

export type PostApiWalletsSwitchOperatorErrors = {
    /**
     * Invalid request body
     */
    400: {
        error: string;
    };
    /**
     * Unauthorized
     */
    401: {
        error: string;
    };
};

export type PostApiWalletsSwitchOperatorError = PostApiWalletsSwitchOperatorErrors[keyof PostApiWalletsSwitchOperatorErrors];

export type PostApiWalletsSwitchOperatorResponses = {
    /**
     * The newly activated wallet
     */
    200: {
        wallet: {
            id: string;
            balance: number;
            paymentMethod: string;
            currency: string;
            address: string | null;
            cashtag: string | null;
            operatorId: string;
            lastUsedAt: string | null;
            createdAt: string | null;
            updatedAt: string | null;
            userId: string;
            isActive: boolean;
        };
    };
};

export type PostApiWalletsSwitchOperatorResponse = PostApiWalletsSwitchOperatorResponses[keyof PostApiWalletsSwitchOperatorResponses];

export type GetApiReferralCodeStatusData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/referral-code/status';
};

export type GetApiReferralCodeStatusResponses = {
    /**
     * Referral status retrieved successfully
     */
    200: {
        friendCount: number;
        referralCount: number;
    };
};

export type GetApiReferralCodeStatusResponse = GetApiReferralCodeStatusResponses[keyof GetApiReferralCodeStatusResponses];

export type GetApiReferralCodeData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/referral-code';
};

export type GetApiReferralCodeResponses = {
    /**
     * Referal codes response list
     */
    200: Array<{
        id: string;
        code: string;
        name: string;
        commissionRate: string;
        userId: string;
        createdAt: string;
        updatedAt: string;
    }>;
};

export type GetApiReferralCodeResponse = GetApiReferralCodeResponses[keyof GetApiReferralCodeResponses];

export type PostApiReferralCodeData = {
    body: {
        name: string;
        commissionRate?: number;
    };
    path?: never;
    query?: never;
    url: '/api/referral-code';
};

export type PostApiReferralCodeResponses = {
    /**
     * Referral code created successfully
     */
    201: unknown;
};

export type DeleteApiReferralCodeReferralCodeIdData = {
    body?: never;
    path: {
        referralCodeId: string;
    };
    query?: never;
    url: '/api/referral-code/:referralCodeId';
};

export type DeleteApiReferralCodeReferralCodeIdResponses = {
    /**
     * Referral code deleted successfully
     */
    204: void;
};

export type DeleteApiReferralCodeReferralCodeIdResponse = DeleteApiReferralCodeReferralCodeIdResponses[keyof DeleteApiReferralCodeReferralCodeIdResponses];

export type PostApiAuthLoginData = {
    /**
     * User credentials for login: provide password and either username or uid
     */
    body: {
        password: string;
        username: string;
    };
    path?: never;
    query?: never;
    url: '/api/auth/login';
};

export type PostApiAuthLoginErrors = {
    /**
     * Bad Request
     */
    400: {
        message: string;
    };
};

export type PostApiAuthLoginError = PostApiAuthLoginErrors[keyof PostApiAuthLoginErrors];

export type PostApiAuthLoginResponses = {
    /**
     * The user object and sets an access token cookie.
     */
    200: unknown;
};

export type PostApiAuthSignupData = {
    /**
     * User credentials for signup
     */
    body: {
        username: string;
        password: string;
        referralCode?: string;
        operatorId?: string;
    };
    path?: never;
    query?: never;
    url: '/api/auth/signup';
};

export type PostApiAuthSignupErrors = {
    /**
     * Bad Request
     */
    400: {
        message: string;
    };
};

export type PostApiAuthSignupError = PostApiAuthSignupErrors[keyof PostApiAuthSignupErrors];

export type PostApiAuthSignupResponses = {
    /**
     * The created user object and sets an access token cookie.
     */
    201: {
        status: 'ACTIVE' | 'INACTIVE' | 'BANNED';
        id: string;
        username: string;
        email: string | null;
        passwordHash: string | null;
        accessToken: string | null;
        refreshToken: string | null;
        accessTokenExpiresAt: string | null;
        refreshTokenExpiresAt: string | null;
        currentGameSessionDataId: string | null;
        currentAuthSessionDataId: string | null;
        avatarUrl: string;
        role: string;
        phpId: number;
        isActive: boolean;
        lastLoginAt: string | null;
        totalXpGained: number;
        vipInfoId: string | null;
        createdAt: string | null;
        updatedAt: string | null;
        deletedAt: string | null;
        lastSeen: string | null;
        rtgBlockTime: number;
        phone: string | null;
        path: Array<string>;
        invitorId: string | null;
        avatar: string;
        count_balance: number;
        count_tournaments: number;
        count_happyhours: number;
        count_refunds: number;
        count_progress: number;
        count_daily_entries: number;
        count_invite: number;
        count_welcomebonus: number;
        count_smsbonus: number;
        count_wheelfortune: number;
        address: number;
        activeOperatorId: string | null;
        activeWalletId: string | null;
        inviteCode: string | null;
    };
};

export type PostApiAuthSignupResponse = PostApiAuthSignupResponses[keyof PostApiAuthSignupResponses];

export type PostApiAuthLogoutData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/auth/logout';
};

export type PostApiAuthLogoutErrors = {
    /**
     * Unauthorized
     */
    401: {
        error: string;
    };
};

export type PostApiAuthLogoutError = PostApiAuthLogoutErrors[keyof PostApiAuthLogoutErrors];

export type PostApiAuthLogoutResponses = {
    /**
     * Logout successful
     */
    200: {
        message: string;
    };
};

export type PostApiAuthLogoutResponse = PostApiAuthLogoutResponses[keyof PostApiAuthLogoutResponses];

export type GetApiAuthMeData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/auth/me';
};

export type GetApiAuthMeErrors = {
    /**
     * Bad Request
     */
    400: {
        message: string;
    };
};

export type GetApiAuthMeError = GetApiAuthMeErrors[keyof GetApiAuthMeErrors];

export type GetApiAuthMeResponses = {
    /**
     * The current user session
     */
    200: {
        user: {
            status: 'ACTIVE' | 'INACTIVE' | 'BANNED';
            id: string;
            username: string;
            email: string | null;
            passwordHash: string | null;
            accessToken: string | null;
            refreshToken: string | null;
            accessTokenExpiresAt: string | null;
            refreshTokenExpiresAt: string | null;
            currentGameSessionDataId: string | null;
            currentAuthSessionDataId: string | null;
            avatarUrl: string;
            role: string;
            phpId: number;
            isActive: boolean;
            lastLoginAt: string | null;
            totalXpGained: number;
            vipInfoId: string | null;
            createdAt: string | null;
            updatedAt: string | null;
            deletedAt: string | null;
            lastSeen: string | null;
            rtgBlockTime: number;
            phone: string | null;
            path: Array<string>;
            invitorId: string | null;
            avatar: string;
            count_balance: number;
            count_tournaments: number;
            count_happyhours: number;
            count_refunds: number;
            count_progress: number;
            count_daily_entries: number;
            count_invite: number;
            count_welcomebonus: number;
            count_smsbonus: number;
            count_wheelfortune: number;
            address: number;
            activeOperatorId: string | null;
            activeWalletId: string | null;
            inviteCode: string | null;
        };
        authSession: {
            status: 'ACTIVE' | 'COMPLETED' | 'EXPIRED' | 'ABANDONED' | 'TIMEOUT' | 'OTP_PENDING';
            id: string;
            userId: string;
            ipAddress: string | null;
            userAgent: string | null;
            deviceId: string | null;
            createdAt: string | null;
            expiresAt: string | null;
            lastSeen: string | null;
            otp: string | null;
            accessToken: string | null;
            phpToken: string | null;
        };
        wallet: {
            id: string;
            balance: number;
            paymentMethod: string;
            currency: string;
            address: string | null;
            cashtag: string | null;
            operatorId: string;
            lastUsedAt: string | null;
            createdAt: string | null;
            updatedAt: string | null;
            userId: string;
            isActive: boolean;
        };
        vipInfo: {
            id: string;
            level: number;
            xp: number;
            totalXp: number;
            userId: string;
            currentRankid: number | null;
            createdAt: string | null;
            updatedAt: string | null;
        };
        operator: {
            id: string;
            name: string;
            operatorSecret: string;
            operatorAccess: string;
            callbackUrl: string;
            isActive: boolean;
            allowedIps: string;
            description: string | null;
            productIds: string | null;
            balance: number;
            netRevenue: number;
            acceptedPayments: Array<string>;
            ownerId: string | null;
            lastUsedAt: string | null;
            createdAt: string | null;
            updatedAt: string | null;
            upfrontBankCredits: number;
            platformFeeRate: string;
            loyaltyContributionRate: string;
        };
        token: string;
    };
};

export type GetApiAuthMeResponse = GetApiAuthMeResponses[keyof GetApiAuthMeResponses];

export type GetApiGamesAllData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/games/all';
};

export type GetApiGamesAllErrors = {
    /**
     * Bad Request
     */
    400: {
        message: string;
    };
};

export type GetApiGamesAllError = GetApiGamesAllErrors[keyof GetApiGamesAllErrors];

export type GetApiGamesAllResponses = {
    /**
     * Top 10 deposits for the authenticated user
     */
    200: Array<{
        id: string;
        name: string;
        title: string | null;
        description: string | null;
        category: string;
        tags: string | null;
        thumbnailUrl: string | null;
        bannerUrl: string | null;
        developer: string;
        providerId: string | null;
        totalWagered: number | null;
        totalWon: number | null;
        targetRtp: number | null;
        isFeatured: boolean | null;
        statIn: number;
        statOut: number;
        isActive: boolean;
        operatorId: string | null;
        version: string | null;
        jpgIds: Array<string>;
        isHorizontal: boolean;
        jpgId: string | null;
        label: string | null;
        device: number | null;
        gamebank: string | null;
        linesPercentConfigSpin: string | null;
        linesPercentConfigSpinBonus: string | null;
        linesPercentConfigBonus: string | null;
        linesPercentConfigBonusBonus: string | null;
        rezerv: string | null;
        cask: string | null;
        advanced: string | null;
        bet: string | null;
        scaleMode: string | null;
        slotViewState: string | null;
        view: string | null;
        denomination: string | null;
        categoryTemp: string | null;
        originalId: string | null;
        bids: Array<string>;
        rtpStatIn: number | null;
        rtpStatOut: number | null;
        currentRtp: string | null;
        createdAt: string | null;
        updatedAt: string | null;
        status: number;
    }>;
};

export type GetApiGamesAllResponse = GetApiGamesAllResponses[keyof GetApiGamesAllResponses];

export type GetApiGamesSearchData = {
    body?: never;
    path?: never;
    query?: {
        game_categories_slug?: string;
        page?: string;
        limit?: string;
    };
    url: '/api/games/search';
};

export type GetApiGamesSearchErrors = {
    /**
     * Bad Request
     */
    400: {
        message: string;
    };
};

export type GetApiGamesSearchError = GetApiGamesSearchErrors[keyof GetApiGamesSearchErrors];

export type GetApiGamesSearchResponses = {
    /**
     * A list of games matching the search criteria
     */
    200: {
        gameId: string;
    };
};

export type GetApiGamesSearchResponse = GetApiGamesSearchResponses[keyof GetApiGamesSearchResponses];

export type PostApiGamesByIdEnterData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/games/{id}/enter';
};

export type PostApiGamesByIdEnterResponses = {
    /**
     * Game session details
     */
    200: {
        webUrl: string;
        gameConfig: {
            authToken: string;
            gameSessionId: string;
            userId: string;
            gameName: string;
            lobbyUrl: string;
            depositUrl: string;
            operator?: string;
            provider?: string;
            lang?: string;
            currency?: string;
            mode?: string;
            device?: string;
            rgsApiBase?: string;
            cdn?: string;
            baseCdn?: string;
        };
    };
};

export type PostApiGamesByIdEnterResponse = PostApiGamesByIdEnterResponses[keyof PostApiGamesByIdEnterResponses];

export type PostApiGamesLeaveData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/games/leave';
};

export type PostApiGamesLeaveResponses = {
    /**
     * Success
     */
    200: unknown;
};

export type GetApiGamesCheckSessionData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/games/check/session';
};

export type GetApiGamesCheckSessionErrors = {
    /**
     * Bad Request
     */
    400: {
        message: string;
    };
};

export type GetApiGamesCheckSessionError = GetApiGamesCheckSessionErrors[keyof GetApiGamesCheckSessionErrors];

export type GetApiGamesCheckSessionResponses = {
    /**
     * The user object and sets an access token cookie.
     */
    200: {
        gameId: string;
    };
};

export type GetApiGamesCheckSessionResponse = GetApiGamesCheckSessionResponses[keyof GetApiGamesCheckSessionResponses];

export type GetApiGamespinsTopwinsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/gamespins/topwins';
};

export type GetApiGamespinsTopwinsResponses = {
    /**
     * The list of topwins
     */
    200: Array<{
        id: string;
        playerName: string | null;
        gameName: string | null;
        gameId: string | null;
        spinData: string | null;
        grossWinAmount: number;
        wagerAmount: number;
        spinNumber: number;
        playerAvatar: string | null;
        currencyId: string | null;
        sessionId: string;
        userId: string | null;
        createdAt: string | null;
        updatedAt: string | null;
        occurredAt: string | null;
        sessionDataId: string | null;
        type: string | null;
        operatorId: string | null;
        status: string | null;
        playerBalanceAtStart: number;
        playerBalance: number;
        gamePlayerWinTotalTodayid: number;
        playerBetTotalToday: number;
        sessionTotalWinAmount: number;
        sessionTotalBetAmount: number;
        gameSessionRtp: number;
        playerRtpToday: number;
        winAmount: number;
        betAmount: number;
    }>;
};

export type GetApiGamespinsTopwinsResponse = GetApiGamespinsTopwinsResponses[keyof GetApiGamespinsTopwinsResponses];

export type GetApiVipRanksData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/vip/ranks';
};

export type GetApiVipRanksResponses = {
    /**
     * The list of VIP ranks
     */
    200: Array<{
        id: number;
        name: string;
        minXp: number;
        icon: string;
        dailyCashbackMax: number;
        monthlyCashbackMax: number;
        wagerBonusCoinPct: number;
        purchaseBonusCoinPct: number;
        levelUpBonusCoinPct: number;
        vipSpinMaxAmount: number;
        hasConcierge: boolean;
        hasVipLoungeAccess: boolean;
        isInvitationOnly: boolean;
    }>;
};

export type GetApiVipRanksResponse = GetApiVipRanksResponses[keyof GetApiVipRanksResponses];

export type PostApiVipRanksData = {
    /**
     * The VIP rank to create
     */
    body: {
        id: number;
        name: string;
        minXp: number;
        icon: string;
        dailyCashbackMax: number;
        monthlyCashbackMax: number;
        wagerBonusCoinPct: number;
        purchaseBonusCoinPct: number;
        levelUpBonusCoinPct: number;
        vipSpinMaxAmount: number;
        hasConcierge: boolean;
        hasVipLoungeAccess: boolean;
        isInvitationOnly: boolean;
    };
    path?: never;
    query?: never;
    url: '/api/vip/ranks';
};

export type PostApiVipRanksResponses = {
    /**
     * The created VIP rank
     */
    201: {
        id: number;
        name: string;
        minXp: number;
        icon: string;
        dailyCashbackMax: number;
        monthlyCashbackMax: number;
        wagerBonusCoinPct: number;
        purchaseBonusCoinPct: number;
        levelUpBonusCoinPct: number;
        vipSpinMaxAmount: number;
        hasConcierge: boolean;
        hasVipLoungeAccess: boolean;
        isInvitationOnly: boolean;
    };
};

export type PostApiVipRanksResponse = PostApiVipRanksResponses[keyof PostApiVipRanksResponses];

export type GetApiVipLevelsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/vip/levels';
};

export type GetApiVipLevelsResponses = {
    /**
     * The list of VIP levels
     */
    200: Array<{
        id: string;
        parentId: number;
        minXpNeeded: number;
        levelNumber: number;
        levelName: string;
        spinBonusMultiplier: number;
        settingId: number | null;
        levelUpBonusAmount: number | null;
    }>;
};

export type GetApiVipLevelsResponse = GetApiVipLevelsResponses[keyof GetApiVipLevelsResponses];

export type PostApiVipLevelsData = {
    /**
     * The VIP level to create
     */
    body: {
        id: string;
        parentId: number;
        minXpNeeded: number;
        levelNumber: number;
        levelName: string;
        spinBonusMultiplier: number;
        settingId: number | null;
        levelUpBonusAmount: number | null;
    };
    path?: never;
    query?: never;
    url: '/api/vip/levels';
};

export type PostApiVipLevelsResponses = {
    /**
     * The created VIP level
     */
    201: {
        id: string;
        parentId: number;
        minXpNeeded: number;
        levelNumber: number;
        levelName: string;
        spinBonusMultiplier: number;
        settingId: number | null;
        levelUpBonusAmount: number | null;
    };
};

export type PostApiVipLevelsResponse = PostApiVipLevelsResponses[keyof PostApiVipLevelsResponses];

export type PostApiVipCashbackData = {
    /**
     * The VIP cashback to create
     */
    body: {
        id: string;
        userId: string | null;
        amount: number;
        currency: string;
        tiersName: string;
        type: string;
        createdAt: string | null;
    };
    path?: never;
    query?: never;
    url: '/api/vip/cashback';
};

export type PostApiVipCashbackResponses = {
    /**
     * The created VIP cashback
     */
    201: {
        id: string;
        userId: string | null;
        amount: number;
        currency: string;
        tiersName: string;
        type: string;
        createdAt: string | null;
    };
};

export type PostApiVipCashbackResponse = PostApiVipCashbackResponses[keyof PostApiVipCashbackResponses];

export type GetApiVipCashbackByUserIdData = {
    body?: never;
    path: {
        userId: string;
    };
    query?: never;
    url: '/api/vip/cashback/{userId}';
};

export type GetApiVipCashbackByUserIdResponses = {
    /**
     * The list of VIP cashbacks
     */
    200: Array<{
        id: string;
        userId: string | null;
        amount: number;
        currency: string;
        tiersName: string;
        type: string;
        createdAt: string | null;
    }>;
};

export type GetApiVipCashbackByUserIdResponse = GetApiVipCashbackByUserIdResponses[keyof GetApiVipCashbackByUserIdResponses];

export type PostApiVipCashbackMonthlyTriggerData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/vip/cashback/monthly/trigger';
};

export type PostApiVipCashbackMonthlyTriggerResponses = {
    /**
     * The monthly cashback trigger response
     */
    200: {
        message: string;
    };
};

export type PostApiVipCashbackMonthlyTriggerResponse = PostApiVipCashbackMonthlyTriggerResponses[keyof PostApiVipCashbackMonthlyTriggerResponses];

export type GetApiVipBonusByUserIdData = {
    body?: never;
    path: {
        userId: string;
    };
    query?: never;
    url: '/api/vip/bonus/{userId}';
};

export type GetApiVipBonusByUserIdResponses = {
    /**
     * The available level up bonus
     */
    200: {
        id: string;
        userId: string;
        amount: number;
        levelName: string;
        levelXp: number;
        createdAt: string | null;
    };
};

export type GetApiVipBonusByUserIdResponse = GetApiVipBonusByUserIdResponses[keyof GetApiVipBonusByUserIdResponses];

export type PostApiVipLevelupCalculateData = {
    /**
     * The level up calculation request
     */
    body: {
        userId: string;
        turnover: number;
    };
    path?: never;
    query?: never;
    url: '/api/vip/levelup/calculate';
};

export type PostApiVipLevelupCalculateResponses = {
    /**
     * The level up calculation response
     */
    200: {
        message: string;
    };
};

export type PostApiVipLevelupCalculateResponse = PostApiVipLevelupCalculateResponses[keyof PostApiVipLevelupCalculateResponses];

export type PostApiVipSpinRewardData = {
    /**
     * The VIP spin reward to create
     */
    body: {
        id: string;
        userId: string;
        amount: number;
        currency: string;
        createdAt: string | null;
    };
    path?: never;
    query?: never;
    url: '/api/vip/spin-reward';
};

export type PostApiVipSpinRewardResponses = {
    /**
     * The created VIP spin reward
     */
    201: {
        id: string;
        userId: string;
        amount: number;
        currency: string;
        createdAt: string | null;
    };
};

export type PostApiVipSpinRewardResponse = PostApiVipSpinRewardResponses[keyof PostApiVipSpinRewardResponses];

export type GetApiVipSpinRewardTotalData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/vip/spin-reward/total';
};

export type GetApiVipSpinRewardTotalResponses = {
    /**
     * The total bonus amount
     */
    200: {
        total: number;
    };
};

export type GetApiVipSpinRewardTotalResponse = GetApiVipSpinRewardTotalResponses[keyof GetApiVipSpinRewardTotalResponses];

export type GetApiVipSpinRewardWinnersData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/vip/spin-reward/winners';
};

export type GetApiVipSpinRewardWinnersResponses = {
    /**
     * The list of VIP spin reward winners
     */
    200: Array<{
        id: string;
        userId: string;
        amount: number;
        currency: string;
        createdAt: string | null;
    }>;
};

export type GetApiVipSpinRewardWinnersResponse = GetApiVipSpinRewardWinnersResponses[keyof GetApiVipSpinRewardWinnersResponses];

export type GetApiVipSpinRewardLastByUserIdData = {
    body?: never;
    path: {
        userId: string;
    };
    query?: never;
    url: '/api/vip/spin-reward/last/{userId}';
};

export type GetApiVipSpinRewardLastByUserIdResponses = {
    /**
     * The last spin record
     */
    200: {
        id: string;
        userId: string;
        amount: number;
        currency: string;
        createdAt: string | null;
    };
};

export type GetApiVipSpinRewardLastByUserIdResponse = GetApiVipSpinRewardLastByUserIdResponses[keyof GetApiVipSpinRewardLastByUserIdResponses];

export type GetApiDashboardSettlementsData = {
    body?: never;
    path?: never;
    query?: {
        limit?: string;
    };
    url: '/api/dashboard/settlements';
};

export type GetApiDashboardSettlementsErrors = {
    /**
     * Failed to retrieve settlement history
     */
    500: {
        success: boolean;
        error: string;
    };
};

export type GetApiDashboardSettlementsError = GetApiDashboardSettlementsErrors[keyof GetApiDashboardSettlementsErrors];

export type GetApiDashboardSettlementsResponses = {
    /**
     * Settlement history retrieved successfully
     */
    200: {
        success: boolean;
        data: Array<unknown>;
    };
};

export type GetApiDashboardSettlementsResponse = GetApiDashboardSettlementsResponses[keyof GetApiDashboardSettlementsResponses];

export type GetApiDashboardLoyaltyReportData = {
    body?: never;
    path?: never;
    query: {
        period: 'weekly' | 'monthly';
    };
    url: '/api/dashboard/loyalty-report';
};

export type GetApiDashboardLoyaltyReportErrors = {
    /**
     * Invalid period parameter
     */
    400: {
        success: boolean;
        error: string;
    };
    /**
     * Failed to retrieve loyalty report
     */
    500: {
        success: boolean;
        error: string;
    };
};

export type GetApiDashboardLoyaltyReportError = GetApiDashboardLoyaltyReportErrors[keyof GetApiDashboardLoyaltyReportErrors];

export type GetApiDashboardLoyaltyReportResponses = {
    /**
     * Loyalty report retrieved successfully
     */
    200: {
        success: boolean;
        data: {
            period: string;
            startDate: string;
            endDate: string;
            totalContribution: number;
            totalBenefitsToPlayers: number;
        };
    };
};

export type GetApiDashboardLoyaltyReportResponse = GetApiDashboardLoyaltyReportResponses[keyof GetApiDashboardLoyaltyReportResponses];

export type GetApiDashboardKpisData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/dashboard/kpis';
};

export type GetApiDashboardKpisErrors = {
    /**
     * Failed to retrieve KPIs
     */
    500: {
        success: boolean;
        error: string;
    };
};

export type GetApiDashboardKpisError = GetApiDashboardKpisErrors[keyof GetApiDashboardKpisErrors];

export type GetApiDashboardKpisResponses = {
    /**
     * KPIs retrieved successfully
     */
    200: {
        success: boolean;
        data: {
            totalPlayers: number;
            totalDeposits: number;
            totalWithdrawals: number;
            totalBets: number;
            totalWins: number;
            period: string;
        };
    };
};

export type GetApiDashboardKpisResponse = GetApiDashboardKpisResponses[keyof GetApiDashboardKpisResponses];

export type GetApiDashboardTopPlayersData = {
    body?: never;
    path?: never;
    query?: {
        metric?: 'bets' | 'wins' | 'balance';
        limit?: string;
    };
    url: '/api/dashboard/top-players';
};

export type GetApiDashboardTopPlayersErrors = {
    /**
     * Invalid metric parameter
     */
    400: {
        success: boolean;
        error: string;
    };
    /**
     * Failed to retrieve top players
     */
    500: {
        success: boolean;
        error: string;
    };
};

export type GetApiDashboardTopPlayersError = GetApiDashboardTopPlayersErrors[keyof GetApiDashboardTopPlayersErrors];

export type GetApiDashboardTopPlayersResponses = {
    /**
     * Top players retrieved successfully
     */
    200: {
        success: boolean;
        data: Array<unknown>;
        metric: string;
    };
};

export type GetApiDashboardTopPlayersResponse = GetApiDashboardTopPlayersResponses[keyof GetApiDashboardTopPlayersResponses];

export type GetApiDashboardRecentActivityData = {
    body?: never;
    path?: never;
    query?: {
        days?: string;
    };
    url: '/api/dashboard/recent-activity';
};

export type GetApiDashboardRecentActivityErrors = {
    /**
     * Failed to retrieve recent activity
     */
    500: {
        success: boolean;
        error: string;
    };
};

export type GetApiDashboardRecentActivityError = GetApiDashboardRecentActivityErrors[keyof GetApiDashboardRecentActivityErrors];

export type GetApiDashboardRecentActivityResponses = {
    /**
     * Recent activity retrieved successfully
     */
    200: {
        success: boolean;
        data: {
            recentTransactions: Array<unknown>;
            recentLoyaltyActivity: Array<unknown>;
            periodDays: number;
        };
    };
};

export type GetApiDashboardRecentActivityResponse = GetApiDashboardRecentActivityResponses[keyof GetApiDashboardRecentActivityResponses];

export type GetApiDashboardKpiSummaryData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/dashboard/kpi-summary';
};

export type GetApiDashboardKpiSummaryErrors = {
    /**
     * Failed to retrieve KPI summary
     */
    500: {
        success: boolean;
        error: string;
    };
};

export type GetApiDashboardKpiSummaryError = GetApiDashboardKpiSummaryErrors[keyof GetApiDashboardKpiSummaryErrors];

export type GetApiDashboardKpiSummaryResponses = {
    /**
     * KPI summary retrieved successfully
     */
    200: {
        success: boolean;
        data: {
            totalRevenue: number;
            activePlayers24h: number;
            newUsers24h: number;
            operatorBalance: number;
        };
    };
};

export type GetApiDashboardKpiSummaryResponse = GetApiDashboardKpiSummaryResponses[keyof GetApiDashboardKpiSummaryResponses];

export type GetApiDashboardTransactionsData = {
    body?: never;
    path?: never;
    query?: {
        page?: string;
        pageSize?: string;
        userId?: string;
        status?: string;
        startDate?: string;
        endDate?: string;
    };
    url: '/api/dashboard/transactions';
};

export type GetApiDashboardTransactionsErrors = {
    /**
     * Failed to retrieve transactions
     */
    500: {
        success: boolean;
        error: string;
    };
};

export type GetApiDashboardTransactionsError = GetApiDashboardTransactionsErrors[keyof GetApiDashboardTransactionsErrors];

export type GetApiDashboardTransactionsResponses = {
    /**
     * Transactions retrieved successfully
     */
    200: {
        success: boolean;
        data: Array<unknown>;
        pagination: {
            totalItems: number;
            totalPages: number;
            currentPage: number;
        };
    };
};

export type GetApiDashboardTransactionsResponse = GetApiDashboardTransactionsResponses[keyof GetApiDashboardTransactionsResponses];

export type GetApiDashboardUserActivityData = {
    body?: never;
    path?: never;
    query?: {
        dateRange?: 'last7days' | 'last30days';
        startDate?: string;
        endDate?: string;
    };
    url: '/api/dashboard/user-activity';
};

export type GetApiDashboardUserActivityErrors = {
    /**
     * Failed to retrieve user activity
     */
    500: {
        success: boolean;
        error: string;
    };
};

export type GetApiDashboardUserActivityError = GetApiDashboardUserActivityErrors[keyof GetApiDashboardUserActivityErrors];

export type GetApiDashboardUserActivityResponses = {
    /**
     * User activity retrieved successfully
     */
    200: {
        success: boolean;
        data: {
            newUsers: number;
            removedUsers: number;
        };
    };
};

export type GetApiDashboardUserActivityResponse = GetApiDashboardUserActivityResponses[keyof GetApiDashboardUserActivityResponses];

export type GetApiDashboardGameStatsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/dashboard/game-stats';
};

export type GetApiDashboardGameStatsErrors = {
    /**
     * Failed to retrieve game statistics
     */
    500: {
        success: boolean;
        error: string;
    };
};

export type GetApiDashboardGameStatsError = GetApiDashboardGameStatsErrors[keyof GetApiDashboardGameStatsErrors];

export type GetApiDashboardGameStatsResponses = {
    /**
     * Game statistics retrieved successfully
     */
    200: {
        success: boolean;
        data: Array<{
            gameId: string;
            gameName: string;
            totalSpins: number;
            totalWagered: number;
            totalWon: number;
            winLossRatio: number;
        }>;
    };
};

export type GetApiDashboardGameStatsResponse = GetApiDashboardGameStatsResponses[keyof GetApiDashboardGameStatsResponses];

export type GetApiDashboardPlayersData = {
    body?: never;
    path?: never;
    query?: {
        page?: string;
        pageSize?: string;
    };
    url: '/api/dashboard/players';
};

export type GetApiDashboardPlayersErrors = {
    /**
     * Failed to retrieve players
     */
    500: {
        success: boolean;
        error: string;
    };
};

export type GetApiDashboardPlayersError = GetApiDashboardPlayersErrors[keyof GetApiDashboardPlayersErrors];

export type GetApiDashboardPlayersResponses = {
    /**
     * Players retrieved successfully
     */
    200: {
        success: boolean;
        data: Array<unknown>;
        pagination: {
            totalItems: number;
            totalPages: number;
            currentPage: number;
        };
    };
};

export type GetApiDashboardPlayersResponse = GetApiDashboardPlayersResponses[keyof GetApiDashboardPlayersResponses];

export type GetApiOperatorsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/operators';
};

export type GetApiOperatorsErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
};

export type GetApiOperatorsResponses = {
    /**
     * Returns a list of operators.
     */
    200: Array<{
        id: string;
        name: string;
        operatorSecret: string;
        operatorAccess: string;
        callbackUrl: string;
        isActive: boolean;
        allowedIps: string;
        description: string | null;
        productIds: string | null;
        balance: number;
        netRevenue: number;
        acceptedPayments: Array<string>;
        ownerId: string | null;
        lastUsedAt: string | null;
        createdAt: string | null;
        updatedAt: string | null;
        upfrontBankCredits: number;
        platformFeeRate: string;
        loyaltyContributionRate: string;
    }>;
};

export type GetApiOperatorsResponse = GetApiOperatorsResponses[keyof GetApiOperatorsResponses];

export type GetApiOperatorsProductsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/operators/products';
};

export type GetApiOperatorsProductsErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
};

export type GetApiOperatorsProductsResponses = {
    /**
     * Returns a list of products.
     */
    200: {
        operator: {
            id: string;
            name: string;
            operatorSecret: string;
            operatorAccess: string;
            callbackUrl: string;
            isActive: boolean;
            allowedIps: string;
            description: string | null;
            productIds: string | null;
            balance: number;
            netRevenue: number;
            acceptedPayments: Array<string>;
            ownerId: string | null;
            lastUsedAt: string | null;
            createdAt: string | null;
            updatedAt: string | null;
            upfrontBankCredits: number;
            platformFeeRate: string;
            loyaltyContributionRate: string;
        };
        product: Array<{
            id: string;
            title: string;
            productType: string;
            bonusTotalInCredits: number;
            isActive: boolean | null;
            priceInCents: number;
            amountToReceiveInCredits: number;
            bestValue: number;
            discountInCents: number;
            bonusSpins: number;
            isPromo: boolean | null;
            totalDiscountInCents: number;
            operatorId: string | null;
            createdAt: string | null;
            updatedAt: string | null;
        }>;
    };
};

export type GetApiOperatorsProductsResponse = GetApiOperatorsProductsResponses[keyof GetApiOperatorsProductsResponses];

export type PostApiRedtigerGameSettingsData = {
    body?: unknown;
    path?: never;
    query?: never;
    url: '/api/redtiger/game/settings';
};

export type PostApiRedtigerGameSettingsErrors = {
    /**
     * Internal Server Error
     */
    500: {
        success: boolean;
        error: {
            code: string;
            message: string;
        };
    };
};

export type PostApiRedtigerGameSettingsError = PostApiRedtigerGameSettingsErrors[keyof PostApiRedtigerGameSettingsErrors];

export type PostApiRedtigerGameSettingsResponses = {
    /**
     * Redtiger game settings
     */
    200: {
        success: boolean;
        result?: {
            user: {
                balance: {
                    cash: string;
                    freeBets?: string;
                    bonus?: string;
                };
                canGamble: boolean;
                userId: number | string;
                sessionId: string;
                sessionNetPosition?: string;
                token: string;
                country?: string;
                currency?: {
                    code: string;
                    symbol: string;
                };
                stakes?: unknown;
                limits?: unknown;
                serverTime: string;
            };
            games?: {
                version?: string;
                gamesType?: string;
            };
            launcher?: {
                version?: string;
            };
            jackpots?: unknown;
        };
        error?: {
            code: string;
            message: string;
            details?: unknown;
        };
    };
};

export type PostApiRedtigerGameSettingsResponse = PostApiRedtigerGameSettingsResponses[keyof PostApiRedtigerGameSettingsResponses];

export type PostApiRedtigerGameSpinData = {
    body?: unknown;
    path?: never;
    query?: never;
    url: '/api/redtiger/game/spin';
};

export type PostApiRedtigerGameSpinErrors = {
    /**
     * Internal Server Error
     */
    500: {
        success: boolean;
        error: {
            code: string;
            message: string;
        };
    };
};

export type PostApiRedtigerGameSpinError = PostApiRedtigerGameSpinErrors[keyof PostApiRedtigerGameSpinErrors];

export type PostApiRedtigerGameSpinResponses = {
    /**
     * Redtiger spin result
     */
    200: {
        transactions: {
            roundId: number | string;
        };
        user: {
            balance: {
                cash: {
                    atStart?: string;
                    afterBet?: string;
                    atEnd: string;
                };
                freeBets?: {
                    atStart?: string;
                    afterBet?: string;
                    atEnd: string;
                };
                bonus?: {
                    atStart?: string;
                    afterBet?: string;
                    atEnd: string;
                };
            };
            userId: number | string;
            sessionId: string;
            sessionNetPosition?: string;
            token: string;
            serverTime: string;
            canGamble?: boolean;
        };
        game: {
            win: {
                instantWin?: string;
                lines?: string;
                total: string;
            };
            stake: string;
            multiplier?: number;
            winLines?: Array<unknown>;
            reelsBuffer?: Array<Array<Array<number>>>;
            xpBreakdown?: {
                baseXp: number;
                bonusXp: number;
                totalXp: number;
            };
        };
        jackpots?: unknown;
        bonusChance?: unknown;
    };
};

export type PostApiRedtigerGameSpinResponse = PostApiRedtigerGameSpinResponses[keyof PostApiRedtigerGameSpinResponses];

export type PostApiGameByGameNameServer__Data = {
    body?: never;
    path: {
        gameName: string;
    };
    query?: never;
    url: '/api/game/{gameName}/server/*';
};

export type PostApiGameByGameNameServer__Errors = {
    /**
     * Bad Request - Validation Error
     */
    400: {
        success?: boolean;
        error: {
            code: string;
            message: string;
            details?: unknown;
        };
    };
    /**
     * Unauthorized
     */
    401: {
        success?: boolean;
        error: {
            code: string;
            message: string;
            details?: unknown;
        };
    };
    /**
     * Game Not Found
     */
    404: {
        success?: boolean;
        error: {
            code: string;
            message: string;
            details?: unknown;
        };
    };
    /**
     * Internal Server Error
     */
    500: {
        success?: boolean;
        error: {
            code: string;
            message: string;
            details?: unknown;
        };
    };
};

export type PostApiGameByGameNameServer__Error = PostApiGameByGameNameServer__Errors[keyof PostApiGameByGameNameServer__Errors];

export type PostApiGameByGameNameServer__Responses = {
    /**
     * Successful spin response or init/paytable string.
     */
    200: {
        success: boolean;
        message: string;
        data: {
            winAmount: number;
            balance: number;
            reels?: {
                [key: string]: Array<unknown>;
            };
            winLines: Array<unknown>;
            isBonus: boolean;
            freeSpinState?: unknown;
            isRespin?: boolean;
        };
    };
};

export type PostApiGameByGameNameServer__Response = PostApiGameByGameNameServer__Responses[keyof PostApiGameByGameNameServer__Responses];

export type PostApiGameConfig__Data = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/game/config/*';
};

export type PostApiGameConfig__Errors = {
    /**
     * Bad Request - Validation Error
     */
    400: {
        success?: boolean;
        error: {
            code: string;
            message: string;
            details?: unknown;
        };
    };
    /**
     * Unauthorized
     */
    401: {
        success?: boolean;
        error: {
            code: string;
            message: string;
            details?: unknown;
        };
    };
    /**
     * Game Not Found
     */
    404: {
        success?: boolean;
        error: {
            code: string;
            message: string;
            details?: unknown;
        };
    };
    /**
     * Internal Server Error
     */
    500: {
        success?: boolean;
        error: {
            code: string;
            message: string;
            details?: unknown;
        };
    };
};

export type PostApiGameConfig__Error = PostApiGameConfig__Errors[keyof PostApiGameConfig__Errors];

export type PostApiGameConfig__Responses = {
    /**
     * Successful spin response or init/paytable string.
     */
    200: {
        success: boolean;
        message: string;
        data: {
            winAmount: number;
            balance: number;
            reels?: {
                [key: string]: Array<unknown>;
            };
            winLines: Array<unknown>;
            isBonus: boolean;
            freeSpinState?: unknown;
            isRespin?: boolean;
        };
    };
};

export type PostApiGameConfig__Response = PostApiGameConfig__Responses[keyof PostApiGameConfig__Responses];
