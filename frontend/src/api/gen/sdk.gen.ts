// This file is auto-generated by @hey-api/openapi-ts

import { type Client, formDataBodySerializer, type Options as Options2, type TDataShape } from './client';
import { client } from './client.gen';
import type { DeleteApiReferralCodeReferralCodeIdData, DeleteApiReferralCodeReferralCodeIdResponses, DeleteApiUsersByIdData, DeleteApiUsersByIdErrors, DeleteApiUsersByIdResponses, GetApiAuthMeData, GetApiAuthMeErrors, GetApiAuthMeResponses, GetApiDashboardGameStatsData, GetApiDashboardGameStatsErrors, GetApiDashboardGameStatsResponses, GetApiDashboardKpisData, GetApiDashboardKpisErrors, GetApiDashboardKpisResponses, GetApiDashboardKpiSummaryData, GetApiDashboardKpiSummaryErrors, GetApiDashboardKpiSummaryResponses, GetApiDashboardLoyaltyReportData, GetApiDashboardLoyaltyReportErrors, GetApiDashboardLoyaltyReportResponses, GetApiDashboardPlayersData, GetApiDashboardPlayersErrors, GetApiDashboardPlayersResponses, GetApiDashboardRecentActivityData, GetApiDashboardRecentActivityErrors, GetApiDashboardRecentActivityResponses, GetApiDashboardSettlementsData, GetApiDashboardSettlementsErrors, GetApiDashboardSettlementsResponses, GetApiDashboardTopPlayersData, GetApiDashboardTopPlayersErrors, GetApiDashboardTopPlayersResponses, GetApiDashboardTransactionsData, GetApiDashboardTransactionsErrors, GetApiDashboardTransactionsResponses, GetApiDashboardUserActivityData, GetApiDashboardUserActivityErrors, GetApiDashboardUserActivityResponses, GetApiFavoriteGameData, GetApiFavoriteGameResponses, GetApiGamesAllData, GetApiGamesAllErrors, GetApiGamesAllResponses, GetApiGamesCheckSessionData, GetApiGamesCheckSessionErrors, GetApiGamesCheckSessionResponses, GetApiGamespinsTopwinsData, GetApiGamespinsTopwinsResponses, GetApiGamesSearchData, GetApiGamesSearchErrors, GetApiGamesSearchResponses, GetApiOperatorsData, GetApiOperatorsErrors, GetApiOperatorsProductsData, GetApiOperatorsProductsErrors, GetApiOperatorsProductsResponses, GetApiOperatorsResponses, GetApiReferralCodeData, GetApiReferralCodeResponses, GetApiReferralCodeStatusData, GetApiReferralCodeStatusResponses, GetApiRewardActivityData, GetApiRewardActivityResponses, GetApiRewardDashboardData, GetApiRewardDashboardResponses, GetApiRewardStatusData, GetApiRewardStatusResponses, GetApiSpinpageData, GetApiSpinpageResponses, GetApiTransactionsDepositsByIdData, GetApiTransactionsDepositsByIdErrors, GetApiTransactionsDepositsByIdResponses, GetApiTransactionsDepositsTop10Data, GetApiTransactionsDepositsTop10Errors, GetApiTransactionsDepositsTop10Responses, GetApiUpdatesDownloadByFilenameData, GetApiUpdatesDownloadByFilenameErrors, GetApiUpdatesDownloadByFilenameResponses, GetApiUpdatesVersionsByAppIdByPlatformData, GetApiUpdatesVersionsByAppIdByPlatformErrors, GetApiUpdatesVersionsByAppIdByPlatformResponses, GetApiUserAmountData, GetApiUserAmountResponses, GetApiUsersByIdCheckData, GetApiUsersByIdCheckErrors, GetApiUsersByIdCheckResponses, GetApiUsersByIdData, GetApiUsersByIdErrors, GetApiUsersByIdInfoData, GetApiUsersByIdInfoErrors, GetApiUsersByIdInfoResponses, GetApiUsersByIdResponses, GetApiUsersByIdVipinfoData, GetApiUsersByIdVipinfoResponses, GetApiUsersData, GetApiUsersResponses, GetApiVipBonusByUserIdData, GetApiVipBonusByUserIdResponses, GetApiVipCashbackByUserIdData, GetApiVipCashbackByUserIdResponses, GetApiVipLevelsData, GetApiVipLevelsResponses, GetApiVipRanksData, GetApiVipRanksResponses, GetApiVipSpinRewardLastByUserIdData, GetApiVipSpinRewardLastByUserIdResponses, GetApiVipSpinRewardTotalData, GetApiVipSpinRewardTotalResponses, GetApiVipSpinRewardWinnersData, GetApiVipSpinRewardWinnersResponses, GetApiWalletsData, GetApiWalletsErrors, GetApiWalletsHistoryData, GetApiWalletsHistoryResponses, GetApiWalletsResponses, PatchApiTransactionsDepositsByIdStatusData, PatchApiTransactionsDepositsByIdStatusErrors, PatchApiTransactionsDepositsByIdStatusResponses, PatchApiUsersByIdData, PatchApiUsersByIdErrors, PatchApiUsersByIdResponses, PostApiAuthLoginData, PostApiAuthLoginErrors, PostApiAuthLoginResponses, PostApiAuthLogoutData, PostApiAuthLogoutErrors, PostApiAuthLogoutResponses, PostApiAuthSignupData, PostApiAuthSignupErrors, PostApiAuthSignupResponses, PostApiEndGameSessionData, PostApiEndGameSessionErrors, PostApiEndGameSessionResponses, PostApiEnterGameData, PostApiEnterGameResponses, PostApiGameByGameNameServer__Data, PostApiGameByGameNameServer__Errors, PostApiGameByGameNameServer__Responses, PostApiGameConfig__Data, PostApiGameConfig__Errors, PostApiGameConfig__Responses, PostApiGamesByIdEnterData, PostApiGamesByIdEnterResponses, PostApiGamesData, PostApiGamesLeaveData, PostApiGamesLeaveResponses, PostApiGamesResponses, PostApiRedtigerGameSettingsData, PostApiRedtigerGameSettingsErrors, PostApiRedtigerGameSettingsResponses, PostApiRedtigerGameSpinData, PostApiRedtigerGameSpinErrors, PostApiRedtigerGameSpinResponses, PostApiReferralCodeData, PostApiReferralCodeResponses, PostApiRewardConvertData, PostApiRewardConvertResponses, PostApiRewardGetLogData, PostApiRewardGetLogResponses, PostApiSetupGameData, PostApiSetupGameResponses, PostApiSpinData, PostApiSpinResponses, PostApiTransactionsDepositsData, PostApiTransactionsDepositsErrors, PostApiTransactionsDepositsResponses, PostApiUpdatesCheckData, PostApiUpdatesCheckResponses, PostApiUpdatesUploadData, PostApiUpdatesUploadErrors, PostApiUpdatesUploadResponses, PostApiUserChangeData, PostApiUserChangeResponses, PostApiUserEmailData, PostApiUserEmailResponses, PostApiUserPasswordData, PostApiUserPasswordResponses, PostApiUsersByIdVerifyEmailData, PostApiUsersByIdVerifyEmailResponses, PostApiUserSuspendData, PostApiUserSuspendResponses, PostApiVipCashbackData, PostApiVipCashbackMonthlyTriggerData, PostApiVipCashbackMonthlyTriggerResponses, PostApiVipCashbackResponses, PostApiVipLevelsData, PostApiVipLevelsResponses, PostApiVipLevelupCalculateData, PostApiVipLevelupCalculateResponses, PostApiVipRanksData, PostApiVipRanksResponses, PostApiVipSpinRewardData, PostApiVipSpinRewardResponses, PostApiWalletsCashtagData, PostApiWalletsCashtagErrors, PostApiWalletsCashtagResponses, PostApiWalletsSwitchOperatorData, PostApiWalletsSwitchOperatorErrors, PostApiWalletsSwitchOperatorResponses } from './types.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = Options2<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 *
 *
 * **POST /api/updates/check** ·· [postApiUpdatesCheck](http://localhost:9999/docs#tag/Upates/post/api/updates/check) ·· _Upates_
 *
 * @param {postApiUpdatesCheckData} options
 * @returns Possible status codes: 200
 */
export const postApiUpdatesCheck = <ThrowOnError extends boolean = true>(options?: Options<PostApiUpdatesCheckData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostApiUpdatesCheckResponses, unknown, ThrowOnError, 'data'>({
        responseStyle: 'data',
        url: '/api/updates/check',
        ...options
    });
};

/**
 * Upload a new application version (APK or OTA bundle)
 *
 *
 *
 * **POST /api/updates/upload** ·· [postApiUpdatesUpload](http://localhost:9999/docs#tag/Updates/post/api/updates/upload) ·· _Updates_
 *
 * @param {postApiUpdatesUploadData} options
 * @returns Possible status codes: 200, 400
 */
export const postApiUpdatesUpload = <ThrowOnError extends boolean = true>(options?: Options<PostApiUpdatesUploadData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostApiUpdatesUploadResponses, PostApiUpdatesUploadErrors, ThrowOnError, 'data'>({
        ...formDataBodySerializer,
        responseStyle: 'data',
        url: '/api/updates/upload',
        ...options,
        headers: {
            'Content-Type': null,
            ...options?.headers
        }
    });
};

/**
 * Download an update file (for local development only)
 *
 *
 *
 * **GET /api/updates/download/{filename}** ·· [getApiUpdatesDownloadByFilename](http://localhost:9999/docs#tag/Updates/get/api/updates/download/{filename}) ·· _Updates_
 *
 * @param {getApiUpdatesDownloadByFilenameData} options
 * @param {string} options.path.filename - `string`
 * @returns Possible status codes: 200, 404
 */
export const getApiUpdatesDownloadByFilename = <ThrowOnError extends boolean = true>(options: Options<GetApiUpdatesDownloadByFilenameData, ThrowOnError>) => {
    return (options.client ?? client).get<GetApiUpdatesDownloadByFilenameResponses, GetApiUpdatesDownloadByFilenameErrors, ThrowOnError, 'data'>({
        responseStyle: 'data',
        url: '/api/updates/download/{filename}',
        ...options
    });
};

/**
 * List all available versions for an app and platform
 *
 *
 *
 * **GET /api/updates/versions/{appId}/{platform}** ·· [getApiUpdatesVersionsByAppIdByPlatform](http://localhost:9999/docs#tag/Updates/get/api/updates/versions/{appId}/{platform}) ·· _Updates_
 *
 * @param {getApiUpdatesVersionsByAppIdByPlatformData} options
 * @param {string} options.path.appid - `string`
 * @param {string} options.path.platform - `string`
 * @returns Possible status codes: 200, 400
 */
export const getApiUpdatesVersionsByAppIdByPlatform = <ThrowOnError extends boolean = true>(options: Options<GetApiUpdatesVersionsByAppIdByPlatformData, ThrowOnError>) => {
    return (options.client ?? client).get<GetApiUpdatesVersionsByAppIdByPlatformResponses, GetApiUpdatesVersionsByAppIdByPlatformErrors, ThrowOnError, 'data'>({
        responseStyle: 'data',
        url: '/api/updates/versions/{appId}/{platform}',
        ...options
    });
};

/**
 *
 *
 * **GET /api/users** ·· [getApiUsers](http://localhost:9999/docs#tag/User/get/api/users) ·· _User_
 *
 * @param {getApiUsersData} options
 * @returns Possible status codes: 200
 */
export const getApiUsers = <ThrowOnError extends boolean = true>(options?: Options<GetApiUsersData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetApiUsersResponses, unknown, ThrowOnError, 'data'>({
        responseStyle: 'data',
        url: '/api/users',
        ...options
    });
};

/**
 *
 *
 * **POST /api/enter/game** ·· [postApiEnterGame](http://localhost:9999/docs#tag/User/post/api/enter/game) ·· _User_
 *
 * @param {postApiEnterGameData} options
 * @returns Possible status codes: 200
 */
export const postApiEnterGame = <ThrowOnError extends boolean = true>(options?: Options<PostApiEnterGameData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostApiEnterGameResponses, unknown, ThrowOnError, 'data'>({
        responseStyle: 'data',
        url: '/api/enter/game',
        ...options
    });
};

/**
 *
 *
 * **POST /api/games** ·· [postApiGames](http://localhost:9999/docs#tag/User/post/api/games) ·· _User_
 *
 * @param {postApiGamesData} options
 * @returns Possible status codes: 200
 */
export const postApiGames = <ThrowOnError extends boolean = true>(options?: Options<PostApiGamesData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostApiGamesResponses, unknown, ThrowOnError, 'data'>({
        responseStyle: 'data',
        url: '/api/games',
        ...options
    });
};

/**
 *
 *
 * **POST /api/setup/game** ·· [postApiSetupGame](http://localhost:9999/docs#tag/User/post/api/setup/game) ·· _User_
 *
 * @param {postApiSetupGameData} options
 * @returns Possible status codes: 200
 */
export const postApiSetupGame = <ThrowOnError extends boolean = true>(options?: Options<PostApiSetupGameData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostApiSetupGameResponses, unknown, ThrowOnError, 'data'>({
        responseStyle: 'data',
        url: '/api/setup/game',
        ...options
    });
};

/**
 *
 *
 * **GET /api/spinpage** ·· [getApiSpinpage](http://localhost:9999/docs#tag/User/get/api/spinpage) ·· _User_
 *
 * @param {getApiSpinpageData} options
 * @returns Possible status codes: 200
 */
export const getApiSpinpage = <ThrowOnError extends boolean = true>(options?: Options<GetApiSpinpageData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetApiSpinpageResponses, unknown, ThrowOnError, 'data'>({
        responseStyle: 'data',
        url: '/api/spinpage',
        ...options
    });
};

/**
 *
 *
 * **POST /api/spin** ·· [postApiSpin](http://localhost:9999/docs#tag/User/post/api/spin) ·· _User_
 *
 * @param {postApiSpinData} options
 * @returns Possible status codes: 200
 */
export const postApiSpin = <ThrowOnError extends boolean = true>(options?: Options<PostApiSpinData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostApiSpinResponses, unknown, ThrowOnError, 'data'>({
        responseStyle: 'data',
        url: '/api/spin',
        ...options
    });
};

/**
 *
 *
 * **GET /api/favorite/game** ·· [getApiFavoriteGame](http://localhost:9999/docs#tag/User/get/api/favorite/game) ·· _User_
 *
 * @param {getApiFavoriteGameData} options
 * @returns Possible status codes: 200
 */
export const getApiFavoriteGame = <ThrowOnError extends boolean = true>(options?: Options<GetApiFavoriteGameData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetApiFavoriteGameResponses, unknown, ThrowOnError, 'data'>({
        responseStyle: 'data',
        url: '/api/favorite/game',
        ...options
    });
};

/**
 * End the current game session
 *
 *
 *
 * **POST /api/end-game-session** ·· [postApiEndGameSession](http://localhost:9999/docs#tag/User/post/api/end-game-session) ·· _User_
 *
 * @param {postApiEndGameSessionData} options
 * @returns Possible status codes: 200, 401
 */
export const postApiEndGameSession = <ThrowOnError extends boolean = true>(options?: Options<PostApiEndGameSessionData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostApiEndGameSessionResponses, PostApiEndGameSessionErrors, ThrowOnError, 'data'>({
        responseStyle: 'data',
        url: '/api/end-game-session',
        ...options
    });
};

/**
 *
 *
 * **DELETE /api/users/{id}** ·· [deleteApiUsersById](http://localhost:9999/docs#tag/User/delete/api/users/{id}) ·· _User_
 *
 * @param {deleteApiUsersByIdData} options
 * @param {number | null=} options.path.id - `number | null` (optional)
 * @returns Possible status codes: 204, 404, 422
 */
export const deleteApiUsersById = <ThrowOnError extends boolean = true>(options?: Options<DeleteApiUsersByIdData, ThrowOnError>) => {
    return (options?.client ?? client).delete<DeleteApiUsersByIdResponses, DeleteApiUsersByIdErrors, ThrowOnError, 'data'>({
        responseStyle: 'data',
        url: '/api/users/{id}',
        ...options
    });
};

/**
 *
 *
 * **GET /api/users/{id}** ·· [getApiUsersById](http://localhost:9999/docs#tag/User/get/api/users/{id}) ·· _User_
 *
 * @param {getApiUsersByIdData} options
 * @param {number | null=} options.path.id - `number | null` (optional)
 * @returns Possible status codes: 200, 404, 422
 */
export const getApiUsersById = <ThrowOnError extends boolean = true>(options?: Options<GetApiUsersByIdData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetApiUsersByIdResponses, GetApiUsersByIdErrors, ThrowOnError, 'data'>({
        responseStyle: 'data',
        url: '/api/users/{id}',
        ...options
    });
};

/**
 *
 *
 * **PATCH /api/users/{id}** ·· [patchApiUsersById](http://localhost:9999/docs#tag/User/patch/api/users/{id}) ·· _User_
 *
 * @param {patchApiUsersByIdData} options
 * @param {number | null=} options.path.id - `number | null` (optional)
 * @param {enum=} options.body.status - `enum` (optional)
 * @param {string=} options.body.id - `string` (optional)
 * @param {string=} options.body.username - `string` (optional)
 * @param {string | null=} options.body.email - `string | null` (optional)
 * @param {string | null=} options.body.passwordHash - `string | null` (optional)
 * @param {string | null=} options.body.accessToken - `string | null` (optional)
 * @param {string | null=} options.body.refreshToken - `string | null` (optional)
 * @param {string | null=} options.body.accessTokenExpiresAt - `string | null` (optional)
 * @param {string | null=} options.body.refreshTokenExpiresAt - `string | null` (optional)
 * @param {string | null=} options.body.currentGameSessionDataId - `string | null` (optional)
 * @param {string | null=} options.body.currentAuthSessionDataId - `string | null` (optional)
 * @param {string=} options.body.avatarUrl - `string` (optional)
 * @param {string=} options.body.role - `string` (optional)
 * @param {integer=} options.body.phpId - `integer` (optional)
 * @param {boolean=} options.body.isActive - `boolean` (optional)
 * @param {string | null=} options.body.lastLoginAt - `string | null` (optional)
 * @param {integer=} options.body.totalXpGained - `integer` (optional)
 * @param {string | null=} options.body.vipInfoId - `string | null` (optional)
 * @param {string | null=} options.body.createdAt - `string | null` (optional)
 * @param {string | null=} options.body.updatedAt - `string | null` (optional)
 * @param {string | null=} options.body.deletedAt - `string | null` (optional)
 * @param {string | null=} options.body.lastSeen - `string | null` (optional)
 * @param {integer=} options.body.rtgBlockTime - `integer` (optional)
 * @param {string | null=} options.body.phone - `string | null` (optional)
 * @param {any[]=} options.body.path - `any[]` (optional)
 * @param {string | null=} options.body.invitorId - `string | null` (optional)
 * @param {string=} options.body.avatar - `string` (optional)
 * @param {integer=} options.body.count_balance - `integer` (optional)
 * @param {integer=} options.body.count_tournaments - `integer` (optional)
 * @param {integer=} options.body.count_happyhours - `integer` (optional)
 * @param {integer=} options.body.count_refunds - `integer` (optional)
 * @param {integer=} options.body.count_progress - `integer` (optional)
 * @param {integer=} options.body.count_daily_entries - `integer` (optional)
 * @param {integer=} options.body.count_invite - `integer` (optional)
 * @param {integer=} options.body.count_welcomebonus - `integer` (optional)
 * @param {integer=} options.body.count_smsbonus - `integer` (optional)
 * @param {integer=} options.body.count_wheelfortune - `integer` (optional)
 * @param {integer=} options.body.address - `integer` (optional)
 * @param {string | null=} options.body.activeOperatorId - `string | null` (optional)
 * @param {string | null=} options.body.activeWalletId - `string | null` (optional)
 * @param {string | null=} options.body.inviteCode - `string | null` (optional)
 * @returns Possible status codes: 200, 404
 */
export const patchApiUsersById = <ThrowOnError extends boolean = true>(options: Options<PatchApiUsersByIdData, ThrowOnError>) => {
    return (options.client ?? client).patch<PatchApiUsersByIdResponses, PatchApiUsersByIdErrors, ThrowOnError, 'data'>({
        responseStyle: 'data',
        url: '/api/users/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Check if a user exists
 *
 *
 *
 * **GET /api/users/{id}/check** ·· [getApiUsersByIdCheck](http://localhost:9999/docs#tag/User/get/api/users/{id}/check) ·· _User_
 *
 * @param {getApiUsersByIdCheckData} options
 * @param {number | null=} options.path.id - `number | null` (optional)
 * @returns Possible status codes: 200, 404
 */
export const getApiUsersByIdCheck = <ThrowOnError extends boolean = true>(options?: Options<GetApiUsersByIdCheckData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetApiUsersByIdCheckResponses, GetApiUsersByIdCheckErrors, ThrowOnError, 'data'>({
        responseStyle: 'data',
        url: '/api/users/{id}/check',
        ...options
    });
};

/**
 * Send email verification
 *
 *
 *
 * **POST /api/users/{id}/verify-email** ·· [postApiUsersByIdVerifyEmail](http://localhost:9999/docs#tag/User/post/api/users/{id}/verify-email) ·· _User_
 *
 * @param {postApiUsersByIdVerifyEmailData} options
 * @param {number | null=} options.path.id - `number | null` (optional)
 * @returns Possible status codes: 200
 */
export const postApiUsersByIdVerifyEmail = <ThrowOnError extends boolean = true>(options?: Options<PostApiUsersByIdVerifyEmailData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostApiUsersByIdVerifyEmailResponses, unknown, ThrowOnError, 'data'>({
        responseStyle: 'data',
        url: '/api/users/{id}/verify-email',
        ...options
    });
};

/**
 * Get user info
 *
 *
 *
 * **GET /api/users/{id}/info** ·· [getApiUsersByIdInfo](http://localhost:9999/docs#tag/User/get/api/users/{id}/info) ·· _User_
 *
 * @param {getApiUsersByIdInfoData} options
 * @param {number | null=} options.path.id - `number | null` (optional)
 * @returns Possible status codes: 200, 404
 */
export const getApiUsersByIdInfo = <ThrowOnError extends boolean = true>(options?: Options<GetApiUsersByIdInfoData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetApiUsersByIdInfoResponses, GetApiUsersByIdInfoErrors, ThrowOnError, 'data'>({
        responseStyle: 'data',
        url: '/api/users/{id}/info',
        ...options
    });
};

/**
 * Get user VIP info
 *
 *
 *
 * **GET /api/users/{id}/vipinfo** ·· [getApiUsersByIdVipinfo](http://localhost:9999/docs#tag/User/get/api/users/{id}/vipinfo) ·· _User_
 *
 * @param {getApiUsersByIdVipinfoData} options
 * @param {number | null=} options.path.id - `number | null` (optional)
 * @returns Possible status codes: 200
 */
export const getApiUsersByIdVipinfo = <ThrowOnError extends boolean = true>(options?: Options<GetApiUsersByIdVipinfoData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetApiUsersByIdVipinfoResponses, unknown, ThrowOnError, 'data'>({
        responseStyle: 'data',
        url: '/api/users/{id}/vipinfo',
        ...options
    });
};

/**
 *
 *
 * **GET /api/user/amount** ·· [getApiUserAmount](http://localhost:9999/docs#tag/User/get/api/user/amount) ·· _User_
 *
 * @param {getApiUserAmountData} options
 * @returns Possible status codes: 200
 */
export const getApiUserAmount = <ThrowOnError extends boolean = true>(options?: Options<GetApiUserAmountData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetApiUserAmountResponses, unknown, ThrowOnError, 'data'>({
        responseStyle: 'data',
        url: '/api/user/amount',
        ...options
    });
};

/**
 *
 *
 * **POST /api/user/change** ·· [postApiUserChange](http://localhost:9999/docs#tag/User/post/api/user/change) ·· _User_
 *
 * @param {postApiUserChangeData} options
 * @param {enum=} options.body.status - `enum` (optional)
 * @param {string=} options.body.id - `string` (optional)
 * @param {string=} options.body.username - `string` (optional)
 * @param {string | null=} options.body.email - `string | null` (optional)
 * @param {string | null=} options.body.passwordHash - `string | null` (optional)
 * @param {string | null=} options.body.accessToken - `string | null` (optional)
 * @param {string | null=} options.body.refreshToken - `string | null` (optional)
 * @param {string | null=} options.body.accessTokenExpiresAt - `string | null` (optional)
 * @param {string | null=} options.body.refreshTokenExpiresAt - `string | null` (optional)
 * @param {string | null=} options.body.currentGameSessionDataId - `string | null` (optional)
 * @param {string | null=} options.body.currentAuthSessionDataId - `string | null` (optional)
 * @param {string=} options.body.avatarUrl - `string` (optional)
 * @param {string=} options.body.role - `string` (optional)
 * @param {integer=} options.body.phpId - `integer` (optional)
 * @param {boolean=} options.body.isActive - `boolean` (optional)
 * @param {string | null=} options.body.lastLoginAt - `string | null` (optional)
 * @param {integer=} options.body.totalXpGained - `integer` (optional)
 * @param {string | null=} options.body.vipInfoId - `string | null` (optional)
 * @param {string | null=} options.body.createdAt - `string | null` (optional)
 * @param {string | null=} options.body.updatedAt - `string | null` (optional)
 * @param {string | null=} options.body.deletedAt - `string | null` (optional)
 * @param {string | null=} options.body.lastSeen - `string | null` (optional)
 * @param {integer=} options.body.rtgBlockTime - `integer` (optional)
 * @param {string | null=} options.body.phone - `string | null` (optional)
 * @param {any[]=} options.body.path - `any[]` (optional)
 * @param {string | null=} options.body.invitorId - `string | null` (optional)
 * @param {string=} options.body.avatar - `string` (optional)
 * @param {integer=} options.body.count_balance - `integer` (optional)
 * @param {integer=} options.body.count_tournaments - `integer` (optional)
 * @param {integer=} options.body.count_happyhours - `integer` (optional)
 * @param {integer=} options.body.count_refunds - `integer` (optional)
 * @param {integer=} options.body.count_progress - `integer` (optional)
 * @param {integer=} options.body.count_daily_entries - `integer` (optional)
 * @param {integer=} options.body.count_invite - `integer` (optional)
 * @param {integer=} options.body.count_welcomebonus - `integer` (optional)
 * @param {integer=} options.body.count_smsbonus - `integer` (optional)
 * @param {integer=} options.body.count_wheelfortune - `integer` (optional)
 * @param {integer=} options.body.address - `integer` (optional)
 * @param {string | null=} options.body.activeOperatorId - `string | null` (optional)
 * @param {string | null=} options.body.activeWalletId - `string | null` (optional)
 * @param {string | null=} options.body.inviteCode - `string | null` (optional)
 * @returns Possible status codes: 200
 */
export const postApiUserChange = <ThrowOnError extends boolean = true>(options: Options<PostApiUserChangeData, ThrowOnError>) => {
    return (options.client ?? client).post<PostApiUserChangeResponses, unknown, ThrowOnError, 'data'>({
        responseStyle: 'data',
        url: '/api/user/change',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 *
 *
 * **POST /api/user/email** ·· [postApiUserEmail](http://localhost:9999/docs#tag/User/post/api/user/email) ·· _User_
 *
 * @param {postApiUserEmailData} options
 * @param {string=} options.body.email - `string` (optional)
 * @param {string=} options.body.password - `string` (optional)
 * @returns Possible status codes: 200
 */
export const postApiUserEmail = <ThrowOnError extends boolean = true>(options: Options<PostApiUserEmailData, ThrowOnError>) => {
    return (options.client ?? client).post<PostApiUserEmailResponses, unknown, ThrowOnError, 'data'>({
        responseStyle: 'data',
        url: '/api/user/email',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 *
 *
 * **POST /api/user/password** ·· [postApiUserPassword](http://localhost:9999/docs#tag/User/post/api/user/password) ·· _User_
 *
 * @param {postApiUserPasswordData} options
 * @param {string=} options.body.now_password - `string` (optional)
 * @param {string=} options.body.new_password - `string` (optional)
 * @returns Possible status codes: 200
 */
export const postApiUserPassword = <ThrowOnError extends boolean = true>(options: Options<PostApiUserPasswordData, ThrowOnError>) => {
    return (options.client ?? client).post<PostApiUserPasswordResponses, unknown, ThrowOnError, 'data'>({
        responseStyle: 'data',
        url: '/api/user/password',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 *
 *
 * **POST /api/user/suspend** ·· [postApiUserSuspend](http://localhost:9999/docs#tag/User/post/api/user/suspend) ·· _User_
 *
 * @param {postApiUserSuspendData} options
 * @param {number=} options.body.time - `number` (optional)
 * @returns Possible status codes: 200
 */
export const postApiUserSuspend = <ThrowOnError extends boolean = true>(options: Options<PostApiUserSuspendData, ThrowOnError>) => {
    return (options.client ?? client).post<PostApiUserSuspendResponses, unknown, ThrowOnError, 'data'>({
        responseStyle: 'data',
        url: '/api/user/suspend',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get top 10 deposits by user based on most recently created
 *
 *
 *
 * **GET /api/transactions/deposits/top10** ·· [getApiTransactionsDepositsTop10](http://localhost:9999/docs#tag/Transactions/get/api/transactions/deposits/top10) ·· _Transactions_
 *
 * @param {getApiTransactionsDepositsTop10Data} options
 * @returns Possible status codes: 200, 401, 500
 */
export const getApiTransactionsDepositsTop10 = <ThrowOnError extends boolean = true>(options?: Options<GetApiTransactionsDepositsTop10Data, ThrowOnError>) => {
    return (options?.client ?? client).get<GetApiTransactionsDepositsTop10Responses, GetApiTransactionsDepositsTop10Errors, ThrowOnError, 'data'>({
        responseStyle: 'data',
        url: '/api/transactions/deposits/top10',
        ...options
    });
};

/**
 * Create a new deposit
 *
 *
 *
 * **POST /api/transactions/deposits** ·· [postApiTransactionsDeposits](http://localhost:9999/docs#tag/Transactions/post/api/transactions/deposits) ·· _Transactions_
 *
 * @param {postApiTransactionsDepositsData} options
 * @param {string=} options.body.id - `string` (optional)
 * @param {string | null=} options.body.processedAt - `string | null` (optional)
 * @param {string | null=} options.body.walletId - `string | null` (optional)
 * @param {string=} options.body.type - `string` (optional)
 * @param {string=} options.body.status - `string` (optional)
 * @param {integer=} options.body.amount - `integer` (optional)
 * @param {integer | null=} options.body.netAmount - `integer | null` (optional)
 * @param {string | null=} options.body.currencyName - `string | null` (optional)
 * @param {integer | null=} options.body.feeAmount - `integer | null` (optional)
 * @param {string | null=} options.body.productId - `string | null` (optional)
 * @param {string | null=} options.body.paymentMethod - `string | null` (optional)
 * @param {integer | null=} options.body.balanceBefore - `integer | null` (optional)
 * @param {integer | null=} options.body.balanceAfter - `integer | null` (optional)
 * @param {integer | null=} options.body.bonusBalanceBefore - `integer | null` (optional)
 * @param {integer | null=} options.body.bonusBalanceAfter - `integer | null` (optional)
 * @param {integer | null=} options.body.bonusAmount - `integer | null` (optional)
 * @param {integer | null=} options.body.wageringRequirement - `integer | null` (optional)
 * @param {integer | null=} options.body.wageringProgress - `integer | null` (optional)
 * @param {string | null=} options.body.description - `string | null` (optional)
 * @param {string | null=} options.body.provider - `string | null` (optional)
 * @param {string | null=} options.body.providerTxId - `string | null` (optional)
 * @param {string | null=} options.body.relatedGameId - `string | null` (optional)
 * @param {string | null=} options.body.relatedRoundId - `string | null` (optional)
 * @param {string | null=} options.body.createdAt - `string | null` (optional)
 * @param {string | null=} options.body.updatedAt - `string | null` (optional)
 * @param {string | null=} options.body.operatorId - `string | null` (optional)
 * @param {string=} options.body.userId - `string` (optional)
 * @returns Possible status codes: 201, 400, 401, 500
 */
export const postApiTransactionsDeposits = <ThrowOnError extends boolean = true>(options: Options<PostApiTransactionsDepositsData, ThrowOnError>) => {
    return (options.client ?? client).post<PostApiTransactionsDepositsResponses, PostApiTransactionsDepositsErrors, ThrowOnError, 'data'>({
        responseStyle: 'data',
        url: '/api/transactions/deposits',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get deposit by ID
 *
 *
 *
 * **GET /api/transactions/deposits/{id}** ·· [getApiTransactionsDepositsById](http://localhost:9999/docs#tag/Transactions/get/api/transactions/deposits/{id}) ·· _Transactions_
 *
 * @param {getApiTransactionsDepositsByIdData} options
 * @param {string} options.path.id - `string`
 * @returns Possible status codes: 200, 400, 401, 403, 404, 500
 */
export const getApiTransactionsDepositsById = <ThrowOnError extends boolean = true>(options: Options<GetApiTransactionsDepositsByIdData, ThrowOnError>) => {
    return (options.client ?? client).get<GetApiTransactionsDepositsByIdResponses, GetApiTransactionsDepositsByIdErrors, ThrowOnError, 'data'>({
        responseStyle: 'data',
        url: '/api/transactions/deposits/{id}',
        ...options
    });
};

/**
 * Update deposit status
 *
 *
 *
 * **PATCH /api/transactions/deposits/{id}/status** ·· [patchApiTransactionsDepositsByIdStatus](http://localhost:9999/docs#tag/Transactions/patch/api/transactions/deposits/{id}/status) ·· _Transactions_
 *
 * @param {patchApiTransactionsDepositsByIdStatusData} options
 * @param {string} options.path.id - `string`
 * @param {string=} options.body.id - `string` (optional)
 * @param {string | null=} options.body.processedAt - `string | null` (optional)
 * @param {string | null=} options.body.walletId - `string | null` (optional)
 * @param {string=} options.body.type - `string` (optional)
 * @param {string=} options.body.status - `string` (optional)
 * @param {integer=} options.body.amount - `integer` (optional)
 * @param {integer | null=} options.body.netAmount - `integer | null` (optional)
 * @param {string | null=} options.body.currencyName - `string | null` (optional)
 * @param {integer | null=} options.body.feeAmount - `integer | null` (optional)
 * @param {string | null=} options.body.productId - `string | null` (optional)
 * @param {string | null=} options.body.paymentMethod - `string | null` (optional)
 * @param {integer | null=} options.body.balanceBefore - `integer | null` (optional)
 * @param {integer | null=} options.body.balanceAfter - `integer | null` (optional)
 * @param {integer | null=} options.body.bonusBalanceBefore - `integer | null` (optional)
 * @param {integer | null=} options.body.bonusBalanceAfter - `integer | null` (optional)
 * @param {integer | null=} options.body.bonusAmount - `integer | null` (optional)
 * @param {integer | null=} options.body.wageringRequirement - `integer | null` (optional)
 * @param {integer | null=} options.body.wageringProgress - `integer | null` (optional)
 * @param {string | null=} options.body.description - `string | null` (optional)
 * @param {string | null=} options.body.provider - `string | null` (optional)
 * @param {string | null=} options.body.providerTxId - `string | null` (optional)
 * @param {string | null=} options.body.relatedGameId - `string | null` (optional)
 * @param {string | null=} options.body.relatedRoundId - `string | null` (optional)
 * @param {string | null=} options.body.createdAt - `string | null` (optional)
 * @param {string | null=} options.body.updatedAt - `string | null` (optional)
 * @param {string | null=} options.body.operatorId - `string | null` (optional)
 * @param {string=} options.body.userId - `string` (optional)
 * @returns Possible status codes: 200, 400, 401, 403, 404, 500
 */
export const patchApiTransactionsDepositsByIdStatus = <ThrowOnError extends boolean = true>(options: Options<PatchApiTransactionsDepositsByIdStatusData, ThrowOnError>) => {
    return (options.client ?? client).patch<PatchApiTransactionsDepositsByIdStatusResponses, PatchApiTransactionsDepositsByIdStatusErrors, ThrowOnError, 'data'>({
        responseStyle: 'data',
        url: '/api/transactions/deposits/{id}/status',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 *
 *
 * **GET /api/reward/status** ·· [getApiRewardStatus](http://localhost:9999/docs#tag/Rewards/get/api/reward/status) ·· _Rewards_
 *
 * @param {getApiRewardStatusData} options
 * @returns Possible status codes: 200
 */
export const getApiRewardStatus = <ThrowOnError extends boolean = true>(options?: Options<GetApiRewardStatusData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetApiRewardStatusResponses, unknown, ThrowOnError, 'data'>({
        responseStyle: 'data',
        url: '/api/reward/status',
        ...options
    });
};

/**
 *
 *
 * **POST /api/reward/get-log** ·· [postApiRewardGetLog](http://localhost:9999/docs#tag/Rewards/post/api/reward/get-log) ·· _Rewards_
 *
 * @param {postApiRewardGetLogData} options
 * @returns Possible status codes: 200
 */
export const postApiRewardGetLog = <ThrowOnError extends boolean = true>(options?: Options<PostApiRewardGetLogData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostApiRewardGetLogResponses, unknown, ThrowOnError, 'data'>({
        responseStyle: 'data',
        url: '/api/reward/get-log',
        ...options
    });
};

/**
 *
 *
 * **GET /api/reward/activity** ·· [getApiRewardActivity](http://localhost:9999/docs#tag/Rewards/get/api/reward/activity) ·· _Rewards_
 *
 * @param {getApiRewardActivityData} options
 * @returns Possible status codes: 200
 */
export const getApiRewardActivity = <ThrowOnError extends boolean = true>(options?: Options<GetApiRewardActivityData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetApiRewardActivityResponses, unknown, ThrowOnError, 'data'>({
        responseStyle: 'data',
        url: '/api/reward/activity',
        ...options
    });
};

/**
 *
 *
 * **GET /api/reward/dashboard** ·· [getApiRewardDashboard](http://localhost:9999/docs#tag/Rewards/get/api/reward/dashboard) ·· _Rewards_
 *
 * @param {getApiRewardDashboardData} options
 * @returns Possible status codes: 200
 */
export const getApiRewardDashboard = <ThrowOnError extends boolean = true>(options?: Options<GetApiRewardDashboardData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetApiRewardDashboardResponses, unknown, ThrowOnError, 'data'>({
        responseStyle: 'data',
        url: '/api/reward/dashboard',
        ...options
    });
};

/**
 *
 *
 * **POST /api/reward/convert** ·· [postApiRewardConvert](http://localhost:9999/docs#tag/Rewards/post/api/reward/convert) ·· _Rewards_
 *
 * @param {postApiRewardConvertData} options
 * @param {enum=} options.body.type - `enum` (optional)
 * @returns Possible status codes: 200
 */
export const postApiRewardConvert = <ThrowOnError extends boolean = true>(options: Options<PostApiRewardConvertData, ThrowOnError>) => {
    return (options.client ?? client).post<PostApiRewardConvertResponses, unknown, ThrowOnError, 'data'>({
        responseStyle: 'data',
        url: '/api/reward/convert',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get the active wallet for the authenticated user
 *
 *
 *
 * **GET /api/wallets** ·· [getApiWallets](http://localhost:9999/docs#tag/Wallets/get/api/wallets) ·· _Wallets_
 *
 * @param {getApiWalletsData} options
 * @returns Possible status codes: 200, 404
 */
export const getApiWallets = <ThrowOnError extends boolean = true>(options?: Options<GetApiWalletsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetApiWalletsResponses, GetApiWalletsErrors, ThrowOnError, 'data'>({
        responseStyle: 'data',
        url: '/api/wallets',
        ...options
    });
};

/**
 *
 *
 * **POST /api/wallets/cashtag** ·· [postApiWalletsCashtag](http://localhost:9999/docs#tag/Wallets/post/api/wallets/cashtag) ·· _Wallets_
 *
 * @param {postApiWalletsCashtagData} options
 * @param {string=} options.body.cashtag - `string` (optional)
 * @returns Possible status codes: 200, 400, 401
 */
export const postApiWalletsCashtag = <ThrowOnError extends boolean = true>(options: Options<PostApiWalletsCashtagData, ThrowOnError>) => {
    return (options.client ?? client).post<PostApiWalletsCashtagResponses, PostApiWalletsCashtagErrors, ThrowOnError, 'data'>({
        responseStyle: 'data',
        url: '/api/wallets/cashtag',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List all wallets for the authenticated user
 *
 *
 *
 * **GET /api/wallets/history** ·· [getApiWalletsHistory](http://localhost:9999/docs#tag/Wallets/get/api/wallets/history) ·· _Wallets_
 *
 * @param {getApiWalletsHistoryData} options
 * @returns Possible status codes: 200
 */
export const getApiWalletsHistory = <ThrowOnError extends boolean = true>(options?: Options<GetApiWalletsHistoryData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetApiWalletsHistoryResponses, unknown, ThrowOnError, 'data'>({
        responseStyle: 'data',
        url: '/api/wallets/history',
        ...options
    });
};

/**
 * Switch the active wallet to the given operator, creating if needed
 *
 *
 *
 * **POST /api/wallets/switch-operator** ·· [postApiWalletsSwitchOperator](http://localhost:9999/docs#tag/Wallets/post/api/wallets/switch-operator) ·· _Wallets_
 *
 * @param {postApiWalletsSwitchOperatorData} options
 * @param {string=} options.body.operatorId - `string` (optional)
 * @param {string=} options.body.idempotencyKey - `string` (optional)
 * @returns Possible status codes: 200, 400, 401
 */
export const postApiWalletsSwitchOperator = <ThrowOnError extends boolean = true>(options: Options<PostApiWalletsSwitchOperatorData, ThrowOnError>) => {
    return (options.client ?? client).post<PostApiWalletsSwitchOperatorResponses, PostApiWalletsSwitchOperatorErrors, ThrowOnError, 'data'>({
        responseStyle: 'data',
        url: '/api/wallets/switch-operator',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 *
 *
 * **GET /api/referral-code/status** ·· [getApiReferralCodeStatus](http://localhost:9999/docs#tag/Referral/get/api/referral-code/status) ·· _Referral_
 *
 * @param {getApiReferralCodeStatusData} options
 * @returns Possible status codes: 200
 */
export const getApiReferralCodeStatus = <ThrowOnError extends boolean = true>(options?: Options<GetApiReferralCodeStatusData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetApiReferralCodeStatusResponses, unknown, ThrowOnError, 'data'>({
        responseStyle: 'data',
        url: '/api/referral-code/status',
        ...options
    });
};

/**
 *
 *
 * **GET /api/referral-code** ·· [getApiReferralCode](http://localhost:9999/docs#tag/Referral/get/api/referral-code) ·· _Referral_
 *
 * @param {getApiReferralCodeData} options
 * @returns Possible status codes: 200
 */
export const getApiReferralCode = <ThrowOnError extends boolean = true>(options?: Options<GetApiReferralCodeData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetApiReferralCodeResponses, unknown, ThrowOnError, 'data'>({
        responseStyle: 'data',
        url: '/api/referral-code',
        ...options
    });
};

/**
 *
 *
 * **POST /api/referral-code** ·· [postApiReferralCode](http://localhost:9999/docs#tag/Referral/post/api/referral-code) ·· _Referral_
 *
 * @param {postApiReferralCodeData} options
 * @param {string=} options.body.name - `string` (optional)
 * @param {number=} options.body.commissionRate - `number` (optional)
 * @returns Possible status codes: 201
 */
export const postApiReferralCode = <ThrowOnError extends boolean = true>(options: Options<PostApiReferralCodeData, ThrowOnError>) => {
    return (options.client ?? client).post<PostApiReferralCodeResponses, unknown, ThrowOnError, 'data'>({
        responseStyle: 'data',
        url: '/api/referral-code',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 *
 *
 * **DELETE /api/referral-code/:referralCodeId** ·· [deleteApiReferralCodeReferralCodeId](http://localhost:9999/docs#tag/Referral/delete/api/referral-code/:referralCodeId) ·· _Referral_
 *
 * @param {deleteApiReferralCodeReferralCodeIdData} options
 * @param {string} options.path.referralcodeid - `string`
 * @returns Possible status codes: 204
 */
export const deleteApiReferralCodeReferralCodeId = <ThrowOnError extends boolean = true>(options: Options<DeleteApiReferralCodeReferralCodeIdData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteApiReferralCodeReferralCodeIdResponses, unknown, ThrowOnError, 'data'>({
        responseStyle: 'data',
        url: '/api/referral-code/:referralCodeId',
        ...options
    });
};

/**
 *
 *
 * **POST /api/auth/login** ·· [postApiAuthLogin](http://localhost:9999/docs#tag/Auth/post/api/auth/login) ·· _Auth_
 *
 * @param {postApiAuthLoginData} options
 * @param {string=} options.body.password - `string` (optional)
 * @param {string=} options.body.username - `string` (optional)
 * @returns Possible status codes: 200, 400
 */
export const postApiAuthLogin = <ThrowOnError extends boolean = true>(options: Options<PostApiAuthLoginData, ThrowOnError>) => {
    return (options.client ?? client).post<PostApiAuthLoginResponses, PostApiAuthLoginErrors, ThrowOnError, 'data'>({
        responseStyle: 'data',
        url: '/api/auth/login',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 *
 *
 * **POST /api/auth/signup** ·· [postApiAuthSignup](http://localhost:9999/docs#tag/Auth/post/api/auth/signup) ·· _Auth_
 *
 * @param {postApiAuthSignupData} options
 * @param {string=} options.body.username - `string` (optional)
 * @param {string=} options.body.password - `string` (optional)
 * @param {string=} options.body.referralCode - `string` (optional)
 * @param {string=} options.body.operatorId - `string` (optional)
 * @returns Possible status codes: 201, 400
 */
export const postApiAuthSignup = <ThrowOnError extends boolean = true>(options: Options<PostApiAuthSignupData, ThrowOnError>) => {
    return (options.client ?? client).post<PostApiAuthSignupResponses, PostApiAuthSignupErrors, ThrowOnError, 'data'>({
        responseStyle: 'data',
        url: '/api/auth/signup',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Logout current user
 *
 *
 *
 * **POST /api/auth/logout** ·· [postApiAuthLogout](http://localhost:9999/docs#tag/Auth/post/api/auth/logout) ·· _Auth_
 *
 * @param {postApiAuthLogoutData} options
 * @returns Possible status codes: 200, 401
 */
export const postApiAuthLogout = <ThrowOnError extends boolean = true>(options?: Options<PostApiAuthLogoutData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostApiAuthLogoutResponses, PostApiAuthLogoutErrors, ThrowOnError, 'data'>({
        responseStyle: 'data',
        url: '/api/auth/logout',
        ...options
    });
};

/**
 * Get current user session
 *
 *
 *
 * **GET /api/auth/me** ·· [getApiAuthMe](http://localhost:9999/docs#tag/Auth/get/api/auth/me) ·· _Auth_
 *
 * @param {getApiAuthMeData} options
 * @returns Possible status codes: 200, 400
 */
export const getApiAuthMe = <ThrowOnError extends boolean = true>(options?: Options<GetApiAuthMeData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetApiAuthMeResponses, GetApiAuthMeErrors, ThrowOnError, 'data'>({
        responseStyle: 'data',
        url: '/api/auth/me',
        ...options
    });
};

/**
 *
 *
 * **GET /api/games/all** ·· [getApiGamesAll](http://localhost:9999/docs#tag/Games/get/api/games/all) ·· _Games_
 *
 * @param {getApiGamesAllData} options
 * @returns Possible status codes: 200, 400
 */
export const getApiGamesAll = <ThrowOnError extends boolean = true>(options?: Options<GetApiGamesAllData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetApiGamesAllResponses, GetApiGamesAllErrors, ThrowOnError, 'data'>({
        responseStyle: 'data',
        url: '/api/games/all',
        ...options
    });
};

/**
 *
 *
 * **GET /api/games/search** ·· [getApiGamesSearch](http://localhost:9999/docs#tag/Games/get/api/games/search) ·· _Games_
 *
 * @param {getApiGamesSearchData} options
 * @param {string=} options.query.game_categories_slug - `string` (optional)
 * @param {string=} options.query.page - `string` (optional)
 * @param {string=} options.query.limit - `string` (optional)
 * @returns Possible status codes: 200, 400
 */
export const getApiGamesSearch = <ThrowOnError extends boolean = true>(options?: Options<GetApiGamesSearchData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetApiGamesSearchResponses, GetApiGamesSearchErrors, ThrowOnError, 'data'>({
        responseStyle: 'data',
        url: '/api/games/search',
        ...options
    });
};

/**
 *
 *
 * **POST /api/games/{id}/enter** ·· [postApiGamesByIdEnter](http://localhost:9999/docs#tag/Games/post/api/games/{id}/enter) ·· _Games_
 *
 * @param {postApiGamesByIdEnterData} options
 * @param {string} options.path.id - `string`
 * @returns Possible status codes: 200
 */
export const postApiGamesByIdEnter = <ThrowOnError extends boolean = true>(options: Options<PostApiGamesByIdEnterData, ThrowOnError>) => {
    return (options.client ?? client).post<PostApiGamesByIdEnterResponses, unknown, ThrowOnError, 'data'>({
        responseStyle: 'data',
        url: '/api/games/{id}/enter',
        ...options
    });
};

/**
 *
 *
 * **POST /api/games/leave** ·· [postApiGamesLeave](http://localhost:9999/docs#tag/Games/post/api/games/leave) ·· _Games_
 *
 * @param {postApiGamesLeaveData} options
 * @returns Possible status codes: 200
 */
export const postApiGamesLeave = <ThrowOnError extends boolean = true>(options?: Options<PostApiGamesLeaveData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostApiGamesLeaveResponses, unknown, ThrowOnError, 'data'>({
        responseStyle: 'data',
        url: '/api/games/leave',
        ...options
    });
};

/**
 *
 *
 * **GET /api/games/check/session** ·· [getApiGamesCheckSession](http://localhost:9999/docs#tag/Games/get/api/games/check/session) ·· _Games_
 *
 * @param {getApiGamesCheckSessionData} options
 * @returns Possible status codes: 200, 400
 */
export const getApiGamesCheckSession = <ThrowOnError extends boolean = true>(options?: Options<GetApiGamesCheckSessionData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetApiGamesCheckSessionResponses, GetApiGamesCheckSessionErrors, ThrowOnError, 'data'>({
        responseStyle: 'data',
        url: '/api/games/check/session',
        ...options
    });
};

/**
 * Get the active wallet for the authenticated user
 *
 *
 *
 * **GET /api/gamespins/topwins** ·· [getApiGamespinsTopwins](http://localhost:9999/docs#tag/Games/get/api/gamespins/topwins) ·· _Games_
 *
 * @param {getApiGamespinsTopwinsData} options
 * @returns Possible status codes: 200
 */
export const getApiGamespinsTopwins = <ThrowOnError extends boolean = true>(options?: Options<GetApiGamespinsTopwinsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetApiGamespinsTopwinsResponses, unknown, ThrowOnError, 'data'>({
        responseStyle: 'data',
        url: '/api/gamespins/topwins',
        ...options
    });
};

/**
 *
 *
 * **GET /api/vip/ranks** ·· [getApiVipRanks](http://localhost:9999/docs#tag/VIP/get/api/vip/ranks) ·· _VIP_
 *
 * @param {getApiVipRanksData} options
 * @returns Possible status codes: 200
 */
export const getApiVipRanks = <ThrowOnError extends boolean = true>(options?: Options<GetApiVipRanksData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetApiVipRanksResponses, unknown, ThrowOnError, 'data'>({
        responseStyle: 'data',
        url: '/api/vip/ranks',
        ...options
    });
};

/**
 *
 *
 * **POST /api/vip/ranks** ·· [postApiVipRanks](http://localhost:9999/docs#tag/VIP/post/api/vip/ranks) ·· _VIP_
 *
 * @param {postApiVipRanksData} options
 * @param {integer=} options.body.id - `integer` (optional)
 * @param {string=} options.body.name - `string` (optional)
 * @param {integer=} options.body.minXp - `integer` (optional)
 * @param {string=} options.body.icon - `string` (optional)
 * @param {integer=} options.body.dailyCashbackMax - `integer` (optional)
 * @param {integer=} options.body.monthlyCashbackMax - `integer` (optional)
 * @param {integer=} options.body.wagerBonusCoinPct - `integer` (optional)
 * @param {integer=} options.body.purchaseBonusCoinPct - `integer` (optional)
 * @param {integer=} options.body.levelUpBonusCoinPct - `integer` (optional)
 * @param {integer=} options.body.vipSpinMaxAmount - `integer` (optional)
 * @param {boolean=} options.body.hasConcierge - `boolean` (optional)
 * @param {boolean=} options.body.hasVipLoungeAccess - `boolean` (optional)
 * @param {boolean=} options.body.isInvitationOnly - `boolean` (optional)
 * @returns Possible status codes: 201
 */
export const postApiVipRanks = <ThrowOnError extends boolean = true>(options: Options<PostApiVipRanksData, ThrowOnError>) => {
    return (options.client ?? client).post<PostApiVipRanksResponses, unknown, ThrowOnError, 'data'>({
        responseStyle: 'data',
        url: '/api/vip/ranks',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 *
 *
 * **GET /api/vip/levels** ·· [getApiVipLevels](http://localhost:9999/docs#tag/VIP/get/api/vip/levels) ·· _VIP_
 *
 * @param {getApiVipLevelsData} options
 * @returns Possible status codes: 200
 */
export const getApiVipLevels = <ThrowOnError extends boolean = true>(options?: Options<GetApiVipLevelsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetApiVipLevelsResponses, unknown, ThrowOnError, 'data'>({
        responseStyle: 'data',
        url: '/api/vip/levels',
        ...options
    });
};

/**
 *
 *
 * **POST /api/vip/levels** ·· [postApiVipLevels](http://localhost:9999/docs#tag/VIP/post/api/vip/levels) ·· _VIP_
 *
 * @param {postApiVipLevelsData} options
 * @param {string=} options.body.id - `string` (optional)
 * @param {integer=} options.body.parentId - `integer` (optional)
 * @param {integer=} options.body.minXpNeeded - `integer` (optional)
 * @param {integer=} options.body.levelNumber - `integer` (optional)
 * @param {string=} options.body.levelName - `string` (optional)
 * @param {number=} options.body.spinBonusMultiplier - `number` (optional)
 * @param {integer | null=} options.body.settingId - `integer | null` (optional)
 * @param {integer | null=} options.body.levelUpBonusAmount - `integer | null` (optional)
 * @returns Possible status codes: 201
 */
export const postApiVipLevels = <ThrowOnError extends boolean = true>(options: Options<PostApiVipLevelsData, ThrowOnError>) => {
    return (options.client ?? client).post<PostApiVipLevelsResponses, unknown, ThrowOnError, 'data'>({
        responseStyle: 'data',
        url: '/api/vip/levels',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 *
 *
 * **POST /api/vip/cashback** ·· [postApiVipCashback](http://localhost:9999/docs#tag/VIP/post/api/vip/cashback) ·· _VIP_
 *
 * @param {postApiVipCashbackData} options
 * @param {string=} options.body.id - `string` (optional)
 * @param {string | null=} options.body.userId - `string | null` (optional)
 * @param {integer=} options.body.amount - `integer` (optional)
 * @param {string=} options.body.currency - `string` (optional)
 * @param {string=} options.body.tiersName - `string` (optional)
 * @param {string=} options.body.type - `string` (optional)
 * @param {string | null=} options.body.createdAt - `string | null` (optional)
 * @returns Possible status codes: 201
 */
export const postApiVipCashback = <ThrowOnError extends boolean = true>(options: Options<PostApiVipCashbackData, ThrowOnError>) => {
    return (options.client ?? client).post<PostApiVipCashbackResponses, unknown, ThrowOnError, 'data'>({
        responseStyle: 'data',
        url: '/api/vip/cashback',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 *
 *
 * **GET /api/vip/cashback/{userId}** ·· [getApiVipCashbackByUserId](http://localhost:9999/docs#tag/VIP/get/api/vip/cashback/{userId}) ·· _VIP_
 *
 * @param {getApiVipCashbackByUserIdData} options
 * @param {string} options.path.userid - `string`
 * @returns Possible status codes: 200
 */
export const getApiVipCashbackByUserId = <ThrowOnError extends boolean = true>(options: Options<GetApiVipCashbackByUserIdData, ThrowOnError>) => {
    return (options.client ?? client).get<GetApiVipCashbackByUserIdResponses, unknown, ThrowOnError, 'data'>({
        responseStyle: 'data',
        url: '/api/vip/cashback/{userId}',
        ...options
    });
};

/**
 *
 *
 * **POST /api/vip/cashback/monthly/trigger** ·· [postApiVipCashbackMonthlyTrigger](http://localhost:9999/docs#tag/VIP/post/api/vip/cashback/monthly/trigger) ·· _VIP_
 *
 * @param {postApiVipCashbackMonthlyTriggerData} options
 * @returns Possible status codes: 200
 */
export const postApiVipCashbackMonthlyTrigger = <ThrowOnError extends boolean = true>(options?: Options<PostApiVipCashbackMonthlyTriggerData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostApiVipCashbackMonthlyTriggerResponses, unknown, ThrowOnError, 'data'>({
        responseStyle: 'data',
        url: '/api/vip/cashback/monthly/trigger',
        ...options
    });
};

/**
 *
 *
 * **GET /api/vip/bonus/{userId}** ·· [getApiVipBonusByUserId](http://localhost:9999/docs#tag/VIP/get/api/vip/bonus/{userId}) ·· _VIP_
 *
 * @param {getApiVipBonusByUserIdData} options
 * @param {string} options.path.userid - `string`
 * @returns Possible status codes: 200
 */
export const getApiVipBonusByUserId = <ThrowOnError extends boolean = true>(options: Options<GetApiVipBonusByUserIdData, ThrowOnError>) => {
    return (options.client ?? client).get<GetApiVipBonusByUserIdResponses, unknown, ThrowOnError, 'data'>({
        responseStyle: 'data',
        url: '/api/vip/bonus/{userId}',
        ...options
    });
};

/**
 *
 *
 * **POST /api/vip/levelup/calculate** ·· [postApiVipLevelupCalculate](http://localhost:9999/docs#tag/VIP/post/api/vip/levelup/calculate) ·· _VIP_
 *
 * @param {postApiVipLevelupCalculateData} options
 * @param {string=} options.body.userId - `string` (optional)
 * @param {number=} options.body.turnover - `number` (optional)
 * @returns Possible status codes: 200
 */
export const postApiVipLevelupCalculate = <ThrowOnError extends boolean = true>(options: Options<PostApiVipLevelupCalculateData, ThrowOnError>) => {
    return (options.client ?? client).post<PostApiVipLevelupCalculateResponses, unknown, ThrowOnError, 'data'>({
        responseStyle: 'data',
        url: '/api/vip/levelup/calculate',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 *
 *
 * **POST /api/vip/spin-reward** ·· [postApiVipSpinReward](http://localhost:9999/docs#tag/VIP/post/api/vip/spin-reward) ·· _VIP_
 *
 * @param {postApiVipSpinRewardData} options
 * @param {string=} options.body.id - `string` (optional)
 * @param {string=} options.body.userId - `string` (optional)
 * @param {integer=} options.body.amount - `integer` (optional)
 * @param {string=} options.body.currency - `string` (optional)
 * @param {string | null=} options.body.createdAt - `string | null` (optional)
 * @returns Possible status codes: 201
 */
export const postApiVipSpinReward = <ThrowOnError extends boolean = true>(options: Options<PostApiVipSpinRewardData, ThrowOnError>) => {
    return (options.client ?? client).post<PostApiVipSpinRewardResponses, unknown, ThrowOnError, 'data'>({
        responseStyle: 'data',
        url: '/api/vip/spin-reward',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 *
 *
 * **GET /api/vip/spin-reward/total** ·· [getApiVipSpinRewardTotal](http://localhost:9999/docs#tag/VIP/get/api/vip/spin-reward/total) ·· _VIP_
 *
 * @param {getApiVipSpinRewardTotalData} options
 * @returns Possible status codes: 200
 */
export const getApiVipSpinRewardTotal = <ThrowOnError extends boolean = true>(options?: Options<GetApiVipSpinRewardTotalData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetApiVipSpinRewardTotalResponses, unknown, ThrowOnError, 'data'>({
        responseStyle: 'data',
        url: '/api/vip/spin-reward/total',
        ...options
    });
};

/**
 *
 *
 * **GET /api/vip/spin-reward/winners** ·· [getApiVipSpinRewardWinners](http://localhost:9999/docs#tag/VIP/get/api/vip/spin-reward/winners) ·· _VIP_
 *
 * @param {getApiVipSpinRewardWinnersData} options
 * @returns Possible status codes: 200
 */
export const getApiVipSpinRewardWinners = <ThrowOnError extends boolean = true>(options?: Options<GetApiVipSpinRewardWinnersData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetApiVipSpinRewardWinnersResponses, unknown, ThrowOnError, 'data'>({
        responseStyle: 'data',
        url: '/api/vip/spin-reward/winners',
        ...options
    });
};

/**
 *
 *
 * **GET /api/vip/spin-reward/last/{userId}** ·· [getApiVipSpinRewardLastByUserId](http://localhost:9999/docs#tag/VIP/get/api/vip/spin-reward/last/{userId}) ·· _VIP_
 *
 * @param {getApiVipSpinRewardLastByUserIdData} options
 * @param {string} options.path.userid - `string`
 * @returns Possible status codes: 200
 */
export const getApiVipSpinRewardLastByUserId = <ThrowOnError extends boolean = true>(options: Options<GetApiVipSpinRewardLastByUserIdData, ThrowOnError>) => {
    return (options.client ?? client).get<GetApiVipSpinRewardLastByUserIdResponses, unknown, ThrowOnError, 'data'>({
        responseStyle: 'data',
        url: '/api/vip/spin-reward/last/{userId}',
        ...options
    });
};

/**
 * Get weekly settlement history for the operator
 *
 *
 *
 * **GET /api/dashboard/settlements** ·· [getApiDashboardSettlements](http://localhost:9999/docs#tag/Operator Dashboard/get/api/dashboard/settlements) ·· _Operator Dashboard_
 *
 * @param {getApiDashboardSettlementsData} options
 * @param {string=} options.query.limit - `string` (optional)
 * @returns Possible status codes: 200, 500
 */
export const getApiDashboardSettlements = <ThrowOnError extends boolean = true>(options?: Options<GetApiDashboardSettlementsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetApiDashboardSettlementsResponses, GetApiDashboardSettlementsErrors, ThrowOnError, 'data'>({
        responseStyle: 'data',
        url: '/api/dashboard/settlements',
        ...options
    });
};

/**
 * Get a report on loyalty fund contributions vs. benefits
 *
 *
 *
 * **GET /api/dashboard/loyalty-report** ·· [getApiDashboardLoyaltyReport](http://localhost:9999/docs#tag/Operator Dashboard/get/api/dashboard/loyalty-report) ·· _Operator Dashboard_
 *
 * @param {getApiDashboardLoyaltyReportData} options
 * @param {enum} options.query.period - `enum`
 * @returns Possible status codes: 200, 400, 500
 */
export const getApiDashboardLoyaltyReport = <ThrowOnError extends boolean = true>(options: Options<GetApiDashboardLoyaltyReportData, ThrowOnError>) => {
    return (options.client ?? client).get<GetApiDashboardLoyaltyReportResponses, GetApiDashboardLoyaltyReportErrors, ThrowOnError, 'data'>({
        responseStyle: 'data',
        url: '/api/dashboard/loyalty-report',
        ...options
    });
};

/**
 * Get operator KPIs and summary statistics
 *
 *
 *
 * **GET /api/dashboard/kpis** ·· [getApiDashboardKpis](http://localhost:9999/docs#tag/Operator Dashboard/get/api/dashboard/kpis) ·· _Operator Dashboard_
 *
 * @param {getApiDashboardKpisData} options
 * @returns Possible status codes: 200, 500
 */
export const getApiDashboardKpis = <ThrowOnError extends boolean = true>(options?: Options<GetApiDashboardKpisData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetApiDashboardKpisResponses, GetApiDashboardKpisErrors, ThrowOnError, 'data'>({
        responseStyle: 'data',
        url: '/api/dashboard/kpis',
        ...options
    });
};

/**
 * Get top players by various metrics
 *
 *
 *
 * **GET /api/dashboard/top-players** ·· [getApiDashboardTopPlayers](http://localhost:9999/docs#tag/Operator Dashboard/get/api/dashboard/top-players) ·· _Operator Dashboard_
 *
 * @param {getApiDashboardTopPlayersData} options
 * @param {enum=} options.query.metric - `enum` (optional)
 * @param {string=} options.query.limit - `string` (optional)
 * @returns Possible status codes: 200, 400, 500
 */
export const getApiDashboardTopPlayers = <ThrowOnError extends boolean = true>(options?: Options<GetApiDashboardTopPlayersData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetApiDashboardTopPlayersResponses, GetApiDashboardTopPlayersErrors, ThrowOnError, 'data'>({
        responseStyle: 'data',
        url: '/api/dashboard/top-players',
        ...options
    });
};

/**
 * Get recent activity summary for the operator
 *
 *
 *
 * **GET /api/dashboard/recent-activity** ·· [getApiDashboardRecentActivity](http://localhost:9999/docs#tag/Operator Dashboard/get/api/dashboard/recent-activity) ·· _Operator Dashboard_
 *
 * @param {getApiDashboardRecentActivityData} options
 * @param {string=} options.query.days - `string` (optional)
 * @returns Possible status codes: 200, 500
 */
export const getApiDashboardRecentActivity = <ThrowOnError extends boolean = true>(options?: Options<GetApiDashboardRecentActivityData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetApiDashboardRecentActivityResponses, GetApiDashboardRecentActivityErrors, ThrowOnError, 'data'>({
        responseStyle: 'data',
        url: '/api/dashboard/recent-activity',
        ...options
    });
};

/**
 * Get a high-level summary of key performance indicators
 *
 *
 *
 * **GET /api/dashboard/kpi-summary** ·· [getApiDashboardKpiSummary](http://localhost:9999/docs#tag/Operator Dashboard/get/api/dashboard/kpi-summary) ·· _Operator Dashboard_
 *
 * @param {getApiDashboardKpiSummaryData} options
 * @returns Possible status codes: 200, 500
 */
export const getApiDashboardKpiSummary = <ThrowOnError extends boolean = true>(options?: Options<GetApiDashboardKpiSummaryData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetApiDashboardKpiSummaryResponses, GetApiDashboardKpiSummaryErrors, ThrowOnError, 'data'>({
        responseStyle: 'data',
        url: '/api/dashboard/kpi-summary',
        ...options
    });
};

/**
 * Get a paginated and filterable history of transactions
 *
 *
 *
 * **GET /api/dashboard/transactions** ·· [getApiDashboardTransactions](http://localhost:9999/docs#tag/Operator Dashboard/get/api/dashboard/transactions) ·· _Operator Dashboard_
 *
 * @param {getApiDashboardTransactionsData} options
 * @param {string=} options.query.page - `string` (optional)
 * @param {string=} options.query.pagesize - `string` (optional)
 * @param {string=} options.query.userid - `string` (optional)
 * @param {string=} options.query.status - `string` (optional)
 * @param {string=} options.query.startdate - `string` (optional)
 * @param {string=} options.query.enddate - `string` (optional)
 * @returns Possible status codes: 200, 500
 */
export const getApiDashboardTransactions = <ThrowOnError extends boolean = true>(options?: Options<GetApiDashboardTransactionsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetApiDashboardTransactionsResponses, GetApiDashboardTransactionsErrors, ThrowOnError, 'data'>({
        responseStyle: 'data',
        url: '/api/dashboard/transactions',
        ...options
    });
};

/**
 * Monitor user registration and removal trends
 *
 *
 *
 * **GET /api/dashboard/user-activity** ·· [getApiDashboardUserActivity](http://localhost:9999/docs#tag/Operator Dashboard/get/api/dashboard/user-activity) ·· _Operator Dashboard_
 *
 * @param {getApiDashboardUserActivityData} options
 * @param {enum=} options.query.daterange - `enum` (optional)
 * @param {string=} options.query.startdate - `string` (optional)
 * @param {string=} options.query.enddate - `string` (optional)
 * @returns Possible status codes: 200, 500
 */
export const getApiDashboardUserActivity = <ThrowOnError extends boolean = true>(options?: Options<GetApiDashboardUserActivityData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetApiDashboardUserActivityResponses, GetApiDashboardUserActivityErrors, ThrowOnError, 'data'>({
        responseStyle: 'data',
        url: '/api/dashboard/user-activity',
        ...options
    });
};

/**
 * Get performance statistics for individual games
 *
 *
 *
 * **GET /api/dashboard/game-stats** ·· [getApiDashboardGameStats](http://localhost:9999/docs#tag/Operator Dashboard/get/api/dashboard/game-stats) ·· _Operator Dashboard_
 *
 * @param {getApiDashboardGameStatsData} options
 * @returns Possible status codes: 200, 500
 */
export const getApiDashboardGameStats = <ThrowOnError extends boolean = true>(options?: Options<GetApiDashboardGameStatsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetApiDashboardGameStatsResponses, GetApiDashboardGameStatsErrors, ThrowOnError, 'data'>({
        responseStyle: 'data',
        url: '/api/dashboard/game-stats',
        ...options
    });
};

/**
 * Get a paginated list of players for the operator
 *
 *
 *
 * **GET /api/dashboard/players** ·· [getApiDashboardPlayers](http://localhost:9999/docs#tag/Operator Dashboard/get/api/dashboard/players) ·· _Operator Dashboard_
 *
 * @param {getApiDashboardPlayersData} options
 * @param {string=} options.query.page - `string` (optional)
 * @param {string=} options.query.pagesize - `string` (optional)
 * @returns Possible status codes: 200, 500
 */
export const getApiDashboardPlayers = <ThrowOnError extends boolean = true>(options?: Options<GetApiDashboardPlayersData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetApiDashboardPlayersResponses, GetApiDashboardPlayersErrors, ThrowOnError, 'data'>({
        responseStyle: 'data',
        url: '/api/dashboard/players',
        ...options
    });
};

/**
 * Get all operators
 *
 *
 *
 * **GET /api/operators** ·· [getApiOperators](http://localhost:9999/docs#tag/Operator/get/api/operators) ·· _Operator_
 *
 * @param {getApiOperatorsData} options
 * @returns Possible status codes: 200, 401
 */
export const getApiOperators = <ThrowOnError extends boolean = true>(options?: Options<GetApiOperatorsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetApiOperatorsResponses, GetApiOperatorsErrors, ThrowOnError, 'data'>({
        responseStyle: 'data',
        url: '/api/operators',
        ...options
    });
};

/**
 * Get all products for the current users operator
 *
 *
 *
 * **GET /api/operators/products** ·· [getApiOperatorsProducts](http://localhost:9999/docs#tag/Operator/get/api/operators/products) ·· _Operator_
 *
 * @param {getApiOperatorsProductsData} options
 * @returns Possible status codes: 200, 401
 */
export const getApiOperatorsProducts = <ThrowOnError extends boolean = true>(options?: Options<GetApiOperatorsProductsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetApiOperatorsProductsResponses, GetApiOperatorsProductsErrors, ThrowOnError, 'data'>({
        responseStyle: 'data',
        url: '/api/operators/products',
        ...options
    });
};

/**
 * Get redtiger settings for a game
 *
 *
 *
 * **POST /api/redtiger/game/settings** ·· [postApiRedtigerGameSettings](http://localhost:9999/docs#tag/RedTiger/post/api/redtiger/game/settings) ·· _RedTiger_
 *
 * @param {postApiRedtigerGameSettingsData} options
 * @returns Possible status codes: 200, 500
 */
export const postApiRedtigerGameSettings = <ThrowOnError extends boolean = true>(options?: Options<PostApiRedtigerGameSettingsData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostApiRedtigerGameSettingsResponses, PostApiRedtigerGameSettingsErrors, ThrowOnError, 'data'>({
        responseStyle: 'data',
        url: '/api/redtiger/game/settings',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Perform a spin in a redtiger game
 *
 *
 *
 * **POST /api/redtiger/game/spin** ·· [postApiRedtigerGameSpin](http://localhost:9999/docs#tag/RedTiger/post/api/redtiger/game/spin) ·· _RedTiger_
 *
 * @param {postApiRedtigerGameSpinData} options
 * @returns Possible status codes: 200, 500
 */
export const postApiRedtigerGameSpin = <ThrowOnError extends boolean = true>(options?: Options<PostApiRedtigerGameSpinData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostApiRedtigerGameSpinResponses, PostApiRedtigerGameSpinErrors, ThrowOnError, 'data'>({
        responseStyle: 'data',
        url: '/api/redtiger/game/spin',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Handles game actions like init and spin via the PHP engine
 *
 * This single endpoint manages all interactions with a game. The body of the request determines the action to be performed (e.g., init, spin, paytable).
 *
 * **POST /api/game/{gameName}/server*** ·· [postApiGameByGameNameServer-*](http://localhost:9999/docs#tag/PHP Games/post/api/game/{gameName}/server*) ·· _PHP Games_
 *
 * @param {postApiGameByGameNameServer-*Data} options
 * @param {string} options.path.gamename - `string`
 * @returns Possible status codes: 200, 400, 401, 404, 500
 */
export const postApiGameByGameNameServer__ = <ThrowOnError extends boolean = true>(options: Options<PostApiGameByGameNameServer__Data, ThrowOnError>) => {
    return (options.client ?? client).post<PostApiGameByGameNameServer__Responses, PostApiGameByGameNameServer__Errors, ThrowOnError, 'data'>({
        responseStyle: 'data',
        url: '/api/game/{gameName}/server/*',
        ...options
    });
};

/**
 * Handles game actions like init and spin via the PHP engine
 *
 * This single endpoint manages all interactions with a game. The body of the request determines the action to be performed (e.g., init, spin, paytable).
 *
 * **POST /api/game/config*** ·· [postApiGameConfig-*](http://localhost:9999/docs#tag/PHP Games/post/api/game/config*) ·· _PHP Games_
 *
 * @param {postApiGameConfig-*Data} options
 * @returns Possible status codes: 200, 400, 401, 404, 500
 */
export const postApiGameConfig__ = <ThrowOnError extends boolean = true>(options?: Options<PostApiGameConfig__Data, ThrowOnError>) => {
    return (options?.client ?? client).post<PostApiGameConfig__Responses, PostApiGameConfig__Errors, ThrowOnError, 'data'>({
        responseStyle: 'data',
        url: '/api/game/config/*',
        ...options
    });
};
